# ./ebau_gwr/core/schema/ech_0216_2_0.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:82ca6a2003d40a9ed34ff88f069b36b42f693b86
# Generated 2020-12-04 11:54:01.101370 by PyXB version 1.2.6 using Python 3.6.12.final.0
# Namespace http://www.ech.ch/xmlns/eCH-0216/2

from __future__ import unicode_literals

import io
import sys

import pyxb
import pyxb.binding

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes
import pyxb.binding.saxer
import pyxb.utils.domutils
import pyxb.utils.six as _six
import pyxb.utils.utility

import ebau_gwr.core.schema.ech_0007_6_0 as _ImportedBinding_ebau_gwr_core_schema_ech_0007_6_0
import ebau_gwr.core.schema.ech_0010_6_0 as _ImportedBinding_ebau_gwr_core_schema_ech_0010_6_0
import ebau_gwr.core.schema.ech_0058_5_0 as _ImportedBinding_ebau_gwr_core_schema_ech_0058_5_0
import ebau_gwr.core.schema.ech_0129_5_0 as _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier(
    "urn:uuid:654009a2-3627-11eb-b71b-0242ac150003"
)

# Version of PyXB used to generate the bindings
_PyXBVersion = "1.2.6"
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()


# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI(
    "http://www.ech.ch/xmlns/eCH-0216/2", create_if_missing=True
)
Namespace.configureCategories(["typeBinding", "elementBinding"])


def CreateFromDocument(xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(
        fallback_namespace=default_namespace, location_base=location_base
    )
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance


def CreateFromDOM(node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.ech.ch/xmlns/eCH-0216/2}reasonType
class reasonType(pyxb.binding.datatypes.token):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "reasonType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 114, 1
    )
    _Documentation = None


reasonType._CF_maxLength = pyxb.binding.facets.CF_maxLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(255)
)
reasonType._InitializeFacetMap(reasonType._CF_maxLength)
Namespace.addCategoryObject("typeBinding", "reasonType", reasonType)
_module_typeBindings.reasonType = reasonType

# Atomic simple type: {http://www.ech.ch/xmlns/eCH-0216/2}ruleIDType
class ruleIDType(pyxb.binding.datatypes.token):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "ruleIDType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 119, 1
    )
    _Documentation = None


ruleIDType._CF_maxLength = pyxb.binding.facets.CF_maxLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(6)
)
ruleIDType._InitializeFacetMap(ruleIDType._CF_maxLength)
Namespace.addCategoryObject("typeBinding", "ruleIDType", ruleIDType)
_module_typeBindings.ruleIDType = ruleIDType

# Atomic simple type: {http://www.ech.ch/xmlns/eCH-0216/2}actionType
class actionType(pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "actionType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 124, 1
    )
    _Documentation = None


actionType._CF_maxLength = pyxb.binding.facets.CF_maxLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(8)
)
actionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(
    value_datatype=actionType, enum_prefix=None
)
actionType.Refused = actionType._CF_enumeration.addEnumeration(
    unicode_value="Refused", tag="Refused"
)
actionType.Cleaner = actionType._CF_enumeration.addEnumeration(
    unicode_value="Cleaner", tag="Cleaner"
)
actionType.Blocking = actionType._CF_enumeration.addEnumeration(
    unicode_value="Blocking", tag="Blocking"
)
actionType.Listed = actionType._CF_enumeration.addEnumeration(
    unicode_value="Listed", tag="Listed"
)
actionType.Auto = actionType._CF_enumeration.addEnumeration(
    unicode_value="Auto", tag="Auto"
)
actionType._InitializeFacetMap(actionType._CF_maxLength, actionType._CF_enumeration)
Namespace.addCategoryObject("typeBinding", "actionType", actionType)
_module_typeBindings.actionType = actionType

# Atomic simple type: {http://www.ech.ch/xmlns/eCH-0216/2}mutationIdType
class mutationIdType(pyxb.binding.datatypes.nonNegativeInteger):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "mutationIdType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 134, 1
    )
    _Documentation = None


mutationIdType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(
    value=pyxb.binding.datatypes.positiveInteger(10)
)
mutationIdType._InitializeFacetMap(mutationIdType._CF_totalDigits)
Namespace.addCategoryObject("typeBinding", "mutationIdType", mutationIdType)
_module_typeBindings.mutationIdType = mutationIdType

# Atomic simple type: {http://www.ech.ch/xmlns/eCH-0216/2}ruleCategoryType
class ruleCategoryType(
    pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin
):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "ruleCategoryType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 139, 1
    )
    _Documentation = None


ruleCategoryType._CF_maxLength = pyxb.binding.facets.CF_maxLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(4)
)
ruleCategoryType._CF_enumeration = pyxb.binding.facets.CF_enumeration(
    value_datatype=ruleCategoryType, enum_prefix=None
)
ruleCategoryType.BAU = ruleCategoryType._CF_enumeration.addEnumeration(
    unicode_value="BAU", tag="BAU"
)
ruleCategoryType.GW = ruleCategoryType._CF_enumeration.addEnumeration(
    unicode_value="G+W", tag="GW"
)
ruleCategoryType.ADR = ruleCategoryType._CF_enumeration.addEnumeration(
    unicode_value="ADR", tag="ADR"
)
ruleCategoryType.MISS = ruleCategoryType._CF_enumeration.addEnumeration(
    unicode_value="MISS", tag="MISS"
)
ruleCategoryType.DB = ruleCategoryType._CF_enumeration.addEnumeration(
    unicode_value="DB", tag="DB"
)
ruleCategoryType._InitializeFacetMap(
    ruleCategoryType._CF_maxLength, ruleCategoryType._CF_enumeration
)
Namespace.addCategoryObject("typeBinding", "ruleCategoryType", ruleCategoryType)
_module_typeBindings.ruleCategoryType = ruleCategoryType

# Atomic simple type: {http://www.ech.ch/xmlns/eCH-0216/2}ruleTextType
class ruleTextType(pyxb.binding.datatypes.token):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "ruleTextType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 149, 1
    )
    _Documentation = None


ruleTextType._CF_maxLength = pyxb.binding.facets.CF_maxLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(1000)
)
ruleTextType._InitializeFacetMap(ruleTextType._CF_maxLength)
Namespace.addCategoryObject("typeBinding", "ruleTextType", ruleTextType)
_module_typeBindings.ruleTextType = ruleTextType

# Atomic simple type: {http://www.ech.ch/xmlns/eCH-0216/2}codeType
class codeType(
    pyxb.binding.datatypes.nonNegativeInteger, pyxb.binding.basis.enumeration_mixin
):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "codeType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 154, 1
    )
    _Documentation = None


codeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(
    value_datatype=codeType, enum_prefix=None
)
codeType._CF_enumeration.addEnumeration(unicode_value="0", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="2", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="5", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="8", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="10", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="11", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="12", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="13", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="14", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="19", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="51", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="52", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="53", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="54", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="55", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="60", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="90", tag=None)
codeType._CF_enumeration.addEnumeration(unicode_value="99", tag=None)
codeType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(
    value=pyxb.binding.datatypes.positiveInteger(2)
)
codeType._InitializeFacetMap(codeType._CF_enumeration, codeType._CF_totalDigits)
Namespace.addCategoryObject("typeBinding", "codeType", codeType)
_module_typeBindings.codeType = codeType

# Atomic simple type: {http://www.ech.ch/xmlns/eCH-0216/2}surveyStatusType
class surveyStatusType(
    pyxb.binding.datatypes.nonNegativeInteger, pyxb.binding.basis.enumeration_mixin
):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "surveyStatusType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 177, 1
    )
    _Documentation = None


surveyStatusType._CF_enumeration = pyxb.binding.facets.CF_enumeration(
    value_datatype=surveyStatusType, enum_prefix=None
)
surveyStatusType._CF_enumeration.addEnumeration(unicode_value="610", tag=None)
surveyStatusType._CF_enumeration.addEnumeration(unicode_value="620", tag=None)
surveyStatusType._CF_enumeration.addEnumeration(unicode_value="630", tag=None)
surveyStatusType._CF_enumeration.addEnumeration(unicode_value="650", tag=None)
surveyStatusType._CF_enumeration.addEnumeration(unicode_value="651", tag=None)
surveyStatusType._CF_enumeration.addEnumeration(unicode_value="660", tag=None)
surveyStatusType._CF_enumeration.addEnumeration(unicode_value="661", tag=None)
surveyStatusType._CF_enumeration.addEnumeration(unicode_value="662", tag=None)
surveyStatusType._CF_enumeration.addEnumeration(unicode_value="663", tag=None)
surveyStatusType._CF_enumeration.addEnumeration(unicode_value="665", tag=None)
surveyStatusType._CF_enumeration.addEnumeration(unicode_value="667", tag=None)
surveyStatusType._CF_enumeration.addEnumeration(unicode_value="670", tag=None)
surveyStatusType._CF_enumeration.addEnumeration(unicode_value="680", tag=None)
surveyStatusType._CF_enumeration.addEnumeration(unicode_value="690", tag=None)
surveyStatusType._CF_enumeration.addEnumeration(unicode_value="691", tag=None)
surveyStatusType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(
    value=pyxb.binding.datatypes.positiveInteger(3)
)
surveyStatusType._InitializeFacetMap(
    surveyStatusType._CF_enumeration, surveyStatusType._CF_totalDigits
)
Namespace.addCategoryObject("typeBinding", "surveyStatusType", surveyStatusType)
_module_typeBindings.surveyStatusType = surveyStatusType

# Atomic simple type: {http://www.ech.ch/xmlns/eCH-0216/2}coordinatesEastType
class coordinatesEastType(pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "coordinatesEastType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1200, 1
    )
    _Documentation = None


coordinatesEastType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(
    value_datatype=coordinatesEastType,
    value=pyxb.binding.datatypes.decimal("2480000.0"),
)
coordinatesEastType._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(
    value_datatype=coordinatesEastType,
    value=pyxb.binding.datatypes.decimal("2840000.999"),
)
coordinatesEastType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(
    value=pyxb.binding.datatypes.positiveInteger(10)
)
coordinatesEastType._CF_fractionDigits = pyxb.binding.facets.CF_fractionDigits(
    value=pyxb.binding.datatypes.nonNegativeInteger(3)
)
coordinatesEastType._InitializeFacetMap(
    coordinatesEastType._CF_minInclusive,
    coordinatesEastType._CF_maxInclusive,
    coordinatesEastType._CF_totalDigits,
    coordinatesEastType._CF_fractionDigits,
)
Namespace.addCategoryObject("typeBinding", "coordinatesEastType", coordinatesEastType)
_module_typeBindings.coordinatesEastType = coordinatesEastType

# Atomic simple type: {http://www.ech.ch/xmlns/eCH-0216/2}coordinatesNorthType
class coordinatesNorthType(pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "coordinatesNorthType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1208, 1
    )
    _Documentation = None


coordinatesNorthType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(
    value_datatype=coordinatesNorthType,
    value=pyxb.binding.datatypes.decimal("1070000.0"),
)
coordinatesNorthType._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(
    value_datatype=coordinatesNorthType,
    value=pyxb.binding.datatypes.decimal("1300000.999"),
)
coordinatesNorthType._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(
    value=pyxb.binding.datatypes.positiveInteger(10)
)
coordinatesNorthType._CF_fractionDigits = pyxb.binding.facets.CF_fractionDigits(
    value=pyxb.binding.datatypes.nonNegativeInteger(3)
)
coordinatesNorthType._InitializeFacetMap(
    coordinatesNorthType._CF_minInclusive,
    coordinatesNorthType._CF_maxInclusive,
    coordinatesNorthType._CF_totalDigits,
    coordinatesNorthType._CF_fractionDigits,
)
Namespace.addCategoryObject("typeBinding", "coordinatesNorthType", coordinatesNorthType)
_module_typeBindings.coordinatesNorthType = coordinatesNorthType

# Atomic simple type: {http://www.ech.ch/xmlns/eCH-0216/2}datePartiallyKnownType
class datePartiallyKnownType(pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "datePartiallyKnownType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1216, 1
    )
    _Documentation = None


datePartiallyKnownType._CF_pattern = pyxb.binding.facets.CF_pattern()
datePartiallyKnownType._CF_pattern.addPattern(
    pattern="[1-9][0-9]{3}(-(0[1-9]|1[0-2]))?"
)
datePartiallyKnownType._InitializeFacetMap(datePartiallyKnownType._CF_pattern)
Namespace.addCategoryObject(
    "typeBinding", "datePartiallyKnownType", datePartiallyKnownType
)
_module_typeBindings.datePartiallyKnownType = datePartiallyKnownType

# Atomic simple type: [anonymous]
class STD_ANON(pyxb.binding.datatypes.token):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1238, 4
    )
    _Documentation = None


STD_ANON._CF_minLength = pyxb.binding.facets.CF_minLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(1)
)
STD_ANON._CF_maxLength = pyxb.binding.facets.CF_maxLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(20)
)
STD_ANON._InitializeFacetMap(STD_ANON._CF_minLength, STD_ANON._CF_maxLength)
_module_typeBindings.STD_ANON = STD_ANON

# Atomic simple type: [anonymous]
class STD_ANON_(pyxb.binding.datatypes.token):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1260, 4
    )
    _Documentation = None


STD_ANON_._CF_minLength = pyxb.binding.facets.CF_minLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(1)
)
STD_ANON_._CF_maxLength = pyxb.binding.facets.CF_maxLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(20)
)
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_minLength, STD_ANON_._CF_maxLength)
_module_typeBindings.STD_ANON_ = STD_ANON_

# Atomic simple type: [anonymous]
class STD_ANON_2(pyxb.binding.datatypes.token):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1296, 4
    )
    _Documentation = None


STD_ANON_2._CF_minLength = pyxb.binding.facets.CF_minLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(1)
)
STD_ANON_2._CF_maxLength = pyxb.binding.facets.CF_maxLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(20)
)
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_minLength, STD_ANON_2._CF_maxLength)
_module_typeBindings.STD_ANON_2 = STD_ANON_2

# Atomic simple type: [anonymous]
class STD_ANON_3(pyxb.binding.datatypes.token):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1316, 4
    )
    _Documentation = None


STD_ANON_3._CF_minLength = pyxb.binding.facets.CF_minLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(1)
)
STD_ANON_3._CF_maxLength = pyxb.binding.facets.CF_maxLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(20)
)
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_minLength, STD_ANON_3._CF_maxLength)
_module_typeBindings.STD_ANON_3 = STD_ANON_3

# Atomic simple type: {http://www.ech.ch/xmlns/eCH-0216/2}constructionSurveyDeptType
class constructionSurveyDeptType(pyxb.binding.datatypes.nonNegativeInteger):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDeptType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1326, 1
    )
    _Documentation = None


constructionSurveyDeptType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(
    value_datatype=constructionSurveyDeptType,
    value=pyxb.binding.datatypes.nonNegativeInteger(100),
)
constructionSurveyDeptType._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(
    value_datatype=constructionSurveyDeptType,
    value=pyxb.binding.datatypes.nonNegativeInteger(999999),
)
constructionSurveyDeptType._InitializeFacetMap(
    constructionSurveyDeptType._CF_minInclusive,
    constructionSurveyDeptType._CF_maxInclusive,
)
Namespace.addCategoryObject(
    "typeBinding", "constructionSurveyDeptType", constructionSurveyDeptType
)
_module_typeBindings.constructionSurveyDeptType = constructionSurveyDeptType

# Atomic simple type: {http://www.ech.ch/xmlns/eCH-0216/2}ARBIDType
class ARBIDType(pyxb.binding.datatypes.nonNegativeInteger):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "ARBIDType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1429, 1
    )
    _Documentation = None


ARBIDType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(
    value_datatype=ARBIDType, value=pyxb.binding.datatypes.nonNegativeInteger(1)
)
ARBIDType._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(
    value_datatype=ARBIDType,
    value=pyxb.binding.datatypes.nonNegativeInteger(999999999999),
)
ARBIDType._InitializeFacetMap(ARBIDType._CF_minInclusive, ARBIDType._CF_maxInclusive)
Namespace.addCategoryObject("typeBinding", "ARBIDType", ARBIDType)
_module_typeBindings.ARBIDType = ARBIDType

# Atomic simple type: [anonymous]
class STD_ANON_4(pyxb.binding.datatypes.token):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1438, 4
    )
    _Documentation = None


STD_ANON_4._CF_minLength = pyxb.binding.facets.CF_minLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(2)
)
STD_ANON_4._CF_maxLength = pyxb.binding.facets.CF_maxLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(40)
)
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_minLength, STD_ANON_4._CF_maxLength)
_module_typeBindings.STD_ANON_4 = STD_ANON_4

# Atomic simple type: [anonymous]
class STD_ANON_5(pyxb.binding.datatypes.token):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1446, 4
    )
    _Documentation = None


STD_ANON_5._CF_minLength = pyxb.binding.facets.CF_minLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(2)
)
STD_ANON_5._CF_maxLength = pyxb.binding.facets.CF_maxLength(
    value=pyxb.binding.datatypes.nonNegativeInteger(18)
)
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_minLength, STD_ANON_5._CF_maxLength)
_module_typeBindings.STD_ANON_5 = STD_ANON_5

# Atomic simple type: {http://www.ech.ch/xmlns/eCH-0216/2}typeOfConstructionProjectType
class typeOfConstructionProjectType(
    pyxb.binding.datatypes.nonNegativeInteger, pyxb.binding.basis.enumeration_mixin
):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "typeOfConstructionProjectType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1470, 1
    )
    _Documentation = None


typeOfConstructionProjectType._CF_enumeration = pyxb.binding.facets.CF_enumeration(
    value_datatype=typeOfConstructionProjectType, enum_prefix=None
)
typeOfConstructionProjectType._CF_enumeration.addEnumeration(
    unicode_value="6010", tag=None
)
typeOfConstructionProjectType._CF_enumeration.addEnumeration(
    unicode_value="6011", tag=None
)
typeOfConstructionProjectType._CF_enumeration.addEnumeration(
    unicode_value="6012", tag=None
)
typeOfConstructionProjectType._InitializeFacetMap(
    typeOfConstructionProjectType._CF_enumeration
)
Namespace.addCategoryObject(
    "typeBinding", "typeOfConstructionProjectType", typeOfConstructionProjectType
)
_module_typeBindings.typeOfConstructionProjectType = typeOfConstructionProjectType

# Atomic simple type: [anonymous]
class STD_ANON_6(
    _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.iDCategoryType,
    pyxb.binding.basis.enumeration_mixin,
):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1224, 4
    )
    _Documentation = None


STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(
    value_datatype=STD_ANON_6, enum_prefix=None
)
STD_ANON_6.insurance = STD_ANON_6._CF_enumeration.addEnumeration(
    unicode_value="insurance", tag="insurance"
)
STD_ANON_6.canton = STD_ANON_6._CF_enumeration.addEnumeration(
    unicode_value="canton", tag="canton"
)
STD_ANON_6.n1990Census = STD_ANON_6._CF_enumeration.addEnumeration(
    unicode_value="1990Census", tag="n1990Census"
)
STD_ANON_6.taxAssessment = STD_ANON_6._CF_enumeration.addEnumeration(
    unicode_value="taxAssessment", tag="taxAssessment"
)
STD_ANON_6.municipal = STD_ANON_6._CF_enumeration.addEnumeration(
    unicode_value="municipal", tag="municipal"
)
STD_ANON_6.n2000Census = STD_ANON_6._CF_enumeration.addEnumeration(
    unicode_value="2000Census", tag="n2000Census"
)
STD_ANON_6.cadastreSurvey = STD_ANON_6._CF_enumeration.addEnumeration(
    unicode_value="cadastreSurvey", tag="cadastreSurvey"
)
STD_ANON_6.externalApp = STD_ANON_6._CF_enumeration.addEnumeration(
    unicode_value="externalApp", tag="externalApp"
)
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)
_module_typeBindings.STD_ANON_6 = STD_ANON_6

# Atomic simple type: [anonymous]
class STD_ANON_7(
    _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.iDCategoryType,
    pyxb.binding.basis.enumeration_mixin,
):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1251, 4
    )
    _Documentation = None


STD_ANON_7._CF_enumeration = pyxb.binding.facets.CF_enumeration(
    value_datatype=STD_ANON_7, enum_prefix=None
)
STD_ANON_7.canton = STD_ANON_7._CF_enumeration.addEnumeration(
    unicode_value="canton", tag="canton"
)
STD_ANON_7.municipal = STD_ANON_7._CF_enumeration.addEnumeration(
    unicode_value="municipal", tag="municipal"
)
STD_ANON_7.externalApp = STD_ANON_7._CF_enumeration.addEnumeration(
    unicode_value="externalApp", tag="externalApp"
)
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_enumeration)
_module_typeBindings.STD_ANON_7 = STD_ANON_7

# Atomic simple type: [anonymous]
class STD_ANON_8(
    _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.iDCategoryType,
    pyxb.binding.basis.enumeration_mixin,
):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1288, 4
    )
    _Documentation = None


STD_ANON_8._CF_enumeration = pyxb.binding.facets.CF_enumeration(
    value_datatype=STD_ANON_8, enum_prefix=None
)
STD_ANON_8.canton = STD_ANON_8._CF_enumeration.addEnumeration(
    unicode_value="canton", tag="canton"
)
STD_ANON_8.externalApp = STD_ANON_8._CF_enumeration.addEnumeration(
    unicode_value="externalApp", tag="externalApp"
)
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_enumeration)
_module_typeBindings.STD_ANON_8 = STD_ANON_8

# Atomic simple type: [anonymous]
class STD_ANON_9(
    _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.iDCategoryType,
    pyxb.binding.basis.enumeration_mixin,
):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1309, 4
    )
    _Documentation = None


STD_ANON_9._CF_enumeration = pyxb.binding.facets.CF_enumeration(
    value_datatype=STD_ANON_9, enum_prefix=None
)
STD_ANON_9.externalApp = STD_ANON_9._CF_enumeration.addEnumeration(
    unicode_value="externalApp", tag="externalApp"
)
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_enumeration)
_module_typeBindings.STD_ANON_9 = STD_ANON_9

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 11, 2
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}addConstructionProject uses Python identifier addConstructionProject
    __addConstructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "addConstructionProject"),
        "addConstructionProject",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162addConstructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 14, 5),
    )

    addConstructionProject = property(
        __addConstructionProject.value, __addConstructionProject.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}setToApprovedConstructionProject uses Python identifier setToApprovedConstructionProject
    __setToApprovedConstructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "setToApprovedConstructionProject"),
        "setToApprovedConstructionProject",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162setToApprovedConstructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 15, 5),
    )

    setToApprovedConstructionProject = property(
        __setToApprovedConstructionProject.value,
        __setToApprovedConstructionProject.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}setToConstructionStarted uses Python identifier setToConstructionStarted
    __setToConstructionStarted = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "setToConstructionStarted"),
        "setToConstructionStarted",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162setToConstructionStarted",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 16, 5),
    )

    setToConstructionStarted = property(
        __setToConstructionStarted.value, __setToConstructionStarted.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}setToCompletedConstructionProject uses Python identifier setToCompletedConstructionProject
    __setToCompletedConstructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "setToCompletedConstructionProject"),
        "setToCompletedConstructionProject",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162setToCompletedConstructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 17, 5),
    )

    setToCompletedConstructionProject = property(
        __setToCompletedConstructionProject.value,
        __setToCompletedConstructionProject.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}setToCompletedBuilding uses Python identifier setToCompletedBuilding
    __setToCompletedBuilding = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "setToCompletedBuilding"),
        "setToCompletedBuilding",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162setToCompletedBuilding",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 18, 5),
    )

    setToCompletedBuilding = property(
        __setToCompletedBuilding.value, __setToCompletedBuilding.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}setToCompletedDwelling uses Python identifier setToCompletedDwelling
    __setToCompletedDwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "setToCompletedDwelling"),
        "setToCompletedDwelling",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162setToCompletedDwelling",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 19, 5),
    )

    setToCompletedDwelling = property(
        __setToCompletedDwelling.value, __setToCompletedDwelling.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}setMaintenanceCosts uses Python identifier setMaintenanceCosts
    __setMaintenanceCosts = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "setMaintenanceCosts"),
        "setMaintenanceCosts",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162setMaintenanceCosts",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 20, 5),
    )

    setMaintenanceCosts = property(
        __setMaintenanceCosts.value, __setMaintenanceCosts.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}modifyConstructionProject uses Python identifier modifyConstructionProject
    __modifyConstructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "modifyConstructionProject"),
        "modifyConstructionProject",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162modifyConstructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 21, 5),
    )

    modifyConstructionProject = property(
        __modifyConstructionProject.value, __modifyConstructionProject.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}bindBuildingToConstructionProject uses Python identifier bindBuildingToConstructionProject
    __bindBuildingToConstructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "bindBuildingToConstructionProject"),
        "bindBuildingToConstructionProject",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162bindBuildingToConstructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 22, 5),
    )

    bindBuildingToConstructionProject = property(
        __bindBuildingToConstructionProject.value,
        __bindBuildingToConstructionProject.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}modifyConstructionSurveyDept uses Python identifier modifyConstructionSurveyDept
    __modifyConstructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "modifyConstructionSurveyDept"),
        "modifyConstructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162modifyConstructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 23, 5),
    )

    modifyConstructionSurveyDept = property(
        __modifyConstructionSurveyDept.value,
        __modifyConstructionSurveyDept.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}addBuilding uses Python identifier addBuilding
    __addBuilding = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "addBuilding"),
        "addBuilding",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162addBuilding",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 24, 5),
    )

    addBuilding = property(__addBuilding.value, __addBuilding.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}modifyBuilding uses Python identifier modifyBuilding
    __modifyBuilding = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "modifyBuilding"),
        "modifyBuilding",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162modifyBuilding",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 25, 5),
    )

    modifyBuilding = property(__modifyBuilding.value, __modifyBuilding.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}addBuildingEntrance uses Python identifier addBuildingEntrance
    __addBuildingEntrance = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "addBuildingEntrance"),
        "addBuildingEntrance",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162addBuildingEntrance",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 26, 5),
    )

    addBuildingEntrance = property(
        __addBuildingEntrance.value, __addBuildingEntrance.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}modifyBuildingEntrance uses Python identifier modifyBuildingEntrance
    __modifyBuildingEntrance = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "modifyBuildingEntrance"),
        "modifyBuildingEntrance",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162modifyBuildingEntrance",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 27, 5),
    )

    modifyBuildingEntrance = property(
        __modifyBuildingEntrance.value, __modifyBuildingEntrance.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}addDwelling uses Python identifier addDwelling
    __addDwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "addDwelling"),
        "addDwelling",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162addDwelling",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 28, 5),
    )

    addDwelling = property(__addDwelling.value, __addDwelling.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}modifyDwelling uses Python identifier modifyDwelling
    __modifyDwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "modifyDwelling"),
        "modifyDwelling",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162modifyDwelling",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 29, 5),
    )

    modifyDwelling = property(__modifyDwelling.value, __modifyDwelling.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reallocateDwelling uses Python identifier reallocateDwelling
    __reallocateDwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reallocateDwelling"),
        "reallocateDwelling",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162reallocateDwelling",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 30, 5),
    )

    reallocateDwelling = property(
        __reallocateDwelling.value, __reallocateDwelling.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getConstructionProject uses Python identifier getConstructionProject
    __getConstructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getConstructionProject"),
        "getConstructionProject",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162getConstructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 31, 5),
    )

    getConstructionProject = property(
        __getConstructionProject.value, __getConstructionProject.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getDeactivatedConstructionProject uses Python identifier getDeactivatedConstructionProject
    __getDeactivatedConstructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getDeactivatedConstructionProject"),
        "getDeactivatedConstructionProject",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162getDeactivatedConstructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 32, 5),
    )

    getDeactivatedConstructionProject = property(
        __getDeactivatedConstructionProject.value,
        __getDeactivatedConstructionProject.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getConstructionSurveyDept uses Python identifier getConstructionSurveyDept
    __getConstructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getConstructionSurveyDept"),
        "getConstructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162getConstructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 33, 5),
    )

    getConstructionSurveyDept = property(
        __getConstructionSurveyDept.value, __getConstructionSurveyDept.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getBuilding uses Python identifier getBuilding
    __getBuilding = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getBuilding"),
        "getBuilding",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162getBuilding",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 34, 5),
    )

    getBuilding = property(__getBuilding.value, __getBuilding.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getDeactivatedBuilding uses Python identifier getDeactivatedBuilding
    __getDeactivatedBuilding = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getDeactivatedBuilding"),
        "getDeactivatedBuilding",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162getDeactivatedBuilding",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 35, 5),
    )

    getDeactivatedBuilding = property(
        __getDeactivatedBuilding.value, __getDeactivatedBuilding.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getDwelling uses Python identifier getDwelling
    __getDwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getDwelling"),
        "getDwelling",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162getDwelling",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 36, 5),
    )

    getDwelling = property(__getDwelling.value, __getDwelling.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getDeactivatedDwelling uses Python identifier getDeactivatedDwelling
    __getDeactivatedDwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getDeactivatedDwelling"),
        "getDeactivatedDwelling",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162getDeactivatedDwelling",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 37, 5),
    )

    getDeactivatedDwelling = property(
        __getDeactivatedDwelling.value, __getDeactivatedDwelling.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getBuildingEntrance uses Python identifier getBuildingEntrance
    __getBuildingEntrance = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getBuildingEntrance"),
        "getBuildingEntrance",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162getBuildingEntrance",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 38, 5),
    )

    getBuildingEntrance = property(
        __getBuildingEntrance.value, __getBuildingEntrance.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getMutation uses Python identifier getMutation
    __getMutation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getMutation"),
        "getMutation",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162getMutation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 39, 5),
    )

    getMutation = property(__getMutation.value, __getMutation.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}addStreet uses Python identifier addStreet
    __addStreet = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "addStreet"),
        "addStreet",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162addStreet",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 40, 5),
    )

    addStreet = property(__addStreet.value, __addStreet.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}modifyStreet uses Python identifier modifyStreet
    __modifyStreet = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "modifyStreet"),
        "modifyStreet",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162modifyStreet",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 41, 5),
    )

    modifyStreet = property(__modifyStreet.value, __modifyStreet.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getStreet uses Python identifier getStreet
    __getStreet = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getStreet"),
        "getStreet",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162getStreet",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 42, 5),
    )

    getStreet = property(__getStreet.value, __getStreet.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getDeactivatedStreet uses Python identifier getDeactivatedStreet
    __getDeactivatedStreet = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getDeactivatedStreet"),
        "getDeactivatedStreet",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162getDeactivatedStreet",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 43, 5),
    )

    getDeactivatedStreet = property(
        __getDeactivatedStreet.value, __getDeactivatedStreet.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}modifyStreetName uses Python identifier modifyStreetName
    __modifyStreetName = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "modifyStreetName"),
        "modifyStreetName",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162modifyStreetName",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 44, 5),
    )

    modifyStreetName = property(
        __modifyStreetName.value, __modifyStreetName.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}deleteStreetSection uses Python identifier deleteStreetSection
    __deleteStreetSection = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "deleteStreetSection"),
        "deleteStreetSection",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162deleteStreetSection",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 45, 5),
    )

    deleteStreetSection = property(
        __deleteStreetSection.value, __deleteStreetSection.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}addStreetName uses Python identifier addStreetName
    __addStreetName = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "addStreetName"),
        "addStreetName",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162addStreetName",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 46, 5),
    )

    addStreetName = property(__addStreetName.value, __addStreetName.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}deleteStreetName uses Python identifier deleteStreetName
    __deleteStreetName = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "deleteStreetName"),
        "deleteStreetName",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162deleteStreetName",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 47, 5),
    )

    deleteStreetName = property(
        __deleteStreetName.value, __deleteStreetName.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}setToRefusedConstruction uses Python identifier setToRefusedConstruction
    __setToRefusedConstruction = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "setToRefusedConstruction"),
        "setToRefusedConstruction",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162setToRefusedConstruction",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 48, 5),
    )

    setToRefusedConstruction = property(
        __setToRefusedConstruction.value, __setToRefusedConstruction.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}setToCancelledConstruction uses Python identifier setToCancelledConstruction
    __setToCancelledConstruction = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "setToCancelledConstruction"),
        "setToCancelledConstruction",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162setToCancelledConstruction",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 49, 5),
    )

    setToCancelledConstruction = property(
        __setToCancelledConstruction.value, __setToCancelledConstruction.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}setToWithdrawnConstruction uses Python identifier setToWithdrawnConstruction
    __setToWithdrawnConstruction = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "setToWithdrawnConstruction"),
        "setToWithdrawnConstruction",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162setToWithdrawnConstruction",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 50, 5),
    )

    setToWithdrawnConstruction = property(
        __setToWithdrawnConstruction.value, __setToWithdrawnConstruction.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}setToSuspendedConstruction uses Python identifier setToSuspendedConstruction
    __setToSuspendedConstruction = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "setToSuspendedConstruction"),
        "setToSuspendedConstruction",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162setToSuspendedConstruction",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 51, 5),
    )

    setToSuspendedConstruction = property(
        __setToSuspendedConstruction.value, __setToSuspendedConstruction.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}setToDemolishedBuilding uses Python identifier setToDemolishedBuilding
    __setToDemolishedBuilding = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "setToDemolishedBuilding"),
        "setToDemolishedBuilding",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162setToDemolishedBuilding",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 52, 5),
    )

    setToDemolishedBuilding = property(
        __setToDemolishedBuilding.value, __setToDemolishedBuilding.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}setToDemolishedDwelling uses Python identifier setToDemolishedDwelling
    __setToDemolishedDwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "setToDemolishedDwelling"),
        "setToDemolishedDwelling",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162setToDemolishedDwelling",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 53, 5),
    )

    setToDemolishedDwelling = property(
        __setToDemolishedDwelling.value, __setToDemolishedDwelling.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}deactivateConstructionProject uses Python identifier deactivateConstructionProject
    __deactivateConstructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "deactivateConstructionProject"),
        "deactivateConstructionProject",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162deactivateConstructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 54, 5),
    )

    deactivateConstructionProject = property(
        __deactivateConstructionProject.value,
        __deactivateConstructionProject.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reactivateConstructionProject uses Python identifier reactivateConstructionProject
    __reactivateConstructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reactivateConstructionProject"),
        "reactivateConstructionProject",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162reactivateConstructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 55, 5),
    )

    reactivateConstructionProject = property(
        __reactivateConstructionProject.value,
        __reactivateConstructionProject.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}deactivateBuilding uses Python identifier deactivateBuilding
    __deactivateBuilding = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "deactivateBuilding"),
        "deactivateBuilding",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162deactivateBuilding",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 56, 5),
    )

    deactivateBuilding = property(
        __deactivateBuilding.value, __deactivateBuilding.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}deactivateBuildingEntrance uses Python identifier deactivateBuildingEntrance
    __deactivateBuildingEntrance = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "deactivateBuildingEntrance"),
        "deactivateBuildingEntrance",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162deactivateBuildingEntrance",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 57, 5),
    )

    deactivateBuildingEntrance = property(
        __deactivateBuildingEntrance.value, __deactivateBuildingEntrance.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reactivateBuilding uses Python identifier reactivateBuilding
    __reactivateBuilding = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reactivateBuilding"),
        "reactivateBuilding",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162reactivateBuilding",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 58, 5),
    )

    reactivateBuilding = property(
        __reactivateBuilding.value, __reactivateBuilding.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reactivateBuildingEntrance uses Python identifier reactivateBuildingEntrance
    __reactivateBuildingEntrance = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reactivateBuildingEntrance"),
        "reactivateBuildingEntrance",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162reactivateBuildingEntrance",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 59, 5),
    )

    reactivateBuildingEntrance = property(
        __reactivateBuildingEntrance.value, __reactivateBuildingEntrance.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}deactivateDwelling uses Python identifier deactivateDwelling
    __deactivateDwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "deactivateDwelling"),
        "deactivateDwelling",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162deactivateDwelling",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 60, 5),
    )

    deactivateDwelling = property(
        __deactivateDwelling.value, __deactivateDwelling.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reactivateDwelling uses Python identifier reactivateDwelling
    __reactivateDwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reactivateDwelling"),
        "reactivateDwelling",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162reactivateDwelling",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 61, 5),
    )

    reactivateDwelling = property(
        __reactivateDwelling.value, __reactivateDwelling.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getArchivedConstructionProject uses Python identifier getArchivedConstructionProject
    __getArchivedConstructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getArchivedConstructionProject"),
        "getArchivedConstructionProject",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162getArchivedConstructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 62, 5),
    )

    getArchivedConstructionProject = property(
        __getArchivedConstructionProject.value,
        __getArchivedConstructionProject.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}addStreetSection uses Python identifier addStreetSection
    __addStreetSection = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "addStreetSection"),
        "addStreetSection",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON_httpwww_ech_chxmlnseCH_02162addStreetSection",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 63, 5),
    )

    addStreetSection = property(
        __addStreetSection.value, __addStreetSection.set, None, None
    )

    _ElementMap.update(
        {
            __addConstructionProject.name(): __addConstructionProject,
            __setToApprovedConstructionProject.name(): __setToApprovedConstructionProject,
            __setToConstructionStarted.name(): __setToConstructionStarted,
            __setToCompletedConstructionProject.name(): __setToCompletedConstructionProject,
            __setToCompletedBuilding.name(): __setToCompletedBuilding,
            __setToCompletedDwelling.name(): __setToCompletedDwelling,
            __setMaintenanceCosts.name(): __setMaintenanceCosts,
            __modifyConstructionProject.name(): __modifyConstructionProject,
            __bindBuildingToConstructionProject.name(): __bindBuildingToConstructionProject,
            __modifyConstructionSurveyDept.name(): __modifyConstructionSurveyDept,
            __addBuilding.name(): __addBuilding,
            __modifyBuilding.name(): __modifyBuilding,
            __addBuildingEntrance.name(): __addBuildingEntrance,
            __modifyBuildingEntrance.name(): __modifyBuildingEntrance,
            __addDwelling.name(): __addDwelling,
            __modifyDwelling.name(): __modifyDwelling,
            __reallocateDwelling.name(): __reallocateDwelling,
            __getConstructionProject.name(): __getConstructionProject,
            __getDeactivatedConstructionProject.name(): __getDeactivatedConstructionProject,
            __getConstructionSurveyDept.name(): __getConstructionSurveyDept,
            __getBuilding.name(): __getBuilding,
            __getDeactivatedBuilding.name(): __getDeactivatedBuilding,
            __getDwelling.name(): __getDwelling,
            __getDeactivatedDwelling.name(): __getDeactivatedDwelling,
            __getBuildingEntrance.name(): __getBuildingEntrance,
            __getMutation.name(): __getMutation,
            __addStreet.name(): __addStreet,
            __modifyStreet.name(): __modifyStreet,
            __getStreet.name(): __getStreet,
            __getDeactivatedStreet.name(): __getDeactivatedStreet,
            __modifyStreetName.name(): __modifyStreetName,
            __deleteStreetSection.name(): __deleteStreetSection,
            __addStreetName.name(): __addStreetName,
            __deleteStreetName.name(): __deleteStreetName,
            __setToRefusedConstruction.name(): __setToRefusedConstruction,
            __setToCancelledConstruction.name(): __setToCancelledConstruction,
            __setToWithdrawnConstruction.name(): __setToWithdrawnConstruction,
            __setToSuspendedConstruction.name(): __setToSuspendedConstruction,
            __setToDemolishedBuilding.name(): __setToDemolishedBuilding,
            __setToDemolishedDwelling.name(): __setToDemolishedDwelling,
            __deactivateConstructionProject.name(): __deactivateConstructionProject,
            __reactivateConstructionProject.name(): __reactivateConstructionProject,
            __deactivateBuilding.name(): __deactivateBuilding,
            __deactivateBuildingEntrance.name(): __deactivateBuildingEntrance,
            __reactivateBuilding.name(): __reactivateBuilding,
            __reactivateBuildingEntrance.name(): __reactivateBuildingEntrance,
            __deactivateDwelling.name(): __deactivateDwelling,
            __reactivateDwelling.name(): __reactivateDwelling,
            __getArchivedConstructionProject.name(): __getArchivedConstructionProject,
            __addStreetSection.name(): __addStreetSection,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 69, 2
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}deliveryHeader uses Python identifier deliveryHeader
    __deliveryHeader = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "deliveryHeader"),
        "deliveryHeader",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162deliveryHeader",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 71, 4),
    )

    deliveryHeader = property(__deliveryHeader.value, __deliveryHeader.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectCompleteResponse uses Python identifier constructionProjectCompleteResponse
    __constructionProjectCompleteResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionProjectCompleteResponse"),
        "constructionProjectCompleteResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162constructionProjectCompleteResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 73, 5),
    )

    constructionProjectCompleteResponse = property(
        __constructionProjectCompleteResponse.value,
        __constructionProjectCompleteResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectProcessResponse uses Python identifier constructionProjectProcessResponse
    __constructionProjectProcessResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionProjectProcessResponse"),
        "constructionProjectProcessResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162constructionProjectProcessResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 74, 5),
    )

    constructionProjectProcessResponse = property(
        __constructionProjectProcessResponse.value,
        __constructionProjectProcessResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingProcessResponse uses Python identifier buildingProcessResponse
    __buildingProcessResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingProcessResponse"),
        "buildingProcessResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162buildingProcessResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 75, 5),
    )

    buildingProcessResponse = property(
        __buildingProcessResponse.value, __buildingProcessResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingUnusableResponse uses Python identifier buildingUnusableResponse
    __buildingUnusableResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingUnusableResponse"),
        "buildingUnusableResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162buildingUnusableResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 76, 5),
    )

    buildingUnusableResponse = property(
        __buildingUnusableResponse.value, __buildingUnusableResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingCompleteResponse uses Python identifier buildingCompleteResponse
    __buildingCompleteResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingCompleteResponse"),
        "buildingCompleteResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162buildingCompleteResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 77, 5),
    )

    buildingCompleteResponse = property(
        __buildingCompleteResponse.value, __buildingCompleteResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwellingProcessResponse uses Python identifier dwellingProcessResponse
    __dwellingProcessResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwellingProcessResponse"),
        "dwellingProcessResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162dwellingProcessResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 78, 5),
    )

    dwellingProcessResponse = property(
        __dwellingProcessResponse.value, __dwellingProcessResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwellingCompleteResponse uses Python identifier dwellingCompleteResponse
    __dwellingCompleteResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwellingCompleteResponse"),
        "dwellingCompleteResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162dwellingCompleteResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 79, 5),
    )

    dwellingCompleteResponse = property(
        __dwellingCompleteResponse.value, __dwellingCompleteResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwellingUnusableResponse uses Python identifier dwellingUnusableResponse
    __dwellingUnusableResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwellingUnusableResponse"),
        "dwellingUnusableResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162dwellingUnusableResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 80, 5),
    )

    dwellingUnusableResponse = property(
        __dwellingUnusableResponse.value, __dwellingUnusableResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}quarterlySurveyResponse uses Python identifier quarterlySurveyResponse
    __quarterlySurveyResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "quarterlySurveyResponse"),
        "quarterlySurveyResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162quarterlySurveyResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 81, 5),
    )

    quarterlySurveyResponse = property(
        __quarterlySurveyResponse.value, __quarterlySurveyResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}modifyConstructionProjectResponse uses Python identifier modifyConstructionProjectResponse
    __modifyConstructionProjectResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "modifyConstructionProjectResponse"),
        "modifyConstructionProjectResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162modifyConstructionProjectResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 82, 5),
    )

    modifyConstructionProjectResponse = property(
        __modifyConstructionProjectResponse.value,
        __modifyConstructionProjectResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}bindBuildingToConstructionProjectResponse uses Python identifier bindBuildingToConstructionProjectResponse
    __bindBuildingToConstructionProjectResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "bindBuildingToConstructionProjectResponse"
        ),
        "bindBuildingToConstructionProjectResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162bindBuildingToConstructionProjectResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 83, 5),
    )

    bindBuildingToConstructionProjectResponse = property(
        __bindBuildingToConstructionProjectResponse.value,
        __bindBuildingToConstructionProjectResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}deactivateConstructionProjectResponse uses Python identifier deactivateConstructionProjectResponse
    __deactivateConstructionProjectResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "deactivateConstructionProjectResponse"),
        "deactivateConstructionProjectResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162deactivateConstructionProjectResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 84, 5),
    )

    deactivateConstructionProjectResponse = property(
        __deactivateConstructionProjectResponse.value,
        __deactivateConstructionProjectResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reactivateConstructionProjectResponse uses Python identifier reactivateConstructionProjectResponse
    __reactivateConstructionProjectResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reactivateConstructionProjectResponse"),
        "reactivateConstructionProjectResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162reactivateConstructionProjectResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 85, 5),
    )

    reactivateConstructionProjectResponse = property(
        __reactivateConstructionProjectResponse.value,
        __reactivateConstructionProjectResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}modifyConstructionSurveyDeptResponse uses Python identifier modifyConstructionSurveyDeptResponse
    __modifyConstructionSurveyDeptResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "modifyConstructionSurveyDeptResponse"),
        "modifyConstructionSurveyDeptResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162modifyConstructionSurveyDeptResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 86, 5),
    )

    modifyConstructionSurveyDeptResponse = property(
        __modifyConstructionSurveyDeptResponse.value,
        __modifyConstructionSurveyDeptResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}addBuildingResponse uses Python identifier addBuildingResponse
    __addBuildingResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "addBuildingResponse"),
        "addBuildingResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162addBuildingResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 87, 5),
    )

    addBuildingResponse = property(
        __addBuildingResponse.value, __addBuildingResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getBuildingByIdResponse uses Python identifier getBuildingByIdResponse
    __getBuildingByIdResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getBuildingByIdResponse"),
        "getBuildingByIdResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162getBuildingByIdResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 88, 5),
    )

    getBuildingByIdResponse = property(
        __getBuildingByIdResponse.value, __getBuildingByIdResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reactivateBuildingResponse uses Python identifier reactivateBuildingResponse
    __reactivateBuildingResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reactivateBuildingResponse"),
        "reactivateBuildingResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162reactivateBuildingResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 89, 5),
    )

    reactivateBuildingResponse = property(
        __reactivateBuildingResponse.value, __reactivateBuildingResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}modifyBuildingResponse uses Python identifier modifyBuildingResponse
    __modifyBuildingResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "modifyBuildingResponse"),
        "modifyBuildingResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162modifyBuildingResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 90, 5),
    )

    modifyBuildingResponse = property(
        __modifyBuildingResponse.value, __modifyBuildingResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}deactivateBuildingResponse uses Python identifier deactivateBuildingResponse
    __deactivateBuildingResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "deactivateBuildingResponse"),
        "deactivateBuildingResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162deactivateBuildingResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 91, 5),
    )

    deactivateBuildingResponse = property(
        __deactivateBuildingResponse.value, __deactivateBuildingResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}addModifyBuildingEntranceResponse uses Python identifier addModifyBuildingEntranceResponse
    __addModifyBuildingEntranceResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "addModifyBuildingEntranceResponse"),
        "addModifyBuildingEntranceResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162addModifyBuildingEntranceResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 92, 5),
    )

    addModifyBuildingEntranceResponse = property(
        __addModifyBuildingEntranceResponse.value,
        __addModifyBuildingEntranceResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}deactivateBuildingEntranceResponse uses Python identifier deactivateBuildingEntranceResponse
    __deactivateBuildingEntranceResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "deactivateBuildingEntranceResponse"),
        "deactivateBuildingEntranceResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162deactivateBuildingEntranceResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 93, 5),
    )

    deactivateBuildingEntranceResponse = property(
        __deactivateBuildingEntranceResponse.value,
        __deactivateBuildingEntranceResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reactivateBuildingEntranceResponse uses Python identifier reactivateBuildingEntranceResponse
    __reactivateBuildingEntranceResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reactivateBuildingEntranceResponse"),
        "reactivateBuildingEntranceResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162reactivateBuildingEntranceResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 94, 5),
    )

    reactivateBuildingEntranceResponse = property(
        __reactivateBuildingEntranceResponse.value,
        __reactivateBuildingEntranceResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}addModifyDwellingResponse uses Python identifier addModifyDwellingResponse
    __addModifyDwellingResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "addModifyDwellingResponse"),
        "addModifyDwellingResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162addModifyDwellingResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 95, 5),
    )

    addModifyDwellingResponse = property(
        __addModifyDwellingResponse.value, __addModifyDwellingResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reactivateReallocateDwellingResponse uses Python identifier reactivateReallocateDwellingResponse
    __reactivateReallocateDwellingResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reactivateReallocateDwellingResponse"),
        "reactivateReallocateDwellingResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162reactivateReallocateDwellingResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 96, 5),
    )

    reactivateReallocateDwellingResponse = property(
        __reactivateReallocateDwellingResponse.value,
        __reactivateReallocateDwellingResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}checkConstructionProjectResponse uses Python identifier checkConstructionProjectResponse
    __checkConstructionProjectResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "checkConstructionProjectResponse"),
        "checkConstructionProjectResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162checkConstructionProjectResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 97, 5),
    )

    checkConstructionProjectResponse = property(
        __checkConstructionProjectResponse.value,
        __checkConstructionProjectResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}checkQuaterlySurveyDeptResponse uses Python identifier checkQuaterlySurveyDeptResponse
    __checkQuaterlySurveyDeptResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "checkQuaterlySurveyDeptResponse"),
        "checkQuaterlySurveyDeptResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162checkQuaterlySurveyDeptResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 98, 5),
    )

    checkQuaterlySurveyDeptResponse = property(
        __checkQuaterlySurveyDeptResponse.value,
        __checkQuaterlySurveyDeptResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}checkBuildingResponse uses Python identifier checkBuildingResponse
    __checkBuildingResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "checkBuildingResponse"),
        "checkBuildingResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162checkBuildingResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 99, 5),
    )

    checkBuildingResponse = property(
        __checkBuildingResponse.value, __checkBuildingResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getConstructionProjectResponse uses Python identifier getConstructionProjectResponse
    __getConstructionProjectResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getConstructionProjectResponse"),
        "getConstructionProjectResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162getConstructionProjectResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 100, 5),
    )

    getConstructionProjectResponse = property(
        __getConstructionProjectResponse.value,
        __getConstructionProjectResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getConstructionSurveyDeptResponse uses Python identifier getConstructionSurveyDeptResponse
    __getConstructionSurveyDeptResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getConstructionSurveyDeptResponse"),
        "getConstructionSurveyDeptResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162getConstructionSurveyDeptResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 101, 5),
    )

    getConstructionSurveyDeptResponse = property(
        __getConstructionSurveyDeptResponse.value,
        __getConstructionSurveyDeptResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getBuildingResponse uses Python identifier getBuildingResponse
    __getBuildingResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getBuildingResponse"),
        "getBuildingResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162getBuildingResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 102, 5),
    )

    getBuildingResponse = property(
        __getBuildingResponse.value, __getBuildingResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getDwellingResponse uses Python identifier getDwellingResponse
    __getDwellingResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getDwellingResponse"),
        "getDwellingResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162getDwellingResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 103, 5),
    )

    getDwellingResponse = property(
        __getDwellingResponse.value, __getDwellingResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getBuildingEntranceByIdResponse uses Python identifier getBuildingEntranceByIdResponse
    __getBuildingEntranceByIdResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getBuildingEntranceByIdResponse"),
        "getBuildingEntranceByIdResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162getBuildingEntranceByIdResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 104, 5),
    )

    getBuildingEntranceByIdResponse = property(
        __getBuildingEntranceByIdResponse.value,
        __getBuildingEntranceByIdResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getBuildingEntranceResponse uses Python identifier getBuildingEntranceResponse
    __getBuildingEntranceResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getBuildingEntranceResponse"),
        "getBuildingEntranceResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162getBuildingEntranceResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 105, 5),
    )

    getBuildingEntranceResponse = property(
        __getBuildingEntranceResponse.value,
        __getBuildingEntranceResponse.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getMutationResponse uses Python identifier getMutationResponse
    __getMutationResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getMutationResponse"),
        "getMutationResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162getMutationResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 106, 5),
    )

    getMutationResponse = property(
        __getMutationResponse.value, __getMutationResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}getStreetResponse uses Python identifier getStreetResponse
    __getStreetResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "getStreetResponse"),
        "getStreetResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162getStreetResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 107, 5),
    )

    getStreetResponse = property(
        __getStreetResponse.value, __getStreetResponse.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}modifyStreetResponse uses Python identifier modifyStreetResponse
    __modifyStreetResponse = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "modifyStreetResponse"),
        "modifyStreetResponse",
        "__httpwww_ech_chxmlnseCH_02162_CTD_ANON__httpwww_ech_chxmlnseCH_02162modifyStreetResponse",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 108, 5),
    )

    modifyStreetResponse = property(
        __modifyStreetResponse.value, __modifyStreetResponse.set, None, None
    )

    _ElementMap.update(
        {
            __deliveryHeader.name(): __deliveryHeader,
            __constructionProjectCompleteResponse.name(): __constructionProjectCompleteResponse,
            __constructionProjectProcessResponse.name(): __constructionProjectProcessResponse,
            __buildingProcessResponse.name(): __buildingProcessResponse,
            __buildingUnusableResponse.name(): __buildingUnusableResponse,
            __buildingCompleteResponse.name(): __buildingCompleteResponse,
            __dwellingProcessResponse.name(): __dwellingProcessResponse,
            __dwellingCompleteResponse.name(): __dwellingCompleteResponse,
            __dwellingUnusableResponse.name(): __dwellingUnusableResponse,
            __quarterlySurveyResponse.name(): __quarterlySurveyResponse,
            __modifyConstructionProjectResponse.name(): __modifyConstructionProjectResponse,
            __bindBuildingToConstructionProjectResponse.name(): __bindBuildingToConstructionProjectResponse,
            __deactivateConstructionProjectResponse.name(): __deactivateConstructionProjectResponse,
            __reactivateConstructionProjectResponse.name(): __reactivateConstructionProjectResponse,
            __modifyConstructionSurveyDeptResponse.name(): __modifyConstructionSurveyDeptResponse,
            __addBuildingResponse.name(): __addBuildingResponse,
            __getBuildingByIdResponse.name(): __getBuildingByIdResponse,
            __reactivateBuildingResponse.name(): __reactivateBuildingResponse,
            __modifyBuildingResponse.name(): __modifyBuildingResponse,
            __deactivateBuildingResponse.name(): __deactivateBuildingResponse,
            __addModifyBuildingEntranceResponse.name(): __addModifyBuildingEntranceResponse,
            __deactivateBuildingEntranceResponse.name(): __deactivateBuildingEntranceResponse,
            __reactivateBuildingEntranceResponse.name(): __reactivateBuildingEntranceResponse,
            __addModifyDwellingResponse.name(): __addModifyDwellingResponse,
            __reactivateReallocateDwellingResponse.name(): __reactivateReallocateDwellingResponse,
            __checkConstructionProjectResponse.name(): __checkConstructionProjectResponse,
            __checkQuaterlySurveyDeptResponse.name(): __checkQuaterlySurveyDeptResponse,
            __checkBuildingResponse.name(): __checkBuildingResponse,
            __getConstructionProjectResponse.name(): __getConstructionProjectResponse,
            __getConstructionSurveyDeptResponse.name(): __getConstructionSurveyDeptResponse,
            __getBuildingResponse.name(): __getBuildingResponse,
            __getDwellingResponse.name(): __getDwellingResponse,
            __getBuildingEntranceByIdResponse.name(): __getBuildingEntranceByIdResponse,
            __getBuildingEntranceResponse.name(): __getBuildingEntranceResponse,
            __getMutationResponse.name(): __getMutationResponse,
            __getStreetResponse.name(): __getStreetResponse,
            __modifyStreetResponse.name(): __modifyStreetResponse,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.CTD_ANON_ = CTD_ANON_


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}plausibilityRuleType with content type ELEMENT_ONLY
class plausibilityRuleType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}plausibilityRuleType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "plausibilityRuleType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 197, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}ruleID uses Python identifier ruleID
    __ruleID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "ruleID"),
        "ruleID",
        "__httpwww_ech_chxmlnseCH_02162_plausibilityRuleType_httpwww_ech_chxmlnseCH_02162ruleID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 199, 3),
    )

    ruleID = property(__ruleID.value, __ruleID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}ruleCategory uses Python identifier ruleCategory
    __ruleCategory = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "ruleCategory"),
        "ruleCategory",
        "__httpwww_ech_chxmlnseCH_02162_plausibilityRuleType_httpwww_ech_chxmlnseCH_02162ruleCategory",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 200, 3),
    )

    ruleCategory = property(__ruleCategory.value, __ruleCategory.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}action uses Python identifier action
    __action = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "action"),
        "action",
        "__httpwww_ech_chxmlnseCH_02162_plausibilityRuleType_httpwww_ech_chxmlnseCH_02162action",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 201, 3),
    )

    action = property(__action.value, __action.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}messageOfError uses Python identifier messageOfError
    __messageOfError = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "messageOfError"),
        "messageOfError",
        "__httpwww_ech_chxmlnseCH_02162_plausibilityRuleType_httpwww_ech_chxmlnseCH_02162messageOfError",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 202, 3),
    )

    messageOfError = property(__messageOfError.value, __messageOfError.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_plausibilityRuleType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 203, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __ruleID.name(): __ruleID,
            __ruleCategory.name(): __ruleCategory,
            __action.name(): __action,
            __messageOfError.name(): __messageOfError,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.plausibilityRuleType = plausibilityRuleType
Namespace.addCategoryObject("typeBinding", "plausibilityRuleType", plausibilityRuleType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}receiptType with content type ELEMENT_ONLY
class receiptType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}receiptType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "receiptType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 206, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}code uses Python identifier code
    __code = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "code"),
        "code",
        "__httpwww_ech_chxmlnseCH_02162_receiptType_httpwww_ech_chxmlnseCH_02162code",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 208, 3),
    )

    code = property(__code.value, __code.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}text uses Python identifier text
    __text = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "text"),
        "text",
        "__httpwww_ech_chxmlnseCH_02162_receiptType_httpwww_ech_chxmlnseCH_02162text",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 209, 3),
    )

    text = property(__text.value, __text.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_receiptType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 210, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {__code.name(): __code, __text.name(): __text, __extension.name(): __extension}
    )
    _AttributeMap.update({})


_module_typeBindings.receiptType = receiptType
Namespace.addCategoryObject("typeBinding", "receiptType", receiptType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}dateIntervalType with content type ELEMENT_ONLY
class dateIntervalType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}dateIntervalType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "dateIntervalType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 213, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dateFrom uses Python identifier dateFrom
    __dateFrom = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dateFrom"),
        "dateFrom",
        "__httpwww_ech_chxmlnseCH_02162_dateIntervalType_httpwww_ech_chxmlnseCH_02162dateFrom",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 215, 3),
    )

    dateFrom = property(__dateFrom.value, __dateFrom.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dateTo uses Python identifier dateTo
    __dateTo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dateTo"),
        "dateTo",
        "__httpwww_ech_chxmlnseCH_02162_dateIntervalType_httpwww_ech_chxmlnseCH_02162dateTo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 216, 3),
    )

    dateTo = property(__dateTo.value, __dateTo.set, None, None)

    _ElementMap.update({__dateFrom.name(): __dateFrom, __dateTo.name(): __dateTo})
    _AttributeMap.update({})


_module_typeBindings.dateIntervalType = dateIntervalType
Namespace.addCategoryObject("typeBinding", "dateIntervalType", dateIntervalType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}streetType with content type ELEMENT_ONLY
class streetType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}streetType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "streetType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 219, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}ESID uses Python identifier ESID
    __ESID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "ESID"),
        "ESID",
        "__httpwww_ech_chxmlnseCH_02162_streetType_httpwww_ech_chxmlnseCH_02162ESID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 221, 3),
    )

    ESID = property(__ESID.value, __ESID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "description"),
        "description",
        "__httpwww_ech_chxmlnseCH_02162_streetType_httpwww_ech_chxmlnseCH_02162description",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 222, 3),
    )

    description = property(__description.value, __description.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}isOfficialDescription uses Python identifier isOfficialDescription
    __isOfficialDescription = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "isOfficialDescription"),
        "isOfficialDescription",
        "__httpwww_ech_chxmlnseCH_02162_streetType_httpwww_ech_chxmlnseCH_02162isOfficialDescription",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 223, 3),
    )

    isOfficialDescription = property(
        __isOfficialDescription.value, __isOfficialDescription.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}streetStatus uses Python identifier streetStatus
    __streetStatus = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "streetStatus"),
        "streetStatus",
        "__httpwww_ech_chxmlnseCH_02162_streetType_httpwww_ech_chxmlnseCH_02162streetStatus",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 224, 3),
    )

    streetStatus = property(__streetStatus.value, __streetStatus.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localisationKind uses Python identifier localisationKind
    __localisationKind = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localisationKind"),
        "localisationKind",
        "__httpwww_ech_chxmlnseCH_02162_streetType_httpwww_ech_chxmlnseCH_02162localisationKind",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 225, 3),
    )

    localisationKind = property(
        __localisationKind.value, __localisationKind.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}streetGeometry uses Python identifier streetGeometry
    __streetGeometry = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "streetGeometry"),
        "streetGeometry",
        "__httpwww_ech_chxmlnseCH_02162_streetType_httpwww_ech_chxmlnseCH_02162streetGeometry",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 226, 3),
    )

    streetGeometry = property(__streetGeometry.value, __streetGeometry.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}officialStreetNumber uses Python identifier officialStreetNumber
    __officialStreetNumber = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "officialStreetNumber"),
        "officialStreetNumber",
        "__httpwww_ech_chxmlnseCH_02162_streetType_httpwww_ech_chxmlnseCH_02162officialStreetNumber",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 227, 3),
    )

    officialStreetNumber = property(
        __officialStreetNumber.value, __officialStreetNumber.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_streetType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 228, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __ESID.name(): __ESID,
            __description.name(): __description,
            __isOfficialDescription.name(): __isOfficialDescription,
            __streetStatus.name(): __streetStatus,
            __localisationKind.name(): __localisationKind,
            __streetGeometry.name(): __streetGeometry,
            __officialStreetNumber.name(): __officialStreetNumber,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.streetType = streetType
Namespace.addCategoryObject("typeBinding", "streetType", streetType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}streetWithoutStreetGeometryType with content type ELEMENT_ONLY
class streetWithoutStreetGeometryType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}streetWithoutStreetGeometryType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "streetWithoutStreetGeometryType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 231, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}ESID uses Python identifier ESID
    __ESID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "ESID"),
        "ESID",
        "__httpwww_ech_chxmlnseCH_02162_streetWithoutStreetGeometryType_httpwww_ech_chxmlnseCH_02162ESID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 233, 3),
    )

    ESID = property(__ESID.value, __ESID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "description"),
        "description",
        "__httpwww_ech_chxmlnseCH_02162_streetWithoutStreetGeometryType_httpwww_ech_chxmlnseCH_02162description",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 234, 3),
    )

    description = property(__description.value, __description.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}isOfficialDescription uses Python identifier isOfficialDescription
    __isOfficialDescription = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "isOfficialDescription"),
        "isOfficialDescription",
        "__httpwww_ech_chxmlnseCH_02162_streetWithoutStreetGeometryType_httpwww_ech_chxmlnseCH_02162isOfficialDescription",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 235, 3),
    )

    isOfficialDescription = property(
        __isOfficialDescription.value, __isOfficialDescription.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}streetStatus uses Python identifier streetStatus
    __streetStatus = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "streetStatus"),
        "streetStatus",
        "__httpwww_ech_chxmlnseCH_02162_streetWithoutStreetGeometryType_httpwww_ech_chxmlnseCH_02162streetStatus",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 236, 3),
    )

    streetStatus = property(__streetStatus.value, __streetStatus.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localisationKind uses Python identifier localisationKind
    __localisationKind = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localisationKind"),
        "localisationKind",
        "__httpwww_ech_chxmlnseCH_02162_streetWithoutStreetGeometryType_httpwww_ech_chxmlnseCH_02162localisationKind",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 237, 3),
    )

    localisationKind = property(
        __localisationKind.value, __localisationKind.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}officialStreetNumber uses Python identifier officialStreetNumber
    __officialStreetNumber = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "officialStreetNumber"),
        "officialStreetNumber",
        "__httpwww_ech_chxmlnseCH_02162_streetWithoutStreetGeometryType_httpwww_ech_chxmlnseCH_02162officialStreetNumber",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 238, 3),
    )

    officialStreetNumber = property(
        __officialStreetNumber.value, __officialStreetNumber.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}locality uses Python identifier locality
    __locality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        "locality",
        "__httpwww_ech_chxmlnseCH_02162_streetWithoutStreetGeometryType_httpwww_ech_chxmlnseCH_02162locality",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 239, 3),
    )

    locality = property(__locality.value, __locality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_streetWithoutStreetGeometryType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 240, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __ESID.name(): __ESID,
            __description.name(): __description,
            __isOfficialDescription.name(): __isOfficialDescription,
            __streetStatus.name(): __streetStatus,
            __localisationKind.name(): __localisationKind,
            __officialStreetNumber.name(): __officialStreetNumber,
            __locality.name(): __locality,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.streetWithoutStreetGeometryType = streetWithoutStreetGeometryType
Namespace.addCategoryObject(
    "typeBinding", "streetWithoutStreetGeometryType", streetWithoutStreetGeometryType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}dwellingType with content type ELEMENT_ONLY
class dwellingType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}dwellingType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "dwellingType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 243, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 245, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EWID uses Python identifier EWID
    __EWID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EWID"),
        "EWID",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162EWID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 246, 3),
    )

    EWID = property(__EWID.value, __EWID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}administrativeDwellingNo uses Python identifier administrativeDwellingNo
    __administrativeDwellingNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "administrativeDwellingNo"),
        "administrativeDwellingNo",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162administrativeDwellingNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 247, 3),
    )

    administrativeDwellingNo = property(
        __administrativeDwellingNo.value, __administrativeDwellingNo.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}physicalDwellingNo uses Python identifier physicalDwellingNo
    __physicalDwellingNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "physicalDwellingNo"),
        "physicalDwellingNo",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162physicalDwellingNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 248, 3),
    )

    physicalDwellingNo = property(
        __physicalDwellingNo.value, __physicalDwellingNo.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}yearOfConstruction uses Python identifier yearOfConstruction
    __yearOfConstruction = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "yearOfConstruction"),
        "yearOfConstruction",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162yearOfConstruction",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 249, 3),
    )

    yearOfConstruction = property(
        __yearOfConstruction.value, __yearOfConstruction.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}yearOfDemolition uses Python identifier yearOfDemolition
    __yearOfDemolition = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "yearOfDemolition"),
        "yearOfDemolition",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162yearOfDemolition",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 250, 3),
    )

    yearOfDemolition = property(
        __yearOfDemolition.value, __yearOfDemolition.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}noOfHabitableRooms uses Python identifier noOfHabitableRooms
    __noOfHabitableRooms = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "noOfHabitableRooms"),
        "noOfHabitableRooms",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162noOfHabitableRooms",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 251, 3),
    )

    noOfHabitableRooms = property(
        __noOfHabitableRooms.value, __noOfHabitableRooms.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}floor uses Python identifier floor
    __floor = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "floor"),
        "floor",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162floor",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 252, 3),
    )

    floor = property(__floor.value, __floor.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}multipleFloor uses Python identifier multipleFloor
    __multipleFloor = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "multipleFloor"),
        "multipleFloor",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162multipleFloor",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 253, 3),
    )

    multipleFloor = property(__multipleFloor.value, __multipleFloor.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}locationOfDwellingOnFloor uses Python identifier locationOfDwellingOnFloor
    __locationOfDwellingOnFloor = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "locationOfDwellingOnFloor"),
        "locationOfDwellingOnFloor",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162locationOfDwellingOnFloor",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 254, 3),
    )

    locationOfDwellingOnFloor = property(
        __locationOfDwellingOnFloor.value, __locationOfDwellingOnFloor.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}usageLimitation uses Python identifier usageLimitation
    __usageLimitation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "usageLimitation"),
        "usageLimitation",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162usageLimitation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 255, 3),
    )

    usageLimitation = property(
        __usageLimitation.value, __usageLimitation.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}kitchen uses Python identifier kitchen
    __kitchen = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "kitchen"),
        "kitchen",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162kitchen",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 256, 3),
    )

    kitchen = property(__kitchen.value, __kitchen.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}surfaceAreaOfDwelling uses Python identifier surfaceAreaOfDwelling
    __surfaceAreaOfDwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfDwelling"),
        "surfaceAreaOfDwelling",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162surfaceAreaOfDwelling",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 257, 3),
    )

    surfaceAreaOfDwelling = property(
        __surfaceAreaOfDwelling.value, __surfaceAreaOfDwelling.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwellingStatus uses Python identifier dwellingStatus
    __dwellingStatus = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwellingStatus"),
        "dwellingStatus",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162dwellingStatus",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 258, 3),
    )

    dwellingStatus = property(__dwellingStatus.value, __dwellingStatus.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwellingUsage uses Python identifier dwellingUsage
    __dwellingUsage = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwellingUsage"),
        "dwellingUsage",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162dwellingUsage",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 259, 3),
    )

    dwellingUsage = property(__dwellingUsage.value, __dwellingUsage.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}realestateIdentification uses Python identifier realestateIdentification
    __realestateIdentification = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        "realestateIdentification",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162realestateIdentification",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 260, 3),
    )

    realestateIdentification = property(
        __realestateIdentification.value, __realestateIdentification.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwellingFreeText1 uses Python identifier dwellingFreeText1
    __dwellingFreeText1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwellingFreeText1"),
        "dwellingFreeText1",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162dwellingFreeText1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 261, 3),
    )

    dwellingFreeText1 = property(
        __dwellingFreeText1.value, __dwellingFreeText1.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwellingFreeText2 uses Python identifier dwellingFreeText2
    __dwellingFreeText2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwellingFreeText2"),
        "dwellingFreeText2",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162dwellingFreeText2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 262, 3),
    )

    dwellingFreeText2 = property(
        __dwellingFreeText2.value, __dwellingFreeText2.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}otherID uses Python identifier otherID
    __otherID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        "otherID",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162otherID",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 263, 3),
    )

    otherID = property(__otherID.value, __otherID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_dwellingType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 264, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __EWID.name(): __EWID,
            __administrativeDwellingNo.name(): __administrativeDwellingNo,
            __physicalDwellingNo.name(): __physicalDwellingNo,
            __yearOfConstruction.name(): __yearOfConstruction,
            __yearOfDemolition.name(): __yearOfDemolition,
            __noOfHabitableRooms.name(): __noOfHabitableRooms,
            __floor.name(): __floor,
            __multipleFloor.name(): __multipleFloor,
            __locationOfDwellingOnFloor.name(): __locationOfDwellingOnFloor,
            __usageLimitation.name(): __usageLimitation,
            __kitchen.name(): __kitchen,
            __surfaceAreaOfDwelling.name(): __surfaceAreaOfDwelling,
            __dwellingStatus.name(): __dwellingStatus,
            __dwellingUsage.name(): __dwellingUsage,
            __realestateIdentification.name(): __realestateIdentification,
            __dwellingFreeText1.name(): __dwellingFreeText1,
            __dwellingFreeText2.name(): __dwellingFreeText2,
            __otherID.name(): __otherID,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.dwellingType = dwellingType
Namespace.addCategoryObject("typeBinding", "dwellingType", dwellingType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}dwellingsListType with content type ELEMENT_ONLY
class dwellingsListType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}dwellingsListType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "dwellingsListType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 267, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_dwellingsListType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 269, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EDID uses Python identifier EDID
    __EDID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        "EDID",
        "__httpwww_ech_chxmlnseCH_02162_dwellingsListType_httpwww_ech_chxmlnseCH_02162EDID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 270, 3),
    )

    EDID = property(__EDID.value, __EDID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EWID uses Python identifier EWID
    __EWID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EWID"),
        "EWID",
        "__httpwww_ech_chxmlnseCH_02162_dwellingsListType_httpwww_ech_chxmlnseCH_02162EWID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 271, 3),
    )

    EWID = property(__EWID.value, __EWID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_dwellingsListType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 272, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __EDID.name(): __EDID,
            __EWID.name(): __EWID,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.dwellingsListType = dwellingsListType
Namespace.addCategoryObject("typeBinding", "dwellingsListType", dwellingsListType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToCompletedDwellingType with content type ELEMENT_ONLY
class setToCompletedDwellingType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToCompletedDwellingType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "setToCompletedDwellingType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 275, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}administrativeDwellingNo uses Python identifier administrativeDwellingNo
    __administrativeDwellingNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "administrativeDwellingNo"),
        "administrativeDwellingNo",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingType_httpwww_ech_chxmlnseCH_02162administrativeDwellingNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 277, 3),
    )

    administrativeDwellingNo = property(
        __administrativeDwellingNo.value, __administrativeDwellingNo.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}physicalDwellingNo uses Python identifier physicalDwellingNo
    __physicalDwellingNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "physicalDwellingNo"),
        "physicalDwellingNo",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingType_httpwww_ech_chxmlnseCH_02162physicalDwellingNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 278, 3),
    )

    physicalDwellingNo = property(
        __physicalDwellingNo.value, __physicalDwellingNo.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}yearOfConstruction uses Python identifier yearOfConstruction
    __yearOfConstruction = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "yearOfConstruction"),
        "yearOfConstruction",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingType_httpwww_ech_chxmlnseCH_02162yearOfConstruction",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 279, 3),
    )

    yearOfConstruction = property(
        __yearOfConstruction.value, __yearOfConstruction.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}noOfHabitableRooms uses Python identifier noOfHabitableRooms
    __noOfHabitableRooms = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "noOfHabitableRooms"),
        "noOfHabitableRooms",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingType_httpwww_ech_chxmlnseCH_02162noOfHabitableRooms",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 280, 3),
    )

    noOfHabitableRooms = property(
        __noOfHabitableRooms.value, __noOfHabitableRooms.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}floor uses Python identifier floor
    __floor = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "floor"),
        "floor",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingType_httpwww_ech_chxmlnseCH_02162floor",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 281, 3),
    )

    floor = property(__floor.value, __floor.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}multipleFloor uses Python identifier multipleFloor
    __multipleFloor = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "multipleFloor"),
        "multipleFloor",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingType_httpwww_ech_chxmlnseCH_02162multipleFloor",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 282, 3),
    )

    multipleFloor = property(__multipleFloor.value, __multipleFloor.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}locationOfDwellingOnFloor uses Python identifier locationOfDwellingOnFloor
    __locationOfDwellingOnFloor = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "locationOfDwellingOnFloor"),
        "locationOfDwellingOnFloor",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingType_httpwww_ech_chxmlnseCH_02162locationOfDwellingOnFloor",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 283, 3),
    )

    locationOfDwellingOnFloor = property(
        __locationOfDwellingOnFloor.value, __locationOfDwellingOnFloor.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}usageLimitation uses Python identifier usageLimitation
    __usageLimitation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "usageLimitation"),
        "usageLimitation",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingType_httpwww_ech_chxmlnseCH_02162usageLimitation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 284, 3),
    )

    usageLimitation = property(
        __usageLimitation.value, __usageLimitation.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}kitchen uses Python identifier kitchen
    __kitchen = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "kitchen"),
        "kitchen",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingType_httpwww_ech_chxmlnseCH_02162kitchen",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 285, 3),
    )

    kitchen = property(__kitchen.value, __kitchen.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}surfaceAreaOfDwelling uses Python identifier surfaceAreaOfDwelling
    __surfaceAreaOfDwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfDwelling"),
        "surfaceAreaOfDwelling",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingType_httpwww_ech_chxmlnseCH_02162surfaceAreaOfDwelling",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 286, 3),
    )

    surfaceAreaOfDwelling = property(
        __surfaceAreaOfDwelling.value, __surfaceAreaOfDwelling.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwellingUsage uses Python identifier dwellingUsage
    __dwellingUsage = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwellingUsage"),
        "dwellingUsage",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingType_httpwww_ech_chxmlnseCH_02162dwellingUsage",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 287, 3),
    )

    dwellingUsage = property(__dwellingUsage.value, __dwellingUsage.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}realestateIdentification uses Python identifier realestateIdentification
    __realestateIdentification = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        "realestateIdentification",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingType_httpwww_ech_chxmlnseCH_02162realestateIdentification",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 288, 3),
    )

    realestateIdentification = property(
        __realestateIdentification.value, __realestateIdentification.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwellingFreeText1 uses Python identifier dwellingFreeText1
    __dwellingFreeText1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwellingFreeText1"),
        "dwellingFreeText1",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingType_httpwww_ech_chxmlnseCH_02162dwellingFreeText1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 289, 3),
    )

    dwellingFreeText1 = property(
        __dwellingFreeText1.value, __dwellingFreeText1.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwellingFreeText2 uses Python identifier dwellingFreeText2
    __dwellingFreeText2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwellingFreeText2"),
        "dwellingFreeText2",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingType_httpwww_ech_chxmlnseCH_02162dwellingFreeText2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 290, 3),
    )

    dwellingFreeText2 = property(
        __dwellingFreeText2.value, __dwellingFreeText2.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}otherID uses Python identifier otherID
    __otherID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        "otherID",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingType_httpwww_ech_chxmlnseCH_02162otherID",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 291, 3),
    )

    otherID = property(__otherID.value, __otherID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 292, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __administrativeDwellingNo.name(): __administrativeDwellingNo,
            __physicalDwellingNo.name(): __physicalDwellingNo,
            __yearOfConstruction.name(): __yearOfConstruction,
            __noOfHabitableRooms.name(): __noOfHabitableRooms,
            __floor.name(): __floor,
            __multipleFloor.name(): __multipleFloor,
            __locationOfDwellingOnFloor.name(): __locationOfDwellingOnFloor,
            __usageLimitation.name(): __usageLimitation,
            __kitchen.name(): __kitchen,
            __surfaceAreaOfDwelling.name(): __surfaceAreaOfDwelling,
            __dwellingUsage.name(): __dwellingUsage,
            __realestateIdentification.name(): __realestateIdentification,
            __dwellingFreeText1.name(): __dwellingFreeText1,
            __dwellingFreeText2.name(): __dwellingFreeText2,
            __otherID.name(): __otherID,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.setToCompletedDwellingType = setToCompletedDwellingType
Namespace.addCategoryObject(
    "typeBinding", "setToCompletedDwellingType", setToCompletedDwellingType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntranceWithDwellingType with content type ELEMENT_ONLY
class buildingEntranceWithDwellingType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntranceWithDwellingType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "buildingEntranceWithDwellingType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 295, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 297, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EDID uses Python identifier EDID
    __EDID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        "EDID",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162EDID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 298, 3),
    )

    EDID = property(__EDID.value, __EDID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGAID uses Python identifier EGAID
    __EGAID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGAID"),
        "EGAID",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162EGAID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 299, 3),
    )

    EGAID = property(__EGAID.value, __EGAID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntranceNo uses Python identifier buildingEntranceNo
    __buildingEntranceNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntranceNo"),
        "buildingEntranceNo",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162buildingEntranceNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 300, 3),
    )

    buildingEntranceNo = property(
        __buildingEntranceNo.value, __buildingEntranceNo.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "coordinates"),
        "coordinates",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162coordinates",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 301, 3),
    )

    coordinates = property(__coordinates.value, __coordinates.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}isOfficialAddress uses Python identifier isOfficialAddress
    __isOfficialAddress = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "isOfficialAddress"),
        "isOfficialAddress",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162isOfficialAddress",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 302, 3),
    )

    isOfficialAddress = property(
        __isOfficialAddress.value, __isOfficialAddress.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}street uses Python identifier street
    __street = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "street"),
        "street",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162street",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 303, 3),
    )

    street = property(__street.value, __street.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}locality uses Python identifier locality
    __locality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        "locality",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162locality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 304, 3),
    )

    locality = property(__locality.value, __locality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}otherID uses Python identifier otherID
    __otherID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        "otherID",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162otherID",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 305, 3),
    )

    otherID = property(__otherID.value, __otherID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 306, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwelling uses Python identifier dwelling
    __dwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwelling"),
        "dwelling",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162dwelling",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 307, 3),
    )

    dwelling = property(__dwelling.value, __dwelling.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __EDID.name(): __EDID,
            __EGAID.name(): __EGAID,
            __buildingEntranceNo.name(): __buildingEntranceNo,
            __coordinates.name(): __coordinates,
            __isOfficialAddress.name(): __isOfficialAddress,
            __street.name(): __street,
            __locality.name(): __locality,
            __otherID.name(): __otherID,
            __extension.name(): __extension,
            __dwelling.name(): __dwelling,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.buildingEntranceWithDwellingType = buildingEntranceWithDwellingType
Namespace.addCategoryObject(
    "typeBinding", "buildingEntranceWithDwellingType", buildingEntranceWithDwellingType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntranceType with content type ELEMENT_ONLY
class buildingEntranceType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntranceType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "buildingEntranceType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 310, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 312, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EDID uses Python identifier EDID
    __EDID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        "EDID",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceType_httpwww_ech_chxmlnseCH_02162EDID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 313, 3),
    )

    EDID = property(__EDID.value, __EDID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGAID uses Python identifier EGAID
    __EGAID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGAID"),
        "EGAID",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceType_httpwww_ech_chxmlnseCH_02162EGAID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 314, 3),
    )

    EGAID = property(__EGAID.value, __EGAID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntranceNo uses Python identifier buildingEntranceNo
    __buildingEntranceNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntranceNo"),
        "buildingEntranceNo",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceType_httpwww_ech_chxmlnseCH_02162buildingEntranceNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 315, 3),
    )

    buildingEntranceNo = property(
        __buildingEntranceNo.value, __buildingEntranceNo.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "coordinates"),
        "coordinates",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceType_httpwww_ech_chxmlnseCH_02162coordinates",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 316, 3),
    )

    coordinates = property(__coordinates.value, __coordinates.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}isOfficialAddress uses Python identifier isOfficialAddress
    __isOfficialAddress = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "isOfficialAddress"),
        "isOfficialAddress",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceType_httpwww_ech_chxmlnseCH_02162isOfficialAddress",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 317, 3),
    )

    isOfficialAddress = property(
        __isOfficialAddress.value, __isOfficialAddress.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}street uses Python identifier street
    __street = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "street"),
        "street",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceType_httpwww_ech_chxmlnseCH_02162street",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 318, 3),
    )

    street = property(__street.value, __street.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}locality uses Python identifier locality
    __locality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        "locality",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceType_httpwww_ech_chxmlnseCH_02162locality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 319, 3),
    )

    locality = property(__locality.value, __locality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}otherID uses Python identifier otherID
    __otherID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        "otherID",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceType_httpwww_ech_chxmlnseCH_02162otherID",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 320, 3),
    )

    otherID = property(__otherID.value, __otherID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntranceType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 321, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __EDID.name(): __EDID,
            __EGAID.name(): __EGAID,
            __buildingEntranceNo.name(): __buildingEntranceNo,
            __coordinates.name(): __coordinates,
            __isOfficialAddress.name(): __isOfficialAddress,
            __street.name(): __street,
            __locality.name(): __locality,
            __otherID.name(): __otherID,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.buildingEntranceType = buildingEntranceType
Namespace.addCategoryObject("typeBinding", "buildingEntranceType", buildingEntranceType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntrancesListType with content type ELEMENT_ONLY
class buildingEntrancesListType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntrancesListType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "buildingEntrancesListType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 324, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntrancesListType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 326, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntrance uses Python identifier buildingEntrance
    __buildingEntrance = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrance"),
        "buildingEntrance",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntrancesListType_httpwww_ech_chxmlnseCH_02162buildingEntrance",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 327, 3),
    )

    buildingEntrance = property(
        __buildingEntrance.value, __buildingEntrance.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_buildingEntrancesListType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 328, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __buildingEntrance.name(): __buildingEntrance,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.buildingEntrancesListType = buildingEntrancesListType
Namespace.addCategoryObject(
    "typeBinding", "buildingEntrancesListType", buildingEntrancesListType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingWithEntranceWithDwellingType with content type ELEMENT_ONLY
class buildingWithEntranceWithDwellingType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingWithEntranceWithDwellingType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "buildingWithEntranceWithDwellingType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 331, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 333, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}municipality uses Python identifier municipality
    __municipality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        "municipality",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162municipality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 334, 3),
    )

    municipality = property(__municipality.value, __municipality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}officialBuildingNo uses Python identifier officialBuildingNo
    __officialBuildingNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo"),
        "officialBuildingNo",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162officialBuildingNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 335, 3),
    )

    officialBuildingNo = property(
        __officialBuildingNo.value, __officialBuildingNo.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}nameOfBuilding uses Python identifier nameOfBuilding
    __nameOfBuilding = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "nameOfBuilding"),
        "nameOfBuilding",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162nameOfBuilding",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 336, 3),
    )

    nameOfBuilding = property(__nameOfBuilding.value, __nameOfBuilding.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "coordinates"),
        "coordinates",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162coordinates",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 337, 3),
    )

    coordinates = property(__coordinates.value, __coordinates.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}realestateIdentification uses Python identifier realestateIdentification
    __realestateIdentification = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        "realestateIdentification",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162realestateIdentification",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 338, 3),
    )

    realestateIdentification = property(
        __realestateIdentification.value, __realestateIdentification.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localCode1 uses Python identifier localCode1
    __localCode1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localCode1"),
        "localCode1",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162localCode1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 339, 3),
    )

    localCode1 = property(__localCode1.value, __localCode1.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localCode2 uses Python identifier localCode2
    __localCode2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localCode2"),
        "localCode2",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162localCode2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 340, 3),
    )

    localCode2 = property(__localCode2.value, __localCode2.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localCode3 uses Python identifier localCode3
    __localCode3 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localCode3"),
        "localCode3",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162localCode3",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 341, 3),
    )

    localCode3 = property(__localCode3.value, __localCode3.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localCode4 uses Python identifier localCode4
    __localCode4 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localCode4"),
        "localCode4",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162localCode4",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 342, 3),
    )

    localCode4 = property(__localCode4.value, __localCode4.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}neighbourhood uses Python identifier neighbourhood
    __neighbourhood = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "neighbourhood"),
        "neighbourhood",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162neighbourhood",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 343, 3),
    )

    neighbourhood = property(__neighbourhood.value, __neighbourhood.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingStatus uses Python identifier buildingStatus
    __buildingStatus = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingStatus"),
        "buildingStatus",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162buildingStatus",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 344, 3),
    )

    buildingStatus = property(__buildingStatus.value, __buildingStatus.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingCategory uses Python identifier buildingCategory
    __buildingCategory = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingCategory"),
        "buildingCategory",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162buildingCategory",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 345, 3),
    )

    buildingCategory = property(
        __buildingCategory.value, __buildingCategory.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingClass uses Python identifier buildingClass
    __buildingClass = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingClass"),
        "buildingClass",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162buildingClass",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 346, 3),
    )

    buildingClass = property(__buildingClass.value, __buildingClass.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dateOfConstruction uses Python identifier dateOfConstruction
    __dateOfConstruction = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction"),
        "dateOfConstruction",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162dateOfConstruction",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 347, 3),
    )

    dateOfConstruction = property(
        __dateOfConstruction.value, __dateOfConstruction.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}yearOfDemolition uses Python identifier yearOfDemolition
    __yearOfDemolition = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "yearOfDemolition"),
        "yearOfDemolition",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162yearOfDemolition",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 348, 3),
    )

    yearOfDemolition = property(
        __yearOfDemolition.value, __yearOfDemolition.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}surfaceAreaOfBuilding uses Python identifier surfaceAreaOfBuilding
    __surfaceAreaOfBuilding = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfBuilding"),
        "surfaceAreaOfBuilding",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162surfaceAreaOfBuilding",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 349, 3),
    )

    surfaceAreaOfBuilding = property(
        __surfaceAreaOfBuilding.value, __surfaceAreaOfBuilding.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}volume uses Python identifier volume
    __volume = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "volume"),
        "volume",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162volume",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 350, 3),
    )

    volume = property(__volume.value, __volume.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}numberOfFloors uses Python identifier numberOfFloors
    __numberOfFloors = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "numberOfFloors"),
        "numberOfFloors",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162numberOfFloors",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 351, 3),
    )

    numberOfFloors = property(__numberOfFloors.value, __numberOfFloors.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}numberOfSeparateHabitableRooms uses Python identifier numberOfSeparateHabitableRooms
    __numberOfSeparateHabitableRooms = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "numberOfSeparateHabitableRooms"),
        "numberOfSeparateHabitableRooms",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162numberOfSeparateHabitableRooms",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 352, 3),
    )

    numberOfSeparateHabitableRooms = property(
        __numberOfSeparateHabitableRooms.value,
        __numberOfSeparateHabitableRooms.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}civilDefenseShelter uses Python identifier civilDefenseShelter
    __civilDefenseShelter = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "civilDefenseShelter"),
        "civilDefenseShelter",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162civilDefenseShelter",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 353, 3),
    )

    civilDefenseShelter = property(
        __civilDefenseShelter.value, __civilDefenseShelter.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}energyRelevantSurface uses Python identifier energyRelevantSurface
    __energyRelevantSurface = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "energyRelevantSurface"),
        "energyRelevantSurface",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162energyRelevantSurface",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 354, 3),
    )

    energyRelevantSurface = property(
        __energyRelevantSurface.value, __energyRelevantSurface.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermotechnicalDeviceForHeating1 uses Python identifier thermotechnicalDeviceForHeating1
    __thermotechnicalDeviceForHeating1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating1"),
        "thermotechnicalDeviceForHeating1",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162thermotechnicalDeviceForHeating1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 355, 3),
    )

    thermotechnicalDeviceForHeating1 = property(
        __thermotechnicalDeviceForHeating1.value,
        __thermotechnicalDeviceForHeating1.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermotechnicalDeviceForHeating2 uses Python identifier thermotechnicalDeviceForHeating2
    __thermotechnicalDeviceForHeating2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating2"),
        "thermotechnicalDeviceForHeating2",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162thermotechnicalDeviceForHeating2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 356, 3),
    )

    thermotechnicalDeviceForHeating2 = property(
        __thermotechnicalDeviceForHeating2.value,
        __thermotechnicalDeviceForHeating2.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermotechnicalDeviceForWarmWater1 uses Python identifier thermotechnicalDeviceForWarmWater1
    __thermotechnicalDeviceForWarmWater1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater1"),
        "thermotechnicalDeviceForWarmWater1",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162thermotechnicalDeviceForWarmWater1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 357, 3),
    )

    thermotechnicalDeviceForWarmWater1 = property(
        __thermotechnicalDeviceForWarmWater1.value,
        __thermotechnicalDeviceForWarmWater1.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermotechnicalDeviceForWarmWater2 uses Python identifier thermotechnicalDeviceForWarmWater2
    __thermotechnicalDeviceForWarmWater2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater2"),
        "thermotechnicalDeviceForWarmWater2",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162thermotechnicalDeviceForWarmWater2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 358, 3),
    )

    thermotechnicalDeviceForWarmWater2 = property(
        __thermotechnicalDeviceForWarmWater2.value,
        __thermotechnicalDeviceForWarmWater2.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingFreeText1 uses Python identifier buildingFreeText1
    __buildingFreeText1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingFreeText1"),
        "buildingFreeText1",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162buildingFreeText1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 359, 3),
    )

    buildingFreeText1 = property(
        __buildingFreeText1.value, __buildingFreeText1.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingFreeText2 uses Python identifier buildingFreeText2
    __buildingFreeText2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingFreeText2"),
        "buildingFreeText2",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162buildingFreeText2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 360, 3),
    )

    buildingFreeText2 = property(
        __buildingFreeText2.value, __buildingFreeText2.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}otherID uses Python identifier otherID
    __otherID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        "otherID",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162otherID",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 361, 3),
    )

    otherID = property(__otherID.value, __otherID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 362, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntrance uses Python identifier buildingEntrance
    __buildingEntrance = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrance"),
        "buildingEntrance",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceWithDwellingType_httpwww_ech_chxmlnseCH_02162buildingEntrance",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 363, 3),
    )

    buildingEntrance = property(
        __buildingEntrance.value, __buildingEntrance.set, None, None
    )

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __municipality.name(): __municipality,
            __officialBuildingNo.name(): __officialBuildingNo,
            __nameOfBuilding.name(): __nameOfBuilding,
            __coordinates.name(): __coordinates,
            __realestateIdentification.name(): __realestateIdentification,
            __localCode1.name(): __localCode1,
            __localCode2.name(): __localCode2,
            __localCode3.name(): __localCode3,
            __localCode4.name(): __localCode4,
            __neighbourhood.name(): __neighbourhood,
            __buildingStatus.name(): __buildingStatus,
            __buildingCategory.name(): __buildingCategory,
            __buildingClass.name(): __buildingClass,
            __dateOfConstruction.name(): __dateOfConstruction,
            __yearOfDemolition.name(): __yearOfDemolition,
            __surfaceAreaOfBuilding.name(): __surfaceAreaOfBuilding,
            __volume.name(): __volume,
            __numberOfFloors.name(): __numberOfFloors,
            __numberOfSeparateHabitableRooms.name(): __numberOfSeparateHabitableRooms,
            __civilDefenseShelter.name(): __civilDefenseShelter,
            __energyRelevantSurface.name(): __energyRelevantSurface,
            __thermotechnicalDeviceForHeating1.name(): __thermotechnicalDeviceForHeating1,
            __thermotechnicalDeviceForHeating2.name(): __thermotechnicalDeviceForHeating2,
            __thermotechnicalDeviceForWarmWater1.name(): __thermotechnicalDeviceForWarmWater1,
            __thermotechnicalDeviceForWarmWater2.name(): __thermotechnicalDeviceForWarmWater2,
            __buildingFreeText1.name(): __buildingFreeText1,
            __buildingFreeText2.name(): __buildingFreeText2,
            __otherID.name(): __otherID,
            __extension.name(): __extension,
            __buildingEntrance.name(): __buildingEntrance,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.buildingWithEntranceWithDwellingType = (
    buildingWithEntranceWithDwellingType
)
Namespace.addCategoryObject(
    "typeBinding",
    "buildingWithEntranceWithDwellingType",
    buildingWithEntranceWithDwellingType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingWithEntranceType with content type ELEMENT_ONLY
class buildingWithEntranceType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingWithEntranceType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "buildingWithEntranceType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 366, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 368, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}municipality uses Python identifier municipality
    __municipality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        "municipality",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162municipality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 369, 3),
    )

    municipality = property(__municipality.value, __municipality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}officialBuildingNo uses Python identifier officialBuildingNo
    __officialBuildingNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo"),
        "officialBuildingNo",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162officialBuildingNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 370, 3),
    )

    officialBuildingNo = property(
        __officialBuildingNo.value, __officialBuildingNo.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}nameOfBuilding uses Python identifier nameOfBuilding
    __nameOfBuilding = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "nameOfBuilding"),
        "nameOfBuilding",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162nameOfBuilding",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 371, 3),
    )

    nameOfBuilding = property(__nameOfBuilding.value, __nameOfBuilding.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "coordinates"),
        "coordinates",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162coordinates",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 372, 3),
    )

    coordinates = property(__coordinates.value, __coordinates.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}realestateIdentification uses Python identifier realestateIdentification
    __realestateIdentification = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        "realestateIdentification",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162realestateIdentification",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 373, 3),
    )

    realestateIdentification = property(
        __realestateIdentification.value, __realestateIdentification.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localCode1 uses Python identifier localCode1
    __localCode1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localCode1"),
        "localCode1",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162localCode1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 374, 3),
    )

    localCode1 = property(__localCode1.value, __localCode1.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localCode2 uses Python identifier localCode2
    __localCode2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localCode2"),
        "localCode2",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162localCode2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 375, 3),
    )

    localCode2 = property(__localCode2.value, __localCode2.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localCode3 uses Python identifier localCode3
    __localCode3 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localCode3"),
        "localCode3",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162localCode3",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 376, 3),
    )

    localCode3 = property(__localCode3.value, __localCode3.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localCode4 uses Python identifier localCode4
    __localCode4 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localCode4"),
        "localCode4",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162localCode4",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 377, 3),
    )

    localCode4 = property(__localCode4.value, __localCode4.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}neighbourhood uses Python identifier neighbourhood
    __neighbourhood = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "neighbourhood"),
        "neighbourhood",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162neighbourhood",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 378, 3),
    )

    neighbourhood = property(__neighbourhood.value, __neighbourhood.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingStatus uses Python identifier buildingStatus
    __buildingStatus = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingStatus"),
        "buildingStatus",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162buildingStatus",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 379, 3),
    )

    buildingStatus = property(__buildingStatus.value, __buildingStatus.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingCategory uses Python identifier buildingCategory
    __buildingCategory = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingCategory"),
        "buildingCategory",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162buildingCategory",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 380, 3),
    )

    buildingCategory = property(
        __buildingCategory.value, __buildingCategory.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingClass uses Python identifier buildingClass
    __buildingClass = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingClass"),
        "buildingClass",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162buildingClass",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 381, 3),
    )

    buildingClass = property(__buildingClass.value, __buildingClass.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dateOfConstruction uses Python identifier dateOfConstruction
    __dateOfConstruction = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction"),
        "dateOfConstruction",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162dateOfConstruction",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 382, 3),
    )

    dateOfConstruction = property(
        __dateOfConstruction.value, __dateOfConstruction.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}yearOfDemolition uses Python identifier yearOfDemolition
    __yearOfDemolition = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "yearOfDemolition"),
        "yearOfDemolition",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162yearOfDemolition",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 383, 3),
    )

    yearOfDemolition = property(
        __yearOfDemolition.value, __yearOfDemolition.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}surfaceAreaOfBuilding uses Python identifier surfaceAreaOfBuilding
    __surfaceAreaOfBuilding = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfBuilding"),
        "surfaceAreaOfBuilding",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162surfaceAreaOfBuilding",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 384, 3),
    )

    surfaceAreaOfBuilding = property(
        __surfaceAreaOfBuilding.value, __surfaceAreaOfBuilding.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}volume uses Python identifier volume
    __volume = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "volume"),
        "volume",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162volume",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 385, 3),
    )

    volume = property(__volume.value, __volume.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}numberOfFloors uses Python identifier numberOfFloors
    __numberOfFloors = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "numberOfFloors"),
        "numberOfFloors",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162numberOfFloors",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 386, 3),
    )

    numberOfFloors = property(__numberOfFloors.value, __numberOfFloors.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}numberOfSeparateHabitableRooms uses Python identifier numberOfSeparateHabitableRooms
    __numberOfSeparateHabitableRooms = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "numberOfSeparateHabitableRooms"),
        "numberOfSeparateHabitableRooms",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162numberOfSeparateHabitableRooms",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 387, 3),
    )

    numberOfSeparateHabitableRooms = property(
        __numberOfSeparateHabitableRooms.value,
        __numberOfSeparateHabitableRooms.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}civilDefenseShelter uses Python identifier civilDefenseShelter
    __civilDefenseShelter = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "civilDefenseShelter"),
        "civilDefenseShelter",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162civilDefenseShelter",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 388, 3),
    )

    civilDefenseShelter = property(
        __civilDefenseShelter.value, __civilDefenseShelter.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}energyRelevantSurface uses Python identifier energyRelevantSurface
    __energyRelevantSurface = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "energyRelevantSurface"),
        "energyRelevantSurface",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162energyRelevantSurface",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 389, 3),
    )

    energyRelevantSurface = property(
        __energyRelevantSurface.value, __energyRelevantSurface.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermotechnicalDeviceForHeating1 uses Python identifier thermotechnicalDeviceForHeating1
    __thermotechnicalDeviceForHeating1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating1"),
        "thermotechnicalDeviceForHeating1",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162thermotechnicalDeviceForHeating1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 390, 3),
    )

    thermotechnicalDeviceForHeating1 = property(
        __thermotechnicalDeviceForHeating1.value,
        __thermotechnicalDeviceForHeating1.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermotechnicalDeviceForHeating2 uses Python identifier thermotechnicalDeviceForHeating2
    __thermotechnicalDeviceForHeating2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating2"),
        "thermotechnicalDeviceForHeating2",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162thermotechnicalDeviceForHeating2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 391, 3),
    )

    thermotechnicalDeviceForHeating2 = property(
        __thermotechnicalDeviceForHeating2.value,
        __thermotechnicalDeviceForHeating2.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermotechnicalDeviceForWarmWater1 uses Python identifier thermotechnicalDeviceForWarmWater1
    __thermotechnicalDeviceForWarmWater1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater1"),
        "thermotechnicalDeviceForWarmWater1",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162thermotechnicalDeviceForWarmWater1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 392, 3),
    )

    thermotechnicalDeviceForWarmWater1 = property(
        __thermotechnicalDeviceForWarmWater1.value,
        __thermotechnicalDeviceForWarmWater1.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermotechnicalDeviceForWarmWater2 uses Python identifier thermotechnicalDeviceForWarmWater2
    __thermotechnicalDeviceForWarmWater2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater2"),
        "thermotechnicalDeviceForWarmWater2",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162thermotechnicalDeviceForWarmWater2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 393, 3),
    )

    thermotechnicalDeviceForWarmWater2 = property(
        __thermotechnicalDeviceForWarmWater2.value,
        __thermotechnicalDeviceForWarmWater2.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingFreeText1 uses Python identifier buildingFreeText1
    __buildingFreeText1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingFreeText1"),
        "buildingFreeText1",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162buildingFreeText1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 394, 3),
    )

    buildingFreeText1 = property(
        __buildingFreeText1.value, __buildingFreeText1.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingFreeText2 uses Python identifier buildingFreeText2
    __buildingFreeText2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingFreeText2"),
        "buildingFreeText2",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162buildingFreeText2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 395, 3),
    )

    buildingFreeText2 = property(
        __buildingFreeText2.value, __buildingFreeText2.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}otherID uses Python identifier otherID
    __otherID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        "otherID",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162otherID",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 396, 3),
    )

    otherID = property(__otherID.value, __otherID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 397, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntrance uses Python identifier buildingEntrance
    __buildingEntrance = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrance"),
        "buildingEntrance",
        "__httpwww_ech_chxmlnseCH_02162_buildingWithEntranceType_httpwww_ech_chxmlnseCH_02162buildingEntrance",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 398, 3),
    )

    buildingEntrance = property(
        __buildingEntrance.value, __buildingEntrance.set, None, None
    )

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __municipality.name(): __municipality,
            __officialBuildingNo.name(): __officialBuildingNo,
            __nameOfBuilding.name(): __nameOfBuilding,
            __coordinates.name(): __coordinates,
            __realestateIdentification.name(): __realestateIdentification,
            __localCode1.name(): __localCode1,
            __localCode2.name(): __localCode2,
            __localCode3.name(): __localCode3,
            __localCode4.name(): __localCode4,
            __neighbourhood.name(): __neighbourhood,
            __buildingStatus.name(): __buildingStatus,
            __buildingCategory.name(): __buildingCategory,
            __buildingClass.name(): __buildingClass,
            __dateOfConstruction.name(): __dateOfConstruction,
            __yearOfDemolition.name(): __yearOfDemolition,
            __surfaceAreaOfBuilding.name(): __surfaceAreaOfBuilding,
            __volume.name(): __volume,
            __numberOfFloors.name(): __numberOfFloors,
            __numberOfSeparateHabitableRooms.name(): __numberOfSeparateHabitableRooms,
            __civilDefenseShelter.name(): __civilDefenseShelter,
            __energyRelevantSurface.name(): __energyRelevantSurface,
            __thermotechnicalDeviceForHeating1.name(): __thermotechnicalDeviceForHeating1,
            __thermotechnicalDeviceForHeating2.name(): __thermotechnicalDeviceForHeating2,
            __thermotechnicalDeviceForWarmWater1.name(): __thermotechnicalDeviceForWarmWater1,
            __thermotechnicalDeviceForWarmWater2.name(): __thermotechnicalDeviceForWarmWater2,
            __buildingFreeText1.name(): __buildingFreeText1,
            __buildingFreeText2.name(): __buildingFreeText2,
            __otherID.name(): __otherID,
            __extension.name(): __extension,
            __buildingEntrance.name(): __buildingEntrance,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.buildingWithEntranceType = buildingWithEntranceType
Namespace.addCategoryObject(
    "typeBinding", "buildingWithEntranceType", buildingWithEntranceType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingType with content type ELEMENT_ONLY
class buildingType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "buildingType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 401, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 403, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}municipality uses Python identifier municipality
    __municipality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        "municipality",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162municipality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 404, 3),
    )

    municipality = property(__municipality.value, __municipality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}officialBuildingNo uses Python identifier officialBuildingNo
    __officialBuildingNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo"),
        "officialBuildingNo",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162officialBuildingNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 405, 3),
    )

    officialBuildingNo = property(
        __officialBuildingNo.value, __officialBuildingNo.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}nameOfBuilding uses Python identifier nameOfBuilding
    __nameOfBuilding = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "nameOfBuilding"),
        "nameOfBuilding",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162nameOfBuilding",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 406, 3),
    )

    nameOfBuilding = property(__nameOfBuilding.value, __nameOfBuilding.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "coordinates"),
        "coordinates",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162coordinates",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 407, 3),
    )

    coordinates = property(__coordinates.value, __coordinates.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}realestateIdentification uses Python identifier realestateIdentification
    __realestateIdentification = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        "realestateIdentification",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162realestateIdentification",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 408, 3),
    )

    realestateIdentification = property(
        __realestateIdentification.value, __realestateIdentification.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localCode1 uses Python identifier localCode1
    __localCode1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localCode1"),
        "localCode1",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162localCode1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 409, 3),
    )

    localCode1 = property(__localCode1.value, __localCode1.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localCode2 uses Python identifier localCode2
    __localCode2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localCode2"),
        "localCode2",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162localCode2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 410, 3),
    )

    localCode2 = property(__localCode2.value, __localCode2.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localCode3 uses Python identifier localCode3
    __localCode3 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localCode3"),
        "localCode3",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162localCode3",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 411, 3),
    )

    localCode3 = property(__localCode3.value, __localCode3.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localCode4 uses Python identifier localCode4
    __localCode4 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localCode4"),
        "localCode4",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162localCode4",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 412, 3),
    )

    localCode4 = property(__localCode4.value, __localCode4.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}neighbourhood uses Python identifier neighbourhood
    __neighbourhood = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "neighbourhood"),
        "neighbourhood",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162neighbourhood",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 413, 3),
    )

    neighbourhood = property(__neighbourhood.value, __neighbourhood.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingStatus uses Python identifier buildingStatus
    __buildingStatus = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingStatus"),
        "buildingStatus",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162buildingStatus",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 414, 3),
    )

    buildingStatus = property(__buildingStatus.value, __buildingStatus.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingCategory uses Python identifier buildingCategory
    __buildingCategory = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingCategory"),
        "buildingCategory",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162buildingCategory",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 415, 3),
    )

    buildingCategory = property(
        __buildingCategory.value, __buildingCategory.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingClass uses Python identifier buildingClass
    __buildingClass = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingClass"),
        "buildingClass",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162buildingClass",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 416, 3),
    )

    buildingClass = property(__buildingClass.value, __buildingClass.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dateOfConstruction uses Python identifier dateOfConstruction
    __dateOfConstruction = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction"),
        "dateOfConstruction",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162dateOfConstruction",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 417, 3),
    )

    dateOfConstruction = property(
        __dateOfConstruction.value, __dateOfConstruction.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}yearOfDemolition uses Python identifier yearOfDemolition
    __yearOfDemolition = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "yearOfDemolition"),
        "yearOfDemolition",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162yearOfDemolition",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 418, 3),
    )

    yearOfDemolition = property(
        __yearOfDemolition.value, __yearOfDemolition.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}surfaceAreaOfBuilding uses Python identifier surfaceAreaOfBuilding
    __surfaceAreaOfBuilding = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfBuilding"),
        "surfaceAreaOfBuilding",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162surfaceAreaOfBuilding",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 419, 3),
    )

    surfaceAreaOfBuilding = property(
        __surfaceAreaOfBuilding.value, __surfaceAreaOfBuilding.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}volume uses Python identifier volume
    __volume = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "volume"),
        "volume",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162volume",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 420, 3),
    )

    volume = property(__volume.value, __volume.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}numberOfFloors uses Python identifier numberOfFloors
    __numberOfFloors = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "numberOfFloors"),
        "numberOfFloors",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162numberOfFloors",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 421, 3),
    )

    numberOfFloors = property(__numberOfFloors.value, __numberOfFloors.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}numberOfSeparateHabitableRooms uses Python identifier numberOfSeparateHabitableRooms
    __numberOfSeparateHabitableRooms = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "numberOfSeparateHabitableRooms"),
        "numberOfSeparateHabitableRooms",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162numberOfSeparateHabitableRooms",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 422, 3),
    )

    numberOfSeparateHabitableRooms = property(
        __numberOfSeparateHabitableRooms.value,
        __numberOfSeparateHabitableRooms.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}civilDefenseShelter uses Python identifier civilDefenseShelter
    __civilDefenseShelter = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "civilDefenseShelter"),
        "civilDefenseShelter",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162civilDefenseShelter",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 423, 3),
    )

    civilDefenseShelter = property(
        __civilDefenseShelter.value, __civilDefenseShelter.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}energyRelevantSurface uses Python identifier energyRelevantSurface
    __energyRelevantSurface = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "energyRelevantSurface"),
        "energyRelevantSurface",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162energyRelevantSurface",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 424, 3),
    )

    energyRelevantSurface = property(
        __energyRelevantSurface.value, __energyRelevantSurface.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermotechnicalDeviceForHeating1 uses Python identifier thermotechnicalDeviceForHeating1
    __thermotechnicalDeviceForHeating1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating1"),
        "thermotechnicalDeviceForHeating1",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162thermotechnicalDeviceForHeating1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 425, 3),
    )

    thermotechnicalDeviceForHeating1 = property(
        __thermotechnicalDeviceForHeating1.value,
        __thermotechnicalDeviceForHeating1.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermotechnicalDeviceForHeating2 uses Python identifier thermotechnicalDeviceForHeating2
    __thermotechnicalDeviceForHeating2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating2"),
        "thermotechnicalDeviceForHeating2",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162thermotechnicalDeviceForHeating2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 426, 3),
    )

    thermotechnicalDeviceForHeating2 = property(
        __thermotechnicalDeviceForHeating2.value,
        __thermotechnicalDeviceForHeating2.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermotechnicalDeviceForWarmWater1 uses Python identifier thermotechnicalDeviceForWarmWater1
    __thermotechnicalDeviceForWarmWater1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater1"),
        "thermotechnicalDeviceForWarmWater1",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162thermotechnicalDeviceForWarmWater1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 427, 3),
    )

    thermotechnicalDeviceForWarmWater1 = property(
        __thermotechnicalDeviceForWarmWater1.value,
        __thermotechnicalDeviceForWarmWater1.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermotechnicalDeviceForWarmWater2 uses Python identifier thermotechnicalDeviceForWarmWater2
    __thermotechnicalDeviceForWarmWater2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater2"),
        "thermotechnicalDeviceForWarmWater2",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162thermotechnicalDeviceForWarmWater2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 428, 3),
    )

    thermotechnicalDeviceForWarmWater2 = property(
        __thermotechnicalDeviceForWarmWater2.value,
        __thermotechnicalDeviceForWarmWater2.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingFreeText1 uses Python identifier buildingFreeText1
    __buildingFreeText1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingFreeText1"),
        "buildingFreeText1",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162buildingFreeText1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 429, 3),
    )

    buildingFreeText1 = property(
        __buildingFreeText1.value, __buildingFreeText1.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingFreeText2 uses Python identifier buildingFreeText2
    __buildingFreeText2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingFreeText2"),
        "buildingFreeText2",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162buildingFreeText2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 430, 3),
    )

    buildingFreeText2 = property(
        __buildingFreeText2.value, __buildingFreeText2.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}otherID uses Python identifier otherID
    __otherID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        "otherID",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162otherID",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 431, 3),
    )

    otherID = property(__otherID.value, __otherID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_buildingType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 432, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __municipality.name(): __municipality,
            __officialBuildingNo.name(): __officialBuildingNo,
            __nameOfBuilding.name(): __nameOfBuilding,
            __coordinates.name(): __coordinates,
            __realestateIdentification.name(): __realestateIdentification,
            __localCode1.name(): __localCode1,
            __localCode2.name(): __localCode2,
            __localCode3.name(): __localCode3,
            __localCode4.name(): __localCode4,
            __neighbourhood.name(): __neighbourhood,
            __buildingStatus.name(): __buildingStatus,
            __buildingCategory.name(): __buildingCategory,
            __buildingClass.name(): __buildingClass,
            __dateOfConstruction.name(): __dateOfConstruction,
            __yearOfDemolition.name(): __yearOfDemolition,
            __surfaceAreaOfBuilding.name(): __surfaceAreaOfBuilding,
            __volume.name(): __volume,
            __numberOfFloors.name(): __numberOfFloors,
            __numberOfSeparateHabitableRooms.name(): __numberOfSeparateHabitableRooms,
            __civilDefenseShelter.name(): __civilDefenseShelter,
            __energyRelevantSurface.name(): __energyRelevantSurface,
            __thermotechnicalDeviceForHeating1.name(): __thermotechnicalDeviceForHeating1,
            __thermotechnicalDeviceForHeating2.name(): __thermotechnicalDeviceForHeating2,
            __thermotechnicalDeviceForWarmWater1.name(): __thermotechnicalDeviceForWarmWater1,
            __thermotechnicalDeviceForWarmWater2.name(): __thermotechnicalDeviceForWarmWater2,
            __buildingFreeText1.name(): __buildingFreeText1,
            __buildingFreeText2.name(): __buildingFreeText2,
            __otherID.name(): __otherID,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.buildingType = buildingType
Namespace.addCategoryObject("typeBinding", "buildingType", buildingType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingsListType with content type ELEMENT_ONLY
class buildingsListType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingsListType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "buildingsListType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 435, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_buildingsListType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 437, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}realestateIdentification uses Python identifier realestateIdentification
    __realestateIdentification = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        "realestateIdentification",
        "__httpwww_ech_chxmlnseCH_02162_buildingsListType_httpwww_ech_chxmlnseCH_02162realestateIdentification",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 438, 3),
    )

    realestateIdentification = property(
        __realestateIdentification.value, __realestateIdentification.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}officialBuildingNo uses Python identifier officialBuildingNo
    __officialBuildingNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo"),
        "officialBuildingNo",
        "__httpwww_ech_chxmlnseCH_02162_buildingsListType_httpwww_ech_chxmlnseCH_02162officialBuildingNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 439, 3),
    )

    officialBuildingNo = property(
        __officialBuildingNo.value, __officialBuildingNo.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dateOfConstruction uses Python identifier dateOfConstruction
    __dateOfConstruction = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction"),
        "dateOfConstruction",
        "__httpwww_ech_chxmlnseCH_02162_buildingsListType_httpwww_ech_chxmlnseCH_02162dateOfConstruction",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 440, 3),
    )

    dateOfConstruction = property(
        __dateOfConstruction.value, __dateOfConstruction.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntrance uses Python identifier buildingEntrance
    __buildingEntrance = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrance"),
        "buildingEntrance",
        "__httpwww_ech_chxmlnseCH_02162_buildingsListType_httpwww_ech_chxmlnseCH_02162buildingEntrance",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 441, 3),
    )

    buildingEntrance = property(
        __buildingEntrance.value, __buildingEntrance.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_buildingsListType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 442, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __realestateIdentification.name(): __realestateIdentification,
            __officialBuildingNo.name(): __officialBuildingNo,
            __dateOfConstruction.name(): __dateOfConstruction,
            __buildingEntrance.name(): __buildingEntrance,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.buildingsListType = buildingsListType
Namespace.addCategoryObject("typeBinding", "buildingsListType", buildingsListType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToCompletedBuildingType with content type ELEMENT_ONLY
class setToCompletedBuildingType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToCompletedBuildingType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "setToCompletedBuildingType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 445, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}municipality uses Python identifier municipality
    __municipality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        "municipality",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162municipality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 447, 3),
    )

    municipality = property(__municipality.value, __municipality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}officialBuildingNo uses Python identifier officialBuildingNo
    __officialBuildingNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo"),
        "officialBuildingNo",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162officialBuildingNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 448, 3),
    )

    officialBuildingNo = property(
        __officialBuildingNo.value, __officialBuildingNo.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}nameOfBuilding uses Python identifier nameOfBuilding
    __nameOfBuilding = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "nameOfBuilding"),
        "nameOfBuilding",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162nameOfBuilding",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 449, 3),
    )

    nameOfBuilding = property(__nameOfBuilding.value, __nameOfBuilding.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "coordinates"),
        "coordinates",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162coordinates",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 450, 3),
    )

    coordinates = property(__coordinates.value, __coordinates.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}realestateIdentification uses Python identifier realestateIdentification
    __realestateIdentification = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        "realestateIdentification",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162realestateIdentification",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 451, 3),
    )

    realestateIdentification = property(
        __realestateIdentification.value, __realestateIdentification.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localCode1 uses Python identifier localCode1
    __localCode1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localCode1"),
        "localCode1",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162localCode1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 452, 3),
    )

    localCode1 = property(__localCode1.value, __localCode1.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localCode2 uses Python identifier localCode2
    __localCode2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localCode2"),
        "localCode2",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162localCode2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 453, 3),
    )

    localCode2 = property(__localCode2.value, __localCode2.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localCode3 uses Python identifier localCode3
    __localCode3 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localCode3"),
        "localCode3",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162localCode3",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 454, 3),
    )

    localCode3 = property(__localCode3.value, __localCode3.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localCode4 uses Python identifier localCode4
    __localCode4 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localCode4"),
        "localCode4",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162localCode4",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 455, 3),
    )

    localCode4 = property(__localCode4.value, __localCode4.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}neighbourhood uses Python identifier neighbourhood
    __neighbourhood = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "neighbourhood"),
        "neighbourhood",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162neighbourhood",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 456, 3),
    )

    neighbourhood = property(__neighbourhood.value, __neighbourhood.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingCategory uses Python identifier buildingCategory
    __buildingCategory = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingCategory"),
        "buildingCategory",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162buildingCategory",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 457, 3),
    )

    buildingCategory = property(
        __buildingCategory.value, __buildingCategory.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingClass uses Python identifier buildingClass
    __buildingClass = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingClass"),
        "buildingClass",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162buildingClass",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 458, 3),
    )

    buildingClass = property(__buildingClass.value, __buildingClass.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dateOfConstruction uses Python identifier dateOfConstruction
    __dateOfConstruction = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction"),
        "dateOfConstruction",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162dateOfConstruction",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 459, 3),
    )

    dateOfConstruction = property(
        __dateOfConstruction.value, __dateOfConstruction.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}surfaceAreaOfBuilding uses Python identifier surfaceAreaOfBuilding
    __surfaceAreaOfBuilding = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfBuilding"),
        "surfaceAreaOfBuilding",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162surfaceAreaOfBuilding",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 460, 3),
    )

    surfaceAreaOfBuilding = property(
        __surfaceAreaOfBuilding.value, __surfaceAreaOfBuilding.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}volume uses Python identifier volume
    __volume = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "volume"),
        "volume",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162volume",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 461, 3),
    )

    volume = property(__volume.value, __volume.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}numberOfFloors uses Python identifier numberOfFloors
    __numberOfFloors = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "numberOfFloors"),
        "numberOfFloors",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162numberOfFloors",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 462, 3),
    )

    numberOfFloors = property(__numberOfFloors.value, __numberOfFloors.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}numberOfSeparateHabitableRooms uses Python identifier numberOfSeparateHabitableRooms
    __numberOfSeparateHabitableRooms = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "numberOfSeparateHabitableRooms"),
        "numberOfSeparateHabitableRooms",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162numberOfSeparateHabitableRooms",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 463, 3),
    )

    numberOfSeparateHabitableRooms = property(
        __numberOfSeparateHabitableRooms.value,
        __numberOfSeparateHabitableRooms.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}civilDefenseShelter uses Python identifier civilDefenseShelter
    __civilDefenseShelter = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "civilDefenseShelter"),
        "civilDefenseShelter",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162civilDefenseShelter",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 464, 3),
    )

    civilDefenseShelter = property(
        __civilDefenseShelter.value, __civilDefenseShelter.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}energyRelevantSurface uses Python identifier energyRelevantSurface
    __energyRelevantSurface = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "energyRelevantSurface"),
        "energyRelevantSurface",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162energyRelevantSurface",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 465, 3),
    )

    energyRelevantSurface = property(
        __energyRelevantSurface.value, __energyRelevantSurface.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermotechnicalDeviceForHeating1 uses Python identifier thermotechnicalDeviceForHeating1
    __thermotechnicalDeviceForHeating1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating1"),
        "thermotechnicalDeviceForHeating1",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162thermotechnicalDeviceForHeating1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 466, 3),
    )

    thermotechnicalDeviceForHeating1 = property(
        __thermotechnicalDeviceForHeating1.value,
        __thermotechnicalDeviceForHeating1.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermotechnicalDeviceForHeating2 uses Python identifier thermotechnicalDeviceForHeating2
    __thermotechnicalDeviceForHeating2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating2"),
        "thermotechnicalDeviceForHeating2",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162thermotechnicalDeviceForHeating2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 467, 3),
    )

    thermotechnicalDeviceForHeating2 = property(
        __thermotechnicalDeviceForHeating2.value,
        __thermotechnicalDeviceForHeating2.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermotechnicalDeviceForWarmWater1 uses Python identifier thermotechnicalDeviceForWarmWater1
    __thermotechnicalDeviceForWarmWater1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater1"),
        "thermotechnicalDeviceForWarmWater1",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162thermotechnicalDeviceForWarmWater1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 468, 3),
    )

    thermotechnicalDeviceForWarmWater1 = property(
        __thermotechnicalDeviceForWarmWater1.value,
        __thermotechnicalDeviceForWarmWater1.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermotechnicalDeviceForWarmWater2 uses Python identifier thermotechnicalDeviceForWarmWater2
    __thermotechnicalDeviceForWarmWater2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater2"),
        "thermotechnicalDeviceForWarmWater2",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162thermotechnicalDeviceForWarmWater2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 469, 3),
    )

    thermotechnicalDeviceForWarmWater2 = property(
        __thermotechnicalDeviceForWarmWater2.value,
        __thermotechnicalDeviceForWarmWater2.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingFreeText1 uses Python identifier buildingFreeText1
    __buildingFreeText1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingFreeText1"),
        "buildingFreeText1",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162buildingFreeText1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 470, 3),
    )

    buildingFreeText1 = property(
        __buildingFreeText1.value, __buildingFreeText1.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingFreeText2 uses Python identifier buildingFreeText2
    __buildingFreeText2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingFreeText2"),
        "buildingFreeText2",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162buildingFreeText2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 471, 3),
    )

    buildingFreeText2 = property(
        __buildingFreeText2.value, __buildingFreeText2.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}otherID uses Python identifier otherID
    __otherID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        "otherID",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162otherID",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 472, 3),
    )

    otherID = property(__otherID.value, __otherID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 473, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __municipality.name(): __municipality,
            __officialBuildingNo.name(): __officialBuildingNo,
            __nameOfBuilding.name(): __nameOfBuilding,
            __coordinates.name(): __coordinates,
            __realestateIdentification.name(): __realestateIdentification,
            __localCode1.name(): __localCode1,
            __localCode2.name(): __localCode2,
            __localCode3.name(): __localCode3,
            __localCode4.name(): __localCode4,
            __neighbourhood.name(): __neighbourhood,
            __buildingCategory.name(): __buildingCategory,
            __buildingClass.name(): __buildingClass,
            __dateOfConstruction.name(): __dateOfConstruction,
            __surfaceAreaOfBuilding.name(): __surfaceAreaOfBuilding,
            __volume.name(): __volume,
            __numberOfFloors.name(): __numberOfFloors,
            __numberOfSeparateHabitableRooms.name(): __numberOfSeparateHabitableRooms,
            __civilDefenseShelter.name(): __civilDefenseShelter,
            __energyRelevantSurface.name(): __energyRelevantSurface,
            __thermotechnicalDeviceForHeating1.name(): __thermotechnicalDeviceForHeating1,
            __thermotechnicalDeviceForHeating2.name(): __thermotechnicalDeviceForHeating2,
            __thermotechnicalDeviceForWarmWater1.name(): __thermotechnicalDeviceForWarmWater1,
            __thermotechnicalDeviceForWarmWater2.name(): __thermotechnicalDeviceForWarmWater2,
            __buildingFreeText1.name(): __buildingFreeText1,
            __buildingFreeText2.name(): __buildingFreeText2,
            __otherID.name(): __otherID,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.setToCompletedBuildingType = setToCompletedBuildingType
Namespace.addCategoryObject(
    "typeBinding", "setToCompletedBuildingType", setToCompletedBuildingType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}kindOfConstructionWorkWithBuildingType with content type ELEMENT_ONLY
class kindOfConstructionWorkWithBuildingType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}kindOfConstructionWorkWithBuildingType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "kindOfConstructionWorkWithBuildingType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 476, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}kindOfWork uses Python identifier kindOfWork
    __kindOfWork = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "kindOfWork"),
        "kindOfWork",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkWithBuildingType_httpwww_ech_chxmlnseCH_02162kindOfWork",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 478, 3),
    )

    kindOfWork = property(__kindOfWork.value, __kindOfWork.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}ARBID uses Python identifier ARBID
    __ARBID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "ARBID"),
        "ARBID",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkWithBuildingType_httpwww_ech_chxmlnseCH_02162ARBID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 479, 3),
    )

    ARBID = property(__ARBID.value, __ARBID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}energeticRestauration uses Python identifier energeticRestauration
    __energeticRestauration = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "energeticRestauration"),
        "energeticRestauration",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkWithBuildingType_httpwww_ech_chxmlnseCH_02162energeticRestauration",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 480, 3),
    )

    energeticRestauration = property(
        __energeticRestauration.value, __energeticRestauration.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}renovationHeatingsystem uses Python identifier renovationHeatingsystem
    __renovationHeatingsystem = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "renovationHeatingsystem"),
        "renovationHeatingsystem",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkWithBuildingType_httpwww_ech_chxmlnseCH_02162renovationHeatingsystem",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 481, 3),
    )

    renovationHeatingsystem = property(
        __renovationHeatingsystem.value, __renovationHeatingsystem.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}innerConversionRenovation uses Python identifier innerConversionRenovation
    __innerConversionRenovation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "innerConversionRenovation"),
        "innerConversionRenovation",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkWithBuildingType_httpwww_ech_chxmlnseCH_02162innerConversionRenovation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 482, 3),
    )

    innerConversionRenovation = property(
        __innerConversionRenovation.value, __innerConversionRenovation.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}conversion uses Python identifier conversion
    __conversion = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "conversion"),
        "conversion",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkWithBuildingType_httpwww_ech_chxmlnseCH_02162conversion",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 483, 3),
    )

    conversion = property(__conversion.value, __conversion.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extensionHeighteningHeated uses Python identifier extensionHeighteningHeated
    __extensionHeighteningHeated = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningHeated"),
        "extensionHeighteningHeated",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkWithBuildingType_httpwww_ech_chxmlnseCH_02162extensionHeighteningHeated",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 484, 3),
    )

    extensionHeighteningHeated = property(
        __extensionHeighteningHeated.value, __extensionHeighteningHeated.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extensionHeighteningNotHeated uses Python identifier extensionHeighteningNotHeated
    __extensionHeighteningNotHeated = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningNotHeated"),
        "extensionHeighteningNotHeated",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkWithBuildingType_httpwww_ech_chxmlnseCH_02162extensionHeighteningNotHeated",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 485, 3),
    )

    extensionHeighteningNotHeated = property(
        __extensionHeighteningNotHeated.value,
        __extensionHeighteningNotHeated.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermicSolarFacility uses Python identifier thermicSolarFacility
    __thermicSolarFacility = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermicSolarFacility"),
        "thermicSolarFacility",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkWithBuildingType_httpwww_ech_chxmlnseCH_02162thermicSolarFacility",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 486, 3),
    )

    thermicSolarFacility = property(
        __thermicSolarFacility.value, __thermicSolarFacility.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}photovoltaicSolarFacility uses Python identifier photovoltaicSolarFacility
    __photovoltaicSolarFacility = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "photovoltaicSolarFacility"),
        "photovoltaicSolarFacility",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkWithBuildingType_httpwww_ech_chxmlnseCH_02162photovoltaicSolarFacility",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 487, 3),
    )

    photovoltaicSolarFacility = property(
        __photovoltaicSolarFacility.value, __photovoltaicSolarFacility.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}otherWorks uses Python identifier otherWorks
    __otherWorks = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "otherWorks"),
        "otherWorks",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkWithBuildingType_httpwww_ech_chxmlnseCH_02162otherWorks",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 488, 3),
    )

    otherWorks = property(__otherWorks.value, __otherWorks.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkWithBuildingType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 489, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}building uses Python identifier building
    __building = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "building"),
        "building",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkWithBuildingType_httpwww_ech_chxmlnseCH_02162building",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 490, 3),
    )

    building = property(__building.value, __building.set, None, None)

    _ElementMap.update(
        {
            __kindOfWork.name(): __kindOfWork,
            __ARBID.name(): __ARBID,
            __energeticRestauration.name(): __energeticRestauration,
            __renovationHeatingsystem.name(): __renovationHeatingsystem,
            __innerConversionRenovation.name(): __innerConversionRenovation,
            __conversion.name(): __conversion,
            __extensionHeighteningHeated.name(): __extensionHeighteningHeated,
            __extensionHeighteningNotHeated.name(): __extensionHeighteningNotHeated,
            __thermicSolarFacility.name(): __thermicSolarFacility,
            __photovoltaicSolarFacility.name(): __photovoltaicSolarFacility,
            __otherWorks.name(): __otherWorks,
            __extension.name(): __extension,
            __building.name(): __building,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.kindOfConstructionWorkWithBuildingType = (
    kindOfConstructionWorkWithBuildingType
)
Namespace.addCategoryObject(
    "typeBinding",
    "kindOfConstructionWorkWithBuildingType",
    kindOfConstructionWorkWithBuildingType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}kindOfConstructionWorkType with content type ELEMENT_ONLY
class kindOfConstructionWorkType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}kindOfConstructionWorkType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "kindOfConstructionWorkType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 493, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}kindOfWork uses Python identifier kindOfWork
    __kindOfWork = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "kindOfWork"),
        "kindOfWork",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkType_httpwww_ech_chxmlnseCH_02162kindOfWork",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 495, 3),
    )

    kindOfWork = property(__kindOfWork.value, __kindOfWork.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}ARBID uses Python identifier ARBID
    __ARBID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "ARBID"),
        "ARBID",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkType_httpwww_ech_chxmlnseCH_02162ARBID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 496, 3),
    )

    ARBID = property(__ARBID.value, __ARBID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}energeticRestauration uses Python identifier energeticRestauration
    __energeticRestauration = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "energeticRestauration"),
        "energeticRestauration",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkType_httpwww_ech_chxmlnseCH_02162energeticRestauration",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 497, 3),
    )

    energeticRestauration = property(
        __energeticRestauration.value, __energeticRestauration.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}renovationHeatingsystem uses Python identifier renovationHeatingsystem
    __renovationHeatingsystem = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "renovationHeatingsystem"),
        "renovationHeatingsystem",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkType_httpwww_ech_chxmlnseCH_02162renovationHeatingsystem",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 498, 3),
    )

    renovationHeatingsystem = property(
        __renovationHeatingsystem.value, __renovationHeatingsystem.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}innerConversionRenovation uses Python identifier innerConversionRenovation
    __innerConversionRenovation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "innerConversionRenovation"),
        "innerConversionRenovation",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkType_httpwww_ech_chxmlnseCH_02162innerConversionRenovation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 499, 3),
    )

    innerConversionRenovation = property(
        __innerConversionRenovation.value, __innerConversionRenovation.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}conversion uses Python identifier conversion
    __conversion = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "conversion"),
        "conversion",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkType_httpwww_ech_chxmlnseCH_02162conversion",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 500, 3),
    )

    conversion = property(__conversion.value, __conversion.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extensionHeighteningHeated uses Python identifier extensionHeighteningHeated
    __extensionHeighteningHeated = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningHeated"),
        "extensionHeighteningHeated",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkType_httpwww_ech_chxmlnseCH_02162extensionHeighteningHeated",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 501, 3),
    )

    extensionHeighteningHeated = property(
        __extensionHeighteningHeated.value, __extensionHeighteningHeated.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extensionHeighteningNotHeated uses Python identifier extensionHeighteningNotHeated
    __extensionHeighteningNotHeated = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningNotHeated"),
        "extensionHeighteningNotHeated",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkType_httpwww_ech_chxmlnseCH_02162extensionHeighteningNotHeated",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 502, 3),
    )

    extensionHeighteningNotHeated = property(
        __extensionHeighteningNotHeated.value,
        __extensionHeighteningNotHeated.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermicSolarFacility uses Python identifier thermicSolarFacility
    __thermicSolarFacility = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermicSolarFacility"),
        "thermicSolarFacility",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkType_httpwww_ech_chxmlnseCH_02162thermicSolarFacility",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 503, 3),
    )

    thermicSolarFacility = property(
        __thermicSolarFacility.value, __thermicSolarFacility.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}photovoltaicSolarFacility uses Python identifier photovoltaicSolarFacility
    __photovoltaicSolarFacility = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "photovoltaicSolarFacility"),
        "photovoltaicSolarFacility",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkType_httpwww_ech_chxmlnseCH_02162photovoltaicSolarFacility",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 504, 3),
    )

    photovoltaicSolarFacility = property(
        __photovoltaicSolarFacility.value, __photovoltaicSolarFacility.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}otherWorks uses Python identifier otherWorks
    __otherWorks = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "otherWorks"),
        "otherWorks",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkType_httpwww_ech_chxmlnseCH_02162otherWorks",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 505, 3),
    )

    otherWorks = property(__otherWorks.value, __otherWorks.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_kindOfConstructionWorkType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 506, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __kindOfWork.name(): __kindOfWork,
            __ARBID.name(): __ARBID,
            __energeticRestauration.name(): __energeticRestauration,
            __renovationHeatingsystem.name(): __renovationHeatingsystem,
            __innerConversionRenovation.name(): __innerConversionRenovation,
            __conversion.name(): __conversion,
            __extensionHeighteningHeated.name(): __extensionHeighteningHeated,
            __extensionHeighteningNotHeated.name(): __extensionHeighteningNotHeated,
            __thermicSolarFacility.name(): __thermicSolarFacility,
            __photovoltaicSolarFacility.name(): __photovoltaicSolarFacility,
            __otherWorks.name(): __otherWorks,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.kindOfConstructionWorkType = kindOfConstructionWorkType
Namespace.addCategoryObject(
    "typeBinding", "kindOfConstructionWorkType", kindOfConstructionWorkType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectWithBuildingType with content type ELEMENT_ONLY
class constructionProjectWithBuildingType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectWithBuildingType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "constructionProjectWithBuildingType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 509, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EPROID uses Python identifier EPROID
    __EPROID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        "EPROID",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162EPROID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 511, 3),
    )

    EPROID = property(__EPROID.value, __EPROID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}officialConstructionProjectFileNo uses Python identifier officialConstructionProjectFileNo
    __officialConstructionProjectFileNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "officialConstructionProjectFileNo"),
        "officialConstructionProjectFileNo",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162officialConstructionProjectFileNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 512, 3),
    )

    officialConstructionProjectFileNo = property(
        __officialConstructionProjectFileNo.value,
        __officialConstructionProjectFileNo.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extensionOfOfficialConstructionProjectFileNo uses Python identifier extensionOfOfficialConstructionProjectFileNo
    __extensionOfOfficialConstructionProjectFileNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "extensionOfOfficialConstructionProjectFileNo"
        ),
        "extensionOfOfficialConstructionProjectFileNo",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162extensionOfOfficialConstructionProjectFileNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 513, 3),
    )

    extensionOfOfficialConstructionProjectFileNo = property(
        __extensionOfOfficialConstructionProjectFileNo.value,
        __extensionOfOfficialConstructionProjectFileNo.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionSurveyDept uses Python identifier constructionSurveyDept
    __constructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        "constructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162constructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 514, 3),
    )

    constructionSurveyDept = property(
        __constructionSurveyDept.value, __constructionSurveyDept.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectDescription uses Python identifier constructionProjectDescription
    __constructionProjectDescription = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionProjectDescription"),
        "constructionProjectDescription",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162constructionProjectDescription",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 515, 3),
    )

    constructionProjectDescription = property(
        __constructionProjectDescription.value,
        __constructionProjectDescription.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionLocalisation uses Python identifier constructionLocalisation
    __constructionLocalisation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionLocalisation"),
        "constructionLocalisation",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162constructionLocalisation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 516, 3),
    )

    constructionLocalisation = property(
        __constructionLocalisation.value, __constructionLocalisation.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}realestateIdentification uses Python identifier realestateIdentification
    __realestateIdentification = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        "realestateIdentification",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162realestateIdentification",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 517, 3),
    )

    realestateIdentification = property(
        __realestateIdentification.value, __realestateIdentification.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}typeOfPermit uses Python identifier typeOfPermit
    __typeOfPermit = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "typeOfPermit"),
        "typeOfPermit",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162typeOfPermit",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 518, 3),
    )

    typeOfPermit = property(__typeOfPermit.value, __typeOfPermit.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}typeOfClient uses Python identifier typeOfClient
    __typeOfClient = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "typeOfClient"),
        "typeOfClient",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162typeOfClient",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 519, 3),
    )

    typeOfClient = property(__typeOfClient.value, __typeOfClient.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}client uses Python identifier client
    __client = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "client"),
        "client",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162client",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 520, 3),
    )

    client = property(__client.value, __client.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}typeOfConstructionProject uses Python identifier typeOfConstructionProject
    __typeOfConstructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "typeOfConstructionProject"),
        "typeOfConstructionProject",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162typeOfConstructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 521, 3),
    )

    typeOfConstructionProject = property(
        __typeOfConstructionProject.value, __typeOfConstructionProject.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}typeOfConstruction uses Python identifier typeOfConstruction
    __typeOfConstruction = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "typeOfConstruction"),
        "typeOfConstruction",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162typeOfConstruction",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 522, 3),
    )

    typeOfConstruction = property(
        __typeOfConstruction.value, __typeOfConstruction.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}totalCostsOfProject uses Python identifier totalCostsOfProject
    __totalCostsOfProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "totalCostsOfProject"),
        "totalCostsOfProject",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162totalCostsOfProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 523, 3),
    )

    totalCostsOfProject = property(
        __totalCostsOfProject.value, __totalCostsOfProject.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectAnnouncementDate uses Python identifier projectAnnouncementDate
    __projectAnnouncementDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectAnnouncementDate"),
        "projectAnnouncementDate",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162projectAnnouncementDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 524, 3),
    )

    projectAnnouncementDate = property(
        __projectAnnouncementDate.value, __projectAnnouncementDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingPermitIssueDate uses Python identifier buildingPermitIssueDate
    __buildingPermitIssueDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingPermitIssueDate"),
        "buildingPermitIssueDate",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162buildingPermitIssueDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 525, 3),
    )

    buildingPermitIssueDate = property(
        __buildingPermitIssueDate.value, __buildingPermitIssueDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectStartDate uses Python identifier projectStartDate
    __projectStartDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectStartDate"),
        "projectStartDate",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162projectStartDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 526, 3),
    )

    projectStartDate = property(
        __projectStartDate.value, __projectStartDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectCompletionDate uses Python identifier projectCompletionDate
    __projectCompletionDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectCompletionDate"),
        "projectCompletionDate",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162projectCompletionDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 527, 3),
    )

    projectCompletionDate = property(
        __projectCompletionDate.value, __projectCompletionDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectSuspensionDate uses Python identifier projectSuspensionDate
    __projectSuspensionDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectSuspensionDate"),
        "projectSuspensionDate",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162projectSuspensionDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 528, 3),
    )

    projectSuspensionDate = property(
        __projectSuspensionDate.value, __projectSuspensionDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionAuthorisationDeniedDate uses Python identifier constructionAuthorisationDeniedDate
    __constructionAuthorisationDeniedDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionAuthorisationDeniedDate"),
        "constructionAuthorisationDeniedDate",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162constructionAuthorisationDeniedDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 529, 3),
    )

    constructionAuthorisationDeniedDate = property(
        __constructionAuthorisationDeniedDate.value,
        __constructionAuthorisationDeniedDate.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}withdrawalDate uses Python identifier withdrawalDate
    __withdrawalDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "withdrawalDate"),
        "withdrawalDate",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162withdrawalDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 530, 3),
    )

    withdrawalDate = property(__withdrawalDate.value, __withdrawalDate.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}cancellationDate uses Python identifier cancellationDate
    __cancellationDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "cancellationDate"),
        "cancellationDate",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162cancellationDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 531, 3),
    )

    cancellationDate = property(
        __cancellationDate.value, __cancellationDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}durationOfConstructionPhase uses Python identifier durationOfConstructionPhase
    __durationOfConstructionPhase = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "durationOfConstructionPhase"),
        "durationOfConstructionPhase",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162durationOfConstructionPhase",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 532, 3),
    )

    durationOfConstructionPhase = property(
        __durationOfConstructionPhase.value,
        __durationOfConstructionPhase.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectFreeText1 uses Python identifier projectFreeText1
    __projectFreeText1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectFreeText1"),
        "projectFreeText1",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162projectFreeText1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 533, 3),
    )

    projectFreeText1 = property(
        __projectFreeText1.value, __projectFreeText1.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectFreeText2 uses Python identifier projectFreeText2
    __projectFreeText2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectFreeText2"),
        "projectFreeText2",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162projectFreeText2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 534, 3),
    )

    projectFreeText2 = property(
        __projectFreeText2.value, __projectFreeText2.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 535, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingProjectLink uses Python identifier buildingProjectLink
    __buildingProjectLink = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingProjectLink"),
        "buildingProjectLink",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162buildingProjectLink",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 536, 3),
    )

    buildingProjectLink = property(
        __buildingProjectLink.value, __buildingProjectLink.set, None, None
    )

    _ElementMap.update(
        {
            __EPROID.name(): __EPROID,
            __officialConstructionProjectFileNo.name(): __officialConstructionProjectFileNo,
            __extensionOfOfficialConstructionProjectFileNo.name(): __extensionOfOfficialConstructionProjectFileNo,
            __constructionSurveyDept.name(): __constructionSurveyDept,
            __constructionProjectDescription.name(): __constructionProjectDescription,
            __constructionLocalisation.name(): __constructionLocalisation,
            __realestateIdentification.name(): __realestateIdentification,
            __typeOfPermit.name(): __typeOfPermit,
            __typeOfClient.name(): __typeOfClient,
            __client.name(): __client,
            __typeOfConstructionProject.name(): __typeOfConstructionProject,
            __typeOfConstruction.name(): __typeOfConstruction,
            __totalCostsOfProject.name(): __totalCostsOfProject,
            __projectAnnouncementDate.name(): __projectAnnouncementDate,
            __buildingPermitIssueDate.name(): __buildingPermitIssueDate,
            __projectStartDate.name(): __projectStartDate,
            __projectCompletionDate.name(): __projectCompletionDate,
            __projectSuspensionDate.name(): __projectSuspensionDate,
            __constructionAuthorisationDeniedDate.name(): __constructionAuthorisationDeniedDate,
            __withdrawalDate.name(): __withdrawalDate,
            __cancellationDate.name(): __cancellationDate,
            __durationOfConstructionPhase.name(): __durationOfConstructionPhase,
            __projectFreeText1.name(): __projectFreeText1,
            __projectFreeText2.name(): __projectFreeText2,
            __extension.name(): __extension,
            __buildingProjectLink.name(): __buildingProjectLink,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.constructionProjectWithBuildingType = (
    constructionProjectWithBuildingType
)
Namespace.addCategoryObject(
    "typeBinding",
    "constructionProjectWithBuildingType",
    constructionProjectWithBuildingType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addConstructionProjectWithBuildingType with content type ELEMENT_ONLY
class addConstructionProjectWithBuildingType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addConstructionProjectWithBuildingType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "addConstructionProjectWithBuildingType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 539, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EPROID uses Python identifier EPROID
    __EPROID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        "EPROID",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162EPROID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 541, 3),
    )

    EPROID = property(__EPROID.value, __EPROID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}officialConstructionProjectFileNo uses Python identifier officialConstructionProjectFileNo
    __officialConstructionProjectFileNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "officialConstructionProjectFileNo"),
        "officialConstructionProjectFileNo",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162officialConstructionProjectFileNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 542, 3),
    )

    officialConstructionProjectFileNo = property(
        __officialConstructionProjectFileNo.value,
        __officialConstructionProjectFileNo.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extensionOfOfficialConstructionProjectFileNo uses Python identifier extensionOfOfficialConstructionProjectFileNo
    __extensionOfOfficialConstructionProjectFileNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "extensionOfOfficialConstructionProjectFileNo"
        ),
        "extensionOfOfficialConstructionProjectFileNo",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162extensionOfOfficialConstructionProjectFileNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 543, 3),
    )

    extensionOfOfficialConstructionProjectFileNo = property(
        __extensionOfOfficialConstructionProjectFileNo.value,
        __extensionOfOfficialConstructionProjectFileNo.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionSurveyDept uses Python identifier constructionSurveyDept
    __constructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        "constructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162constructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 544, 3),
    )

    constructionSurveyDept = property(
        __constructionSurveyDept.value, __constructionSurveyDept.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectDescription uses Python identifier constructionProjectDescription
    __constructionProjectDescription = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionProjectDescription"),
        "constructionProjectDescription",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162constructionProjectDescription",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 545, 3),
    )

    constructionProjectDescription = property(
        __constructionProjectDescription.value,
        __constructionProjectDescription.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionLocalisation uses Python identifier constructionLocalisation
    __constructionLocalisation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionLocalisation"),
        "constructionLocalisation",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162constructionLocalisation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 546, 3),
    )

    constructionLocalisation = property(
        __constructionLocalisation.value, __constructionLocalisation.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}realestateIdentification uses Python identifier realestateIdentification
    __realestateIdentification = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        "realestateIdentification",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162realestateIdentification",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 547, 3),
    )

    realestateIdentification = property(
        __realestateIdentification.value, __realestateIdentification.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}typeOfPermit uses Python identifier typeOfPermit
    __typeOfPermit = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "typeOfPermit"),
        "typeOfPermit",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162typeOfPermit",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 548, 3),
    )

    typeOfPermit = property(__typeOfPermit.value, __typeOfPermit.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}typeOfClient uses Python identifier typeOfClient
    __typeOfClient = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "typeOfClient"),
        "typeOfClient",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162typeOfClient",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 549, 3),
    )

    typeOfClient = property(__typeOfClient.value, __typeOfClient.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}client uses Python identifier client
    __client = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "client"),
        "client",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162client",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 550, 3),
    )

    client = property(__client.value, __client.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}typeOfConstructionProject uses Python identifier typeOfConstructionProject
    __typeOfConstructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "typeOfConstructionProject"),
        "typeOfConstructionProject",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162typeOfConstructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 551, 3),
    )

    typeOfConstructionProject = property(
        __typeOfConstructionProject.value, __typeOfConstructionProject.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}typeOfConstruction uses Python identifier typeOfConstruction
    __typeOfConstruction = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "typeOfConstruction"),
        "typeOfConstruction",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162typeOfConstruction",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 552, 3),
    )

    typeOfConstruction = property(
        __typeOfConstruction.value, __typeOfConstruction.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}totalCostsOfProject uses Python identifier totalCostsOfProject
    __totalCostsOfProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "totalCostsOfProject"),
        "totalCostsOfProject",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162totalCostsOfProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 553, 3),
    )

    totalCostsOfProject = property(
        __totalCostsOfProject.value, __totalCostsOfProject.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectAnnouncementDate uses Python identifier projectAnnouncementDate
    __projectAnnouncementDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectAnnouncementDate"),
        "projectAnnouncementDate",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162projectAnnouncementDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 554, 3),
    )

    projectAnnouncementDate = property(
        __projectAnnouncementDate.value, __projectAnnouncementDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingPermitIssueDate uses Python identifier buildingPermitIssueDate
    __buildingPermitIssueDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingPermitIssueDate"),
        "buildingPermitIssueDate",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162buildingPermitIssueDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 555, 3),
    )

    buildingPermitIssueDate = property(
        __buildingPermitIssueDate.value, __buildingPermitIssueDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectFreeText1 uses Python identifier projectFreeText1
    __projectFreeText1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectFreeText1"),
        "projectFreeText1",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162projectFreeText1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 556, 3),
    )

    projectFreeText1 = property(
        __projectFreeText1.value, __projectFreeText1.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectFreeText2 uses Python identifier projectFreeText2
    __projectFreeText2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectFreeText2"),
        "projectFreeText2",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162projectFreeText2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 557, 3),
    )

    projectFreeText2 = property(
        __projectFreeText2.value, __projectFreeText2.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 558, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingProjectLink uses Python identifier buildingProjectLink
    __buildingProjectLink = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingProjectLink"),
        "buildingProjectLink",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectWithBuildingType_httpwww_ech_chxmlnseCH_02162buildingProjectLink",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 559, 3),
    )

    buildingProjectLink = property(
        __buildingProjectLink.value, __buildingProjectLink.set, None, None
    )

    _ElementMap.update(
        {
            __EPROID.name(): __EPROID,
            __officialConstructionProjectFileNo.name(): __officialConstructionProjectFileNo,
            __extensionOfOfficialConstructionProjectFileNo.name(): __extensionOfOfficialConstructionProjectFileNo,
            __constructionSurveyDept.name(): __constructionSurveyDept,
            __constructionProjectDescription.name(): __constructionProjectDescription,
            __constructionLocalisation.name(): __constructionLocalisation,
            __realestateIdentification.name(): __realestateIdentification,
            __typeOfPermit.name(): __typeOfPermit,
            __typeOfClient.name(): __typeOfClient,
            __client.name(): __client,
            __typeOfConstructionProject.name(): __typeOfConstructionProject,
            __typeOfConstruction.name(): __typeOfConstruction,
            __totalCostsOfProject.name(): __totalCostsOfProject,
            __projectAnnouncementDate.name(): __projectAnnouncementDate,
            __buildingPermitIssueDate.name(): __buildingPermitIssueDate,
            __projectFreeText1.name(): __projectFreeText1,
            __projectFreeText2.name(): __projectFreeText2,
            __extension.name(): __extension,
            __buildingProjectLink.name(): __buildingProjectLink,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.addConstructionProjectWithBuildingType = (
    addConstructionProjectWithBuildingType
)
Namespace.addCategoryObject(
    "typeBinding",
    "addConstructionProjectWithBuildingType",
    addConstructionProjectWithBuildingType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToCompletedConstructionProjectType with content type ELEMENT_ONLY
class setToCompletedConstructionProjectType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToCompletedConstructionProjectType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "setToCompletedConstructionProjectType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 562, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionSurveyDept uses Python identifier constructionSurveyDept
    __constructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        "constructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162constructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 564, 3),
    )

    constructionSurveyDept = property(
        __constructionSurveyDept.value, __constructionSurveyDept.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}officialConstructionProjectFileNo uses Python identifier officialConstructionProjectFileNo
    __officialConstructionProjectFileNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "officialConstructionProjectFileNo"),
        "officialConstructionProjectFileNo",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162officialConstructionProjectFileNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 565, 3),
    )

    officialConstructionProjectFileNo = property(
        __officialConstructionProjectFileNo.value,
        __officialConstructionProjectFileNo.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extensionOfOfficialConstructionProjectFileNo uses Python identifier extensionOfOfficialConstructionProjectFileNo
    __extensionOfOfficialConstructionProjectFileNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "extensionOfOfficialConstructionProjectFileNo"
        ),
        "extensionOfOfficialConstructionProjectFileNo",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162extensionOfOfficialConstructionProjectFileNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 566, 3),
    )

    extensionOfOfficialConstructionProjectFileNo = property(
        __extensionOfOfficialConstructionProjectFileNo.value,
        __extensionOfOfficialConstructionProjectFileNo.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectDescription uses Python identifier constructionProjectDescription
    __constructionProjectDescription = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionProjectDescription"),
        "constructionProjectDescription",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162constructionProjectDescription",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 567, 3),
    )

    constructionProjectDescription = property(
        __constructionProjectDescription.value,
        __constructionProjectDescription.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionLocalisation uses Python identifier constructionLocalisation
    __constructionLocalisation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionLocalisation"),
        "constructionLocalisation",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162constructionLocalisation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 568, 3),
    )

    constructionLocalisation = property(
        __constructionLocalisation.value, __constructionLocalisation.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}realestateIdentification uses Python identifier realestateIdentification
    __realestateIdentification = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        "realestateIdentification",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162realestateIdentification",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 569, 3),
    )

    realestateIdentification = property(
        __realestateIdentification.value, __realestateIdentification.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}typeOfPermit uses Python identifier typeOfPermit
    __typeOfPermit = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "typeOfPermit"),
        "typeOfPermit",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162typeOfPermit",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 570, 3),
    )

    typeOfPermit = property(__typeOfPermit.value, __typeOfPermit.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}typeOfClient uses Python identifier typeOfClient
    __typeOfClient = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "typeOfClient"),
        "typeOfClient",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162typeOfClient",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 571, 3),
    )

    typeOfClient = property(__typeOfClient.value, __typeOfClient.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}client uses Python identifier client
    __client = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "client"),
        "client",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162client",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 572, 3),
    )

    client = property(__client.value, __client.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}typeOfConstructionProject uses Python identifier typeOfConstructionProject
    __typeOfConstructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "typeOfConstructionProject"),
        "typeOfConstructionProject",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162typeOfConstructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 573, 3),
    )

    typeOfConstructionProject = property(
        __typeOfConstructionProject.value, __typeOfConstructionProject.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}typeOfConstruction uses Python identifier typeOfConstruction
    __typeOfConstruction = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "typeOfConstruction"),
        "typeOfConstruction",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162typeOfConstruction",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 574, 3),
    )

    typeOfConstruction = property(
        __typeOfConstruction.value, __typeOfConstruction.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}totalCostsOfProject uses Python identifier totalCostsOfProject
    __totalCostsOfProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "totalCostsOfProject"),
        "totalCostsOfProject",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162totalCostsOfProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 575, 3),
    )

    totalCostsOfProject = property(
        __totalCostsOfProject.value, __totalCostsOfProject.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectCompletionDate uses Python identifier projectCompletionDate
    __projectCompletionDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectCompletionDate"),
        "projectCompletionDate",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162projectCompletionDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 576, 3),
    )

    projectCompletionDate = property(
        __projectCompletionDate.value, __projectCompletionDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectFreeText1 uses Python identifier projectFreeText1
    __projectFreeText1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectFreeText1"),
        "projectFreeText1",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162projectFreeText1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 577, 3),
    )

    projectFreeText1 = property(
        __projectFreeText1.value, __projectFreeText1.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectFreeText2 uses Python identifier projectFreeText2
    __projectFreeText2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectFreeText2"),
        "projectFreeText2",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162projectFreeText2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 578, 3),
    )

    projectFreeText2 = property(
        __projectFreeText2.value, __projectFreeText2.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 579, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingProjectLink uses Python identifier buildingProjectLink
    __buildingProjectLink = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingProjectLink"),
        "buildingProjectLink",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectType_httpwww_ech_chxmlnseCH_02162buildingProjectLink",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 580, 3),
    )

    buildingProjectLink = property(
        __buildingProjectLink.value, __buildingProjectLink.set, None, None
    )

    _ElementMap.update(
        {
            __constructionSurveyDept.name(): __constructionSurveyDept,
            __officialConstructionProjectFileNo.name(): __officialConstructionProjectFileNo,
            __extensionOfOfficialConstructionProjectFileNo.name(): __extensionOfOfficialConstructionProjectFileNo,
            __constructionProjectDescription.name(): __constructionProjectDescription,
            __constructionLocalisation.name(): __constructionLocalisation,
            __realestateIdentification.name(): __realestateIdentification,
            __typeOfPermit.name(): __typeOfPermit,
            __typeOfClient.name(): __typeOfClient,
            __client.name(): __client,
            __typeOfConstructionProject.name(): __typeOfConstructionProject,
            __typeOfConstruction.name(): __typeOfConstruction,
            __totalCostsOfProject.name(): __totalCostsOfProject,
            __projectCompletionDate.name(): __projectCompletionDate,
            __projectFreeText1.name(): __projectFreeText1,
            __projectFreeText2.name(): __projectFreeText2,
            __extension.name(): __extension,
            __buildingProjectLink.name(): __buildingProjectLink,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.setToCompletedConstructionProjectType = (
    setToCompletedConstructionProjectType
)
Namespace.addCategoryObject(
    "typeBinding",
    "setToCompletedConstructionProjectType",
    setToCompletedConstructionProjectType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectType with content type ELEMENT_ONLY
class constructionProjectType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "constructionProjectType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 583, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EPROID uses Python identifier EPROID
    __EPROID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        "EPROID",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162EPROID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 585, 3),
    )

    EPROID = property(__EPROID.value, __EPROID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}officialConstructionProjectFileNo uses Python identifier officialConstructionProjectFileNo
    __officialConstructionProjectFileNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "officialConstructionProjectFileNo"),
        "officialConstructionProjectFileNo",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162officialConstructionProjectFileNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 586, 3),
    )

    officialConstructionProjectFileNo = property(
        __officialConstructionProjectFileNo.value,
        __officialConstructionProjectFileNo.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extensionOfOfficialConstructionProjectFileNo uses Python identifier extensionOfOfficialConstructionProjectFileNo
    __extensionOfOfficialConstructionProjectFileNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "extensionOfOfficialConstructionProjectFileNo"
        ),
        "extensionOfOfficialConstructionProjectFileNo",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162extensionOfOfficialConstructionProjectFileNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 587, 3),
    )

    extensionOfOfficialConstructionProjectFileNo = property(
        __extensionOfOfficialConstructionProjectFileNo.value,
        __extensionOfOfficialConstructionProjectFileNo.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionSurveyDept uses Python identifier constructionSurveyDept
    __constructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        "constructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162constructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 588, 3),
    )

    constructionSurveyDept = property(
        __constructionSurveyDept.value, __constructionSurveyDept.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectDescription uses Python identifier constructionProjectDescription
    __constructionProjectDescription = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionProjectDescription"),
        "constructionProjectDescription",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162constructionProjectDescription",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 589, 3),
    )

    constructionProjectDescription = property(
        __constructionProjectDescription.value,
        __constructionProjectDescription.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionLocalisation uses Python identifier constructionLocalisation
    __constructionLocalisation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionLocalisation"),
        "constructionLocalisation",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162constructionLocalisation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 590, 3),
    )

    constructionLocalisation = property(
        __constructionLocalisation.value, __constructionLocalisation.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}realestateIdentification uses Python identifier realestateIdentification
    __realestateIdentification = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        "realestateIdentification",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162realestateIdentification",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 591, 3),
    )

    realestateIdentification = property(
        __realestateIdentification.value, __realestateIdentification.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}typeOfPermit uses Python identifier typeOfPermit
    __typeOfPermit = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "typeOfPermit"),
        "typeOfPermit",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162typeOfPermit",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 592, 3),
    )

    typeOfPermit = property(__typeOfPermit.value, __typeOfPermit.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}typeOfClient uses Python identifier typeOfClient
    __typeOfClient = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "typeOfClient"),
        "typeOfClient",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162typeOfClient",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 593, 3),
    )

    typeOfClient = property(__typeOfClient.value, __typeOfClient.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}client uses Python identifier client
    __client = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "client"),
        "client",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162client",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 594, 3),
    )

    client = property(__client.value, __client.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}typeOfConstructionProject uses Python identifier typeOfConstructionProject
    __typeOfConstructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "typeOfConstructionProject"),
        "typeOfConstructionProject",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162typeOfConstructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 595, 3),
    )

    typeOfConstructionProject = property(
        __typeOfConstructionProject.value, __typeOfConstructionProject.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}typeOfConstruction uses Python identifier typeOfConstruction
    __typeOfConstruction = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "typeOfConstruction"),
        "typeOfConstruction",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162typeOfConstruction",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 596, 3),
    )

    typeOfConstruction = property(
        __typeOfConstruction.value, __typeOfConstruction.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}totalCostsOfProject uses Python identifier totalCostsOfProject
    __totalCostsOfProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "totalCostsOfProject"),
        "totalCostsOfProject",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162totalCostsOfProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 597, 3),
    )

    totalCostsOfProject = property(
        __totalCostsOfProject.value, __totalCostsOfProject.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectAnnouncementDate uses Python identifier projectAnnouncementDate
    __projectAnnouncementDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectAnnouncementDate"),
        "projectAnnouncementDate",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162projectAnnouncementDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 598, 3),
    )

    projectAnnouncementDate = property(
        __projectAnnouncementDate.value, __projectAnnouncementDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingPermitIssueDate uses Python identifier buildingPermitIssueDate
    __buildingPermitIssueDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingPermitIssueDate"),
        "buildingPermitIssueDate",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162buildingPermitIssueDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 599, 3),
    )

    buildingPermitIssueDate = property(
        __buildingPermitIssueDate.value, __buildingPermitIssueDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectStartDate uses Python identifier projectStartDate
    __projectStartDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectStartDate"),
        "projectStartDate",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162projectStartDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 600, 3),
    )

    projectStartDate = property(
        __projectStartDate.value, __projectStartDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectCompletionDate uses Python identifier projectCompletionDate
    __projectCompletionDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectCompletionDate"),
        "projectCompletionDate",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162projectCompletionDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 601, 3),
    )

    projectCompletionDate = property(
        __projectCompletionDate.value, __projectCompletionDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectSuspensionDate uses Python identifier projectSuspensionDate
    __projectSuspensionDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectSuspensionDate"),
        "projectSuspensionDate",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162projectSuspensionDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 602, 3),
    )

    projectSuspensionDate = property(
        __projectSuspensionDate.value, __projectSuspensionDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionAuthorisationDeniedDate uses Python identifier constructionAuthorisationDeniedDate
    __constructionAuthorisationDeniedDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionAuthorisationDeniedDate"),
        "constructionAuthorisationDeniedDate",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162constructionAuthorisationDeniedDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 603, 3),
    )

    constructionAuthorisationDeniedDate = property(
        __constructionAuthorisationDeniedDate.value,
        __constructionAuthorisationDeniedDate.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}withdrawalDate uses Python identifier withdrawalDate
    __withdrawalDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "withdrawalDate"),
        "withdrawalDate",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162withdrawalDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 604, 3),
    )

    withdrawalDate = property(__withdrawalDate.value, __withdrawalDate.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}cancellationDate uses Python identifier cancellationDate
    __cancellationDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "cancellationDate"),
        "cancellationDate",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162cancellationDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 605, 3),
    )

    cancellationDate = property(
        __cancellationDate.value, __cancellationDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}durationOfConstructionPhase uses Python identifier durationOfConstructionPhase
    __durationOfConstructionPhase = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "durationOfConstructionPhase"),
        "durationOfConstructionPhase",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162durationOfConstructionPhase",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 606, 3),
    )

    durationOfConstructionPhase = property(
        __durationOfConstructionPhase.value,
        __durationOfConstructionPhase.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectFreeText1 uses Python identifier projectFreeText1
    __projectFreeText1 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectFreeText1"),
        "projectFreeText1",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162projectFreeText1",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 607, 3),
    )

    projectFreeText1 = property(
        __projectFreeText1.value, __projectFreeText1.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectFreeText2 uses Python identifier projectFreeText2
    __projectFreeText2 = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectFreeText2"),
        "projectFreeText2",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162projectFreeText2",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 608, 3),
    )

    projectFreeText2 = property(
        __projectFreeText2.value, __projectFreeText2.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 609, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EPROID.name(): __EPROID,
            __officialConstructionProjectFileNo.name(): __officialConstructionProjectFileNo,
            __extensionOfOfficialConstructionProjectFileNo.name(): __extensionOfOfficialConstructionProjectFileNo,
            __constructionSurveyDept.name(): __constructionSurveyDept,
            __constructionProjectDescription.name(): __constructionProjectDescription,
            __constructionLocalisation.name(): __constructionLocalisation,
            __realestateIdentification.name(): __realestateIdentification,
            __typeOfPermit.name(): __typeOfPermit,
            __typeOfClient.name(): __typeOfClient,
            __client.name(): __client,
            __typeOfConstructionProject.name(): __typeOfConstructionProject,
            __typeOfConstruction.name(): __typeOfConstruction,
            __totalCostsOfProject.name(): __totalCostsOfProject,
            __projectAnnouncementDate.name(): __projectAnnouncementDate,
            __buildingPermitIssueDate.name(): __buildingPermitIssueDate,
            __projectStartDate.name(): __projectStartDate,
            __projectCompletionDate.name(): __projectCompletionDate,
            __projectSuspensionDate.name(): __projectSuspensionDate,
            __constructionAuthorisationDeniedDate.name(): __constructionAuthorisationDeniedDate,
            __withdrawalDate.name(): __withdrawalDate,
            __cancellationDate.name(): __cancellationDate,
            __durationOfConstructionPhase.name(): __durationOfConstructionPhase,
            __projectFreeText1.name(): __projectFreeText1,
            __projectFreeText2.name(): __projectFreeText2,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.constructionProjectType = constructionProjectType
Namespace.addCategoryObject(
    "typeBinding", "constructionProjectType", constructionProjectType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectListType with content type ELEMENT_ONLY
class constructionProjectListType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectListType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "constructionProjectListType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 612, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EPROID uses Python identifier EPROID
    __EPROID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        "EPROID",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectListType_httpwww_ech_chxmlnseCH_02162EPROID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 614, 3),
    )

    EPROID = property(__EPROID.value, __EPROID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}officialConstructionProjectFileNo uses Python identifier officialConstructionProjectFileNo
    __officialConstructionProjectFileNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "officialConstructionProjectFileNo"),
        "officialConstructionProjectFileNo",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectListType_httpwww_ech_chxmlnseCH_02162officialConstructionProjectFileNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 615, 3),
    )

    officialConstructionProjectFileNo = property(
        __officialConstructionProjectFileNo.value,
        __officialConstructionProjectFileNo.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extensionOfOfficialConstructionProjectFileNo uses Python identifier extensionOfOfficialConstructionProjectFileNo
    __extensionOfOfficialConstructionProjectFileNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "extensionOfOfficialConstructionProjectFileNo"
        ),
        "extensionOfOfficialConstructionProjectFileNo",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectListType_httpwww_ech_chxmlnseCH_02162extensionOfOfficialConstructionProjectFileNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 616, 3),
    )

    extensionOfOfficialConstructionProjectFileNo = property(
        __extensionOfOfficialConstructionProjectFileNo.value,
        __extensionOfOfficialConstructionProjectFileNo.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionSurveyDept uses Python identifier constructionSurveyDept
    __constructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        "constructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectListType_httpwww_ech_chxmlnseCH_02162constructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 617, 3),
    )

    constructionSurveyDept = property(
        __constructionSurveyDept.value, __constructionSurveyDept.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectDescription uses Python identifier constructionProjectDescription
    __constructionProjectDescription = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionProjectDescription"),
        "constructionProjectDescription",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectListType_httpwww_ech_chxmlnseCH_02162constructionProjectDescription",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 618, 3),
    )

    constructionProjectDescription = property(
        __constructionProjectDescription.value,
        __constructionProjectDescription.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}realestateIdentification uses Python identifier realestateIdentification
    __realestateIdentification = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        "realestateIdentification",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectListType_httpwww_ech_chxmlnseCH_02162realestateIdentification",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 619, 3),
    )

    realestateIdentification = property(
        __realestateIdentification.value, __realestateIdentification.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectStatus uses Python identifier projectStatus
    __projectStatus = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectStatus"),
        "projectStatus",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectListType_httpwww_ech_chxmlnseCH_02162projectStatus",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 620, 3),
    )

    projectStatus = property(__projectStatus.value, __projectStatus.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectListType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 621, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EPROID.name(): __EPROID,
            __officialConstructionProjectFileNo.name(): __officialConstructionProjectFileNo,
            __extensionOfOfficialConstructionProjectFileNo.name(): __extensionOfOfficialConstructionProjectFileNo,
            __constructionSurveyDept.name(): __constructionSurveyDept,
            __constructionProjectDescription.name(): __constructionProjectDescription,
            __realestateIdentification.name(): __realestateIdentification,
            __projectStatus.name(): __projectStatus,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.constructionProjectListType = constructionProjectListType
Namespace.addCategoryObject(
    "typeBinding", "constructionProjectListType", constructionProjectListType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}costsPreviousYearType with content type ELEMENT_ONLY
class costsPreviousYearType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}costsPreviousYearType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "costsPreviousYearType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 624, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}previousYear uses Python identifier previousYear
    __previousYear = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "previousYear"),
        "previousYear",
        "__httpwww_ech_chxmlnseCH_02162_costsPreviousYearType_httpwww_ech_chxmlnseCH_02162previousYear",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 626, 3),
    )

    previousYear = property(__previousYear.value, __previousYear.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}costsStreetsPreviousYearPublicAdministration uses Python identifier costsStreetsPreviousYearPublicAdministration
    __costsStreetsPreviousYearPublicAdministration = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "costsStreetsPreviousYearPublicAdministration"
        ),
        "costsStreetsPreviousYearPublicAdministration",
        "__httpwww_ech_chxmlnseCH_02162_costsPreviousYearType_httpwww_ech_chxmlnseCH_02162costsStreetsPreviousYearPublicAdministration",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 627, 3),
    )

    costsStreetsPreviousYearPublicAdministration = property(
        __costsStreetsPreviousYearPublicAdministration.value,
        __costsStreetsPreviousYearPublicAdministration.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}costsCivilEngineeringPreviousYearPublicAdministration uses Python identifier costsCivilEngineeringPreviousYearPublicAdministration
    __costsCivilEngineeringPreviousYearPublicAdministration = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "costsCivilEngineeringPreviousYearPublicAdministration"
        ),
        "costsCivilEngineeringPreviousYearPublicAdministration",
        "__httpwww_ech_chxmlnseCH_02162_costsPreviousYearType_httpwww_ech_chxmlnseCH_02162costsCivilEngineeringPreviousYearPublicAdministration",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 628, 3),
    )

    costsCivilEngineeringPreviousYearPublicAdministration = property(
        __costsCivilEngineeringPreviousYearPublicAdministration.value,
        __costsCivilEngineeringPreviousYearPublicAdministration.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}costsBuildingPreviousYearPublicAdministration uses Python identifier costsBuildingPreviousYearPublicAdministration
    __costsBuildingPreviousYearPublicAdministration = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "costsBuildingPreviousYearPublicAdministration"
        ),
        "costsBuildingPreviousYearPublicAdministration",
        "__httpwww_ech_chxmlnseCH_02162_costsPreviousYearType_httpwww_ech_chxmlnseCH_02162costsBuildingPreviousYearPublicAdministration",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 629, 3),
    )

    costsBuildingPreviousYearPublicAdministration = property(
        __costsBuildingPreviousYearPublicAdministration.value,
        __costsBuildingPreviousYearPublicAdministration.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}costsStreetsPreviousYearPublicCorporation uses Python identifier costsStreetsPreviousYearPublicCorporation
    __costsStreetsPreviousYearPublicCorporation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "costsStreetsPreviousYearPublicCorporation"
        ),
        "costsStreetsPreviousYearPublicCorporation",
        "__httpwww_ech_chxmlnseCH_02162_costsPreviousYearType_httpwww_ech_chxmlnseCH_02162costsStreetsPreviousYearPublicCorporation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 630, 3),
    )

    costsStreetsPreviousYearPublicCorporation = property(
        __costsStreetsPreviousYearPublicCorporation.value,
        __costsStreetsPreviousYearPublicCorporation.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}costsCivilEngineeringPreviousYearPublicCorporation uses Python identifier costsCivilEngineeringPreviousYearPublicCorporation
    __costsCivilEngineeringPreviousYearPublicCorporation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "costsCivilEngineeringPreviousYearPublicCorporation"
        ),
        "costsCivilEngineeringPreviousYearPublicCorporation",
        "__httpwww_ech_chxmlnseCH_02162_costsPreviousYearType_httpwww_ech_chxmlnseCH_02162costsCivilEngineeringPreviousYearPublicCorporation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 631, 3),
    )

    costsCivilEngineeringPreviousYearPublicCorporation = property(
        __costsCivilEngineeringPreviousYearPublicCorporation.value,
        __costsCivilEngineeringPreviousYearPublicCorporation.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}costsBuildingPreviousYearPublicCorporation uses Python identifier costsBuildingPreviousYearPublicCorporation
    __costsBuildingPreviousYearPublicCorporation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "costsBuildingPreviousYearPublicCorporation"
        ),
        "costsBuildingPreviousYearPublicCorporation",
        "__httpwww_ech_chxmlnseCH_02162_costsPreviousYearType_httpwww_ech_chxmlnseCH_02162costsBuildingPreviousYearPublicCorporation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 632, 3),
    )

    costsBuildingPreviousYearPublicCorporation = property(
        __costsBuildingPreviousYearPublicCorporation.value,
        __costsBuildingPreviousYearPublicCorporation.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_costsPreviousYearType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 633, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __previousYear.name(): __previousYear,
            __costsStreetsPreviousYearPublicAdministration.name(): __costsStreetsPreviousYearPublicAdministration,
            __costsCivilEngineeringPreviousYearPublicAdministration.name(): __costsCivilEngineeringPreviousYearPublicAdministration,
            __costsBuildingPreviousYearPublicAdministration.name(): __costsBuildingPreviousYearPublicAdministration,
            __costsStreetsPreviousYearPublicCorporation.name(): __costsStreetsPreviousYearPublicCorporation,
            __costsCivilEngineeringPreviousYearPublicCorporation.name(): __costsCivilEngineeringPreviousYearPublicCorporation,
            __costsBuildingPreviousYearPublicCorporation.name(): __costsBuildingPreviousYearPublicCorporation,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.costsPreviousYearType = costsPreviousYearType
Namespace.addCategoryObject(
    "typeBinding", "costsPreviousYearType", costsPreviousYearType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}costsCurrentYearType with content type ELEMENT_ONLY
class costsCurrentYearType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}costsCurrentYearType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "costsCurrentYearType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 636, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}currentYear uses Python identifier currentYear
    __currentYear = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "currentYear"),
        "currentYear",
        "__httpwww_ech_chxmlnseCH_02162_costsCurrentYearType_httpwww_ech_chxmlnseCH_02162currentYear",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 638, 3),
    )

    currentYear = property(__currentYear.value, __currentYear.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}costsStreetsCurrentYearPublicAdministration uses Python identifier costsStreetsCurrentYearPublicAdministration
    __costsStreetsCurrentYearPublicAdministration = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "costsStreetsCurrentYearPublicAdministration"
        ),
        "costsStreetsCurrentYearPublicAdministration",
        "__httpwww_ech_chxmlnseCH_02162_costsCurrentYearType_httpwww_ech_chxmlnseCH_02162costsStreetsCurrentYearPublicAdministration",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 639, 3),
    )

    costsStreetsCurrentYearPublicAdministration = property(
        __costsStreetsCurrentYearPublicAdministration.value,
        __costsStreetsCurrentYearPublicAdministration.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}costsCivilEngineeringCurrentYearPublicAdministration uses Python identifier costsCivilEngineeringCurrentYearPublicAdministration
    __costsCivilEngineeringCurrentYearPublicAdministration = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "costsCivilEngineeringCurrentYearPublicAdministration"
        ),
        "costsCivilEngineeringCurrentYearPublicAdministration",
        "__httpwww_ech_chxmlnseCH_02162_costsCurrentYearType_httpwww_ech_chxmlnseCH_02162costsCivilEngineeringCurrentYearPublicAdministration",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 640, 3),
    )

    costsCivilEngineeringCurrentYearPublicAdministration = property(
        __costsCivilEngineeringCurrentYearPublicAdministration.value,
        __costsCivilEngineeringCurrentYearPublicAdministration.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}costsBuildingCurrentYearPublicAdministration uses Python identifier costsBuildingCurrentYearPublicAdministration
    __costsBuildingCurrentYearPublicAdministration = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "costsBuildingCurrentYearPublicAdministration"
        ),
        "costsBuildingCurrentYearPublicAdministration",
        "__httpwww_ech_chxmlnseCH_02162_costsCurrentYearType_httpwww_ech_chxmlnseCH_02162costsBuildingCurrentYearPublicAdministration",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 641, 3),
    )

    costsBuildingCurrentYearPublicAdministration = property(
        __costsBuildingCurrentYearPublicAdministration.value,
        __costsBuildingCurrentYearPublicAdministration.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}costsStreetsCurrentYearPublicCorporation uses Python identifier costsStreetsCurrentYearPublicCorporation
    __costsStreetsCurrentYearPublicCorporation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "costsStreetsCurrentYearPublicCorporation"
        ),
        "costsStreetsCurrentYearPublicCorporation",
        "__httpwww_ech_chxmlnseCH_02162_costsCurrentYearType_httpwww_ech_chxmlnseCH_02162costsStreetsCurrentYearPublicCorporation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 642, 3),
    )

    costsStreetsCurrentYearPublicCorporation = property(
        __costsStreetsCurrentYearPublicCorporation.value,
        __costsStreetsCurrentYearPublicCorporation.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}costsCivilEngineeringCurrentYearPublicCorporation uses Python identifier costsCivilEngineeringCurrentYearPublicCorporation
    __costsCivilEngineeringCurrentYearPublicCorporation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "costsCivilEngineeringCurrentYearPublicCorporation"
        ),
        "costsCivilEngineeringCurrentYearPublicCorporation",
        "__httpwww_ech_chxmlnseCH_02162_costsCurrentYearType_httpwww_ech_chxmlnseCH_02162costsCivilEngineeringCurrentYearPublicCorporation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 643, 3),
    )

    costsCivilEngineeringCurrentYearPublicCorporation = property(
        __costsCivilEngineeringCurrentYearPublicCorporation.value,
        __costsCivilEngineeringCurrentYearPublicCorporation.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}costsBuildingCurrentYearPublicCorporation uses Python identifier costsBuildingCurrentYearPublicCorporation
    __costsBuildingCurrentYearPublicCorporation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(
            Namespace, "costsBuildingCurrentYearPublicCorporation"
        ),
        "costsBuildingCurrentYearPublicCorporation",
        "__httpwww_ech_chxmlnseCH_02162_costsCurrentYearType_httpwww_ech_chxmlnseCH_02162costsBuildingCurrentYearPublicCorporation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 644, 3),
    )

    costsBuildingCurrentYearPublicCorporation = property(
        __costsBuildingCurrentYearPublicCorporation.value,
        __costsBuildingCurrentYearPublicCorporation.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_costsCurrentYearType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 645, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __currentYear.name(): __currentYear,
            __costsStreetsCurrentYearPublicAdministration.name(): __costsStreetsCurrentYearPublicAdministration,
            __costsCivilEngineeringCurrentYearPublicAdministration.name(): __costsCivilEngineeringCurrentYearPublicAdministration,
            __costsBuildingCurrentYearPublicAdministration.name(): __costsBuildingCurrentYearPublicAdministration,
            __costsStreetsCurrentYearPublicCorporation.name(): __costsStreetsCurrentYearPublicCorporation,
            __costsCivilEngineeringCurrentYearPublicCorporation.name(): __costsCivilEngineeringCurrentYearPublicCorporation,
            __costsBuildingCurrentYearPublicCorporation.name(): __costsBuildingCurrentYearPublicCorporation,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.costsCurrentYearType = costsCurrentYearType
Namespace.addCategoryObject("typeBinding", "costsCurrentYearType", costsCurrentYearType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}searchAddressType with content type ELEMENT_ONLY
class searchAddressType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}searchAddressType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "searchAddressType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 648, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}municipality uses Python identifier municipality
    __municipality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        "municipality",
        "__httpwww_ech_chxmlnseCH_02162_searchAddressType_httpwww_ech_chxmlnseCH_02162municipality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 650, 3),
    )

    municipality = property(__municipality.value, __municipality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}cantonAbbreviation uses Python identifier cantonAbbreviation
    __cantonAbbreviation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "cantonAbbreviation"),
        "cantonAbbreviation",
        "__httpwww_ech_chxmlnseCH_02162_searchAddressType_httpwww_ech_chxmlnseCH_02162cantonAbbreviation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 651, 3),
    )

    cantonAbbreviation = property(
        __cantonAbbreviation.value, __cantonAbbreviation.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}street uses Python identifier street
    __street = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "street"),
        "street",
        "__httpwww_ech_chxmlnseCH_02162_searchAddressType_httpwww_ech_chxmlnseCH_02162street",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 652, 3),
    )

    street = property(__street.value, __street.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntranceNo uses Python identifier buildingEntranceNo
    __buildingEntranceNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntranceNo"),
        "buildingEntranceNo",
        "__httpwww_ech_chxmlnseCH_02162_searchAddressType_httpwww_ech_chxmlnseCH_02162buildingEntranceNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 653, 3),
    )

    buildingEntranceNo = property(
        __buildingEntranceNo.value, __buildingEntranceNo.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}locality uses Python identifier locality
    __locality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        "locality",
        "__httpwww_ech_chxmlnseCH_02162_searchAddressType_httpwww_ech_chxmlnseCH_02162locality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 654, 3),
    )

    locality = property(__locality.value, __locality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_searchAddressType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 655, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __municipality.name(): __municipality,
            __cantonAbbreviation.name(): __cantonAbbreviation,
            __street.name(): __street,
            __buildingEntranceNo.name(): __buildingEntranceNo,
            __locality.name(): __locality,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.searchAddressType = searchAddressType
Namespace.addCategoryObject("typeBinding", "searchAddressType", searchAddressType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addConstructionProjectRequestType with content type ELEMENT_ONLY
class addConstructionProjectRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addConstructionProjectRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "addConstructionProjectRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 658, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionProject uses Python identifier constructionProject
    __constructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionProject"),
        "constructionProject",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162constructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 660, 3),
    )

    constructionProject = property(
        __constructionProject.value, __constructionProject.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_addConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 661, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __constructionProject.name(): __constructionProject,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.addConstructionProjectRequestType = (
    addConstructionProjectRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "addConstructionProjectRequestType",
    addConstructionProjectRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToApprovedConstructionProjectRequestType with content type ELEMENT_ONLY
class setToApprovedConstructionProjectRequestType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToApprovedConstructionProjectRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "setToApprovedConstructionProjectRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 664, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingPermitIssueDate uses Python identifier buildingPermitIssueDate
    __buildingPermitIssueDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingPermitIssueDate"),
        "buildingPermitIssueDate",
        "__httpwww_ech_chxmlnseCH_02162_setToApprovedConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162buildingPermitIssueDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 666, 3),
    )

    buildingPermitIssueDate = property(
        __buildingPermitIssueDate.value, __buildingPermitIssueDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_setToApprovedConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 667, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __buildingPermitIssueDate.name(): __buildingPermitIssueDate,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.setToApprovedConstructionProjectRequestType = (
    setToApprovedConstructionProjectRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "setToApprovedConstructionProjectRequestType",
    setToApprovedConstructionProjectRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToConstructionStartedRequestType with content type ELEMENT_ONLY
class setToConstructionStartedRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToConstructionStartedRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "setToConstructionStartedRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 670, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectStartDate uses Python identifier projectStartDate
    __projectStartDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectStartDate"),
        "projectStartDate",
        "__httpwww_ech_chxmlnseCH_02162_setToConstructionStartedRequestType_httpwww_ech_chxmlnseCH_02162projectStartDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 672, 3),
    )

    projectStartDate = property(
        __projectStartDate.value, __projectStartDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}durationOfConstructionPhase uses Python identifier durationOfConstructionPhase
    __durationOfConstructionPhase = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "durationOfConstructionPhase"),
        "durationOfConstructionPhase",
        "__httpwww_ech_chxmlnseCH_02162_setToConstructionStartedRequestType_httpwww_ech_chxmlnseCH_02162durationOfConstructionPhase",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 673, 3),
    )

    durationOfConstructionPhase = property(
        __durationOfConstructionPhase.value,
        __durationOfConstructionPhase.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_setToConstructionStartedRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 674, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __projectStartDate.name(): __projectStartDate,
            __durationOfConstructionPhase.name(): __durationOfConstructionPhase,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.setToConstructionStartedRequestType = (
    setToConstructionStartedRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "setToConstructionStartedRequestType",
    setToConstructionStartedRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToCompletedConstructionProjectRequestType with content type ELEMENT_ONLY
class setToCompletedConstructionProjectRequestType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToCompletedConstructionProjectRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "setToCompletedConstructionProjectRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 677, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionProject uses Python identifier constructionProject
    __constructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionProject"),
        "constructionProject",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162constructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 679, 3),
    )

    constructionProject = property(
        __constructionProject.value, __constructionProject.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 680, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __constructionProject.name(): __constructionProject,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.setToCompletedConstructionProjectRequestType = (
    setToCompletedConstructionProjectRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "setToCompletedConstructionProjectRequestType",
    setToCompletedConstructionProjectRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToCompletedBuildingRequestType with content type ELEMENT_ONLY
class setToCompletedBuildingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToCompletedBuildingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "setToCompletedBuildingRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 683, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}building uses Python identifier building
    __building = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "building"),
        "building",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingRequestType_httpwww_ech_chxmlnseCH_02162building",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 685, 3),
    )

    building = property(__building.value, __building.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedBuildingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 686, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update({__building.name(): __building, __extension.name(): __extension})
    _AttributeMap.update({})


_module_typeBindings.setToCompletedBuildingRequestType = (
    setToCompletedBuildingRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "setToCompletedBuildingRequestType",
    setToCompletedBuildingRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToCompletedDwellingRequestType with content type ELEMENT_ONLY
class setToCompletedDwellingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToCompletedDwellingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "setToCompletedDwellingRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 689, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwelling uses Python identifier dwelling
    __dwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwelling"),
        "dwelling",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingRequestType_httpwww_ech_chxmlnseCH_02162dwelling",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 691, 3),
    )

    dwelling = property(__dwelling.value, __dwelling.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_setToCompletedDwellingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 692, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update({__dwelling.name(): __dwelling, __extension.name(): __extension})
    _AttributeMap.update({})


_module_typeBindings.setToCompletedDwellingRequestType = (
    setToCompletedDwellingRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "setToCompletedDwellingRequestType",
    setToCompletedDwellingRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setMaintenanceCostsRequestType with content type ELEMENT_ONLY
class setMaintenanceCostsRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setMaintenanceCostsRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "setMaintenanceCostsRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 695, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionSurveyDept uses Python identifier constructionSurveyDept
    __constructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        "constructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_setMaintenanceCostsRequestType_httpwww_ech_chxmlnseCH_02162constructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 697, 3),
    )

    constructionSurveyDept = property(
        __constructionSurveyDept.value, __constructionSurveyDept.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}costsPreviousYear uses Python identifier costsPreviousYear
    __costsPreviousYear = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "costsPreviousYear"),
        "costsPreviousYear",
        "__httpwww_ech_chxmlnseCH_02162_setMaintenanceCostsRequestType_httpwww_ech_chxmlnseCH_02162costsPreviousYear",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 698, 3),
    )

    costsPreviousYear = property(
        __costsPreviousYear.value, __costsPreviousYear.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}costsCurrentYear uses Python identifier costsCurrentYear
    __costsCurrentYear = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "costsCurrentYear"),
        "costsCurrentYear",
        "__httpwww_ech_chxmlnseCH_02162_setMaintenanceCostsRequestType_httpwww_ech_chxmlnseCH_02162costsCurrentYear",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 699, 3),
    )

    costsCurrentYear = property(
        __costsCurrentYear.value, __costsCurrentYear.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_setMaintenanceCostsRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 700, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __constructionSurveyDept.name(): __constructionSurveyDept,
            __costsPreviousYear.name(): __costsPreviousYear,
            __costsCurrentYear.name(): __costsCurrentYear,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.setMaintenanceCostsRequestType = setMaintenanceCostsRequestType
Namespace.addCategoryObject(
    "typeBinding", "setMaintenanceCostsRequestType", setMaintenanceCostsRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyConstructionProjectRequestType with content type ELEMENT_ONLY
class modifyConstructionProjectRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyConstructionProjectRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "modifyConstructionProjectRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 703, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionProject uses Python identifier constructionProject
    __constructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionProject"),
        "constructionProject",
        "__httpwww_ech_chxmlnseCH_02162_modifyConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162constructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 705, 3),
    )

    constructionProject = property(
        __constructionProject.value, __constructionProject.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        "reason",
        "__httpwww_ech_chxmlnseCH_02162_modifyConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162reason",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 706, 3),
    )

    reason = property(__reason.value, __reason.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_modifyConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 707, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __constructionProject.name(): __constructionProject,
            __reason.name(): __reason,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.modifyConstructionProjectRequestType = (
    modifyConstructionProjectRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "modifyConstructionProjectRequestType",
    modifyConstructionProjectRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}bindBuildingToConstructionProjectRequestType with content type ELEMENT_ONLY
class bindBuildingToConstructionProjectRequestType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}bindBuildingToConstructionProjectRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "bindBuildingToConstructionProjectRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 710, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EPROID uses Python identifier EPROID
    __EPROID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        "EPROID",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162EPROID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 712, 3),
    )

    EPROID = property(__EPROID.value, __EPROID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}ARBID uses Python identifier ARBID
    __ARBID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "ARBID"),
        "ARBID",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162ARBID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 713, 3),
    )

    ARBID = property(__ARBID.value, __ARBID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionWorkDone uses Python identifier constructionWorkDone
    __constructionWorkDone = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionWorkDone"),
        "constructionWorkDone",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162constructionWorkDone",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 714, 3),
    )

    constructionWorkDone = property(
        __constructionWorkDone.value, __constructionWorkDone.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}energeticRestauration uses Python identifier energeticRestauration
    __energeticRestauration = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "energeticRestauration"),
        "energeticRestauration",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162energeticRestauration",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 715, 3),
    )

    energeticRestauration = property(
        __energeticRestauration.value, __energeticRestauration.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}renovationHeatingsystem uses Python identifier renovationHeatingsystem
    __renovationHeatingsystem = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "renovationHeatingsystem"),
        "renovationHeatingsystem",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162renovationHeatingsystem",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 716, 3),
    )

    renovationHeatingsystem = property(
        __renovationHeatingsystem.value, __renovationHeatingsystem.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}innerConversionRenovation uses Python identifier innerConversionRenovation
    __innerConversionRenovation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "innerConversionRenovation"),
        "innerConversionRenovation",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162innerConversionRenovation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 717, 3),
    )

    innerConversionRenovation = property(
        __innerConversionRenovation.value, __innerConversionRenovation.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}conversion uses Python identifier conversion
    __conversion = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "conversion"),
        "conversion",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162conversion",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 718, 3),
    )

    conversion = property(__conversion.value, __conversion.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extensionHeighteningHeated uses Python identifier extensionHeighteningHeated
    __extensionHeighteningHeated = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningHeated"),
        "extensionHeighteningHeated",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162extensionHeighteningHeated",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 719, 3),
    )

    extensionHeighteningHeated = property(
        __extensionHeighteningHeated.value, __extensionHeighteningHeated.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extensionHeighteningNotHeated uses Python identifier extensionHeighteningNotHeated
    __extensionHeighteningNotHeated = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningNotHeated"),
        "extensionHeighteningNotHeated",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162extensionHeighteningNotHeated",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 720, 3),
    )

    extensionHeighteningNotHeated = property(
        __extensionHeighteningNotHeated.value,
        __extensionHeighteningNotHeated.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}thermicSolarFacility uses Python identifier thermicSolarFacility
    __thermicSolarFacility = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "thermicSolarFacility"),
        "thermicSolarFacility",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162thermicSolarFacility",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 721, 3),
    )

    thermicSolarFacility = property(
        __thermicSolarFacility.value, __thermicSolarFacility.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}photovoltaicSolarFacility uses Python identifier photovoltaicSolarFacility
    __photovoltaicSolarFacility = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "photovoltaicSolarFacility"),
        "photovoltaicSolarFacility",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162photovoltaicSolarFacility",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 722, 3),
    )

    photovoltaicSolarFacility = property(
        __photovoltaicSolarFacility.value, __photovoltaicSolarFacility.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}otherWorks uses Python identifier otherWorks
    __otherWorks = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "otherWorks"),
        "otherWorks",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162otherWorks",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 723, 3),
    )

    otherWorks = property(__otherWorks.value, __otherWorks.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 724, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EPROID.name(): __EPROID,
            __ARBID.name(): __ARBID,
            __constructionWorkDone.name(): __constructionWorkDone,
            __energeticRestauration.name(): __energeticRestauration,
            __renovationHeatingsystem.name(): __renovationHeatingsystem,
            __innerConversionRenovation.name(): __innerConversionRenovation,
            __conversion.name(): __conversion,
            __extensionHeighteningHeated.name(): __extensionHeighteningHeated,
            __extensionHeighteningNotHeated.name(): __extensionHeighteningNotHeated,
            __thermicSolarFacility.name(): __thermicSolarFacility,
            __photovoltaicSolarFacility.name(): __photovoltaicSolarFacility,
            __otherWorks.name(): __otherWorks,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.bindBuildingToConstructionProjectRequestType = (
    bindBuildingToConstructionProjectRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "bindBuildingToConstructionProjectRequestType",
    bindBuildingToConstructionProjectRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyConstructionSurveyDeptRequestType with content type ELEMENT_ONLY
class modifyConstructionSurveyDeptRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyConstructionSurveyDeptRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "modifyConstructionSurveyDeptRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 727, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionSurveyDept uses Python identifier constructionSurveyDept
    __constructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        "constructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_modifyConstructionSurveyDeptRequestType_httpwww_ech_chxmlnseCH_02162constructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 729, 3),
    )

    constructionSurveyDept = property(
        __constructionSurveyDept.value, __constructionSurveyDept.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_modifyConstructionSurveyDeptRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 730, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __constructionSurveyDept.name(): __constructionSurveyDept,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.modifyConstructionSurveyDeptRequestType = (
    modifyConstructionSurveyDeptRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "modifyConstructionSurveyDeptRequestType",
    modifyConstructionSurveyDeptRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addBuildingRequestType with content type ELEMENT_ONLY
class addBuildingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addBuildingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "addBuildingRequestType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 733, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}building uses Python identifier building
    __building = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "building"),
        "building",
        "__httpwww_ech_chxmlnseCH_02162_addBuildingRequestType_httpwww_ech_chxmlnseCH_02162building",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 735, 3),
    )

    building = property(__building.value, __building.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        "reason",
        "__httpwww_ech_chxmlnseCH_02162_addBuildingRequestType_httpwww_ech_chxmlnseCH_02162reason",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 736, 3),
    )

    reason = property(__reason.value, __reason.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_addBuildingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 737, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __building.name(): __building,
            __reason.name(): __reason,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.addBuildingRequestType = addBuildingRequestType
Namespace.addCategoryObject(
    "typeBinding", "addBuildingRequestType", addBuildingRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyBuildingRequestType with content type ELEMENT_ONLY
class modifyBuildingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyBuildingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "modifyBuildingRequestType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 740, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}building uses Python identifier building
    __building = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "building"),
        "building",
        "__httpwww_ech_chxmlnseCH_02162_modifyBuildingRequestType_httpwww_ech_chxmlnseCH_02162building",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 742, 3),
    )

    building = property(__building.value, __building.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        "reason",
        "__httpwww_ech_chxmlnseCH_02162_modifyBuildingRequestType_httpwww_ech_chxmlnseCH_02162reason",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 743, 3),
    )

    reason = property(__reason.value, __reason.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_modifyBuildingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 744, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __building.name(): __building,
            __reason.name(): __reason,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.modifyBuildingRequestType = modifyBuildingRequestType
Namespace.addCategoryObject(
    "typeBinding", "modifyBuildingRequestType", modifyBuildingRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addBuildingEntranceRequestType with content type ELEMENT_ONLY
class addBuildingEntranceRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addBuildingEntranceRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "addBuildingEntranceRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 747, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EDID uses Python identifier EDID
    __EDID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        "EDID",
        "__httpwww_ech_chxmlnseCH_02162_addBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162EDID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 749, 3),
    )

    EDID = property(__EDID.value, __EDID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGAID uses Python identifier EGAID
    __EGAID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGAID"),
        "EGAID",
        "__httpwww_ech_chxmlnseCH_02162_addBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162EGAID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 750, 3),
    )

    EGAID = property(__EGAID.value, __EGAID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntranceNo uses Python identifier buildingEntranceNo
    __buildingEntranceNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntranceNo"),
        "buildingEntranceNo",
        "__httpwww_ech_chxmlnseCH_02162_addBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162buildingEntranceNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 751, 3),
    )

    buildingEntranceNo = property(
        __buildingEntranceNo.value, __buildingEntranceNo.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "coordinates"),
        "coordinates",
        "__httpwww_ech_chxmlnseCH_02162_addBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162coordinates",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 752, 3),
    )

    coordinates = property(__coordinates.value, __coordinates.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}isOfficialAddress uses Python identifier isOfficialAddress
    __isOfficialAddress = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "isOfficialAddress"),
        "isOfficialAddress",
        "__httpwww_ech_chxmlnseCH_02162_addBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162isOfficialAddress",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 753, 3),
    )

    isOfficialAddress = property(
        __isOfficialAddress.value, __isOfficialAddress.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}street uses Python identifier street
    __street = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "street"),
        "street",
        "__httpwww_ech_chxmlnseCH_02162_addBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162street",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 754, 3),
    )

    street = property(__street.value, __street.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}locality uses Python identifier locality
    __locality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        "locality",
        "__httpwww_ech_chxmlnseCH_02162_addBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162locality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 755, 3),
    )

    locality = property(__locality.value, __locality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}otherID uses Python identifier otherID
    __otherID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        "otherID",
        "__httpwww_ech_chxmlnseCH_02162_addBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162otherID",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 756, 3),
    )

    otherID = property(__otherID.value, __otherID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_addBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 757, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        "reason",
        "__httpwww_ech_chxmlnseCH_02162_addBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162reason",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 758, 3),
    )

    reason = property(__reason.value, __reason.set, None, None)

    _ElementMap.update(
        {
            __EDID.name(): __EDID,
            __EGAID.name(): __EGAID,
            __buildingEntranceNo.name(): __buildingEntranceNo,
            __coordinates.name(): __coordinates,
            __isOfficialAddress.name(): __isOfficialAddress,
            __street.name(): __street,
            __locality.name(): __locality,
            __otherID.name(): __otherID,
            __extension.name(): __extension,
            __reason.name(): __reason,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.addBuildingEntranceRequestType = addBuildingEntranceRequestType
Namespace.addCategoryObject(
    "typeBinding", "addBuildingEntranceRequestType", addBuildingEntranceRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyBuildingEntranceRequestType with content type ELEMENT_ONLY
class modifyBuildingEntranceRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyBuildingEntranceRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "modifyBuildingEntranceRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 761, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntrance uses Python identifier buildingEntrance
    __buildingEntrance = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrance"),
        "buildingEntrance",
        "__httpwww_ech_chxmlnseCH_02162_modifyBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162buildingEntrance",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 763, 3),
    )

    buildingEntrance = property(
        __buildingEntrance.value, __buildingEntrance.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        "reason",
        "__httpwww_ech_chxmlnseCH_02162_modifyBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162reason",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 764, 3),
    )

    reason = property(__reason.value, __reason.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_modifyBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 765, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __buildingEntrance.name(): __buildingEntrance,
            __reason.name(): __reason,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.modifyBuildingEntranceRequestType = (
    modifyBuildingEntranceRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "modifyBuildingEntranceRequestType",
    modifyBuildingEntranceRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addDwellingRequestType with content type ELEMENT_ONLY
class addDwellingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addDwellingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "addDwellingRequestType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 768, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EWID uses Python identifier EWID
    __EWID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EWID"),
        "EWID",
        "__httpwww_ech_chxmlnseCH_02162_addDwellingRequestType_httpwww_ech_chxmlnseCH_02162EWID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 770, 3),
    )

    EWID = property(__EWID.value, __EWID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwelling uses Python identifier dwelling
    __dwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwelling"),
        "dwelling",
        "__httpwww_ech_chxmlnseCH_02162_addDwellingRequestType_httpwww_ech_chxmlnseCH_02162dwelling",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 771, 3),
    )

    dwelling = property(__dwelling.value, __dwelling.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        "reason",
        "__httpwww_ech_chxmlnseCH_02162_addDwellingRequestType_httpwww_ech_chxmlnseCH_02162reason",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 772, 3),
    )

    reason = property(__reason.value, __reason.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_addDwellingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 773, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EWID.name(): __EWID,
            __dwelling.name(): __dwelling,
            __reason.name(): __reason,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.addDwellingRequestType = addDwellingRequestType
Namespace.addCategoryObject(
    "typeBinding", "addDwellingRequestType", addDwellingRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyDwellingRequestType with content type ELEMENT_ONLY
class modifyDwellingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyDwellingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "modifyDwellingRequestType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 776, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwelling uses Python identifier dwelling
    __dwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwelling"),
        "dwelling",
        "__httpwww_ech_chxmlnseCH_02162_modifyDwellingRequestType_httpwww_ech_chxmlnseCH_02162dwelling",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 778, 3),
    )

    dwelling = property(__dwelling.value, __dwelling.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        "reason",
        "__httpwww_ech_chxmlnseCH_02162_modifyDwellingRequestType_httpwww_ech_chxmlnseCH_02162reason",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 779, 3),
    )

    reason = property(__reason.value, __reason.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_modifyDwellingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 780, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __dwelling.name(): __dwelling,
            __reason.name(): __reason,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.modifyDwellingRequestType = modifyDwellingRequestType
Namespace.addCategoryObject(
    "typeBinding", "modifyDwellingRequestType", modifyDwellingRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}reallocateDwellingRequestType with content type ELEMENT_ONLY
class reallocateDwellingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}reallocateDwellingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "reallocateDwellingRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 783, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}oldEDID uses Python identifier oldEDID
    __oldEDID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "oldEDID"),
        "oldEDID",
        "__httpwww_ech_chxmlnseCH_02162_reallocateDwellingRequestType_httpwww_ech_chxmlnseCH_02162oldEDID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 785, 3),
    )

    oldEDID = property(__oldEDID.value, __oldEDID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}newEDID uses Python identifier newEDID
    __newEDID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "newEDID"),
        "newEDID",
        "__httpwww_ech_chxmlnseCH_02162_reallocateDwellingRequestType_httpwww_ech_chxmlnseCH_02162newEDID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 786, 3),
    )

    newEDID = property(__newEDID.value, __newEDID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        "reason",
        "__httpwww_ech_chxmlnseCH_02162_reallocateDwellingRequestType_httpwww_ech_chxmlnseCH_02162reason",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 787, 3),
    )

    reason = property(__reason.value, __reason.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_reallocateDwellingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 788, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __oldEDID.name(): __oldEDID,
            __newEDID.name(): __newEDID,
            __reason.name(): __reason,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.reallocateDwellingRequestType = reallocateDwellingRequestType
Namespace.addCategoryObject(
    "typeBinding", "reallocateDwellingRequestType", reallocateDwellingRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getConstructionProjectRequestType with content type ELEMENT_ONLY
class getConstructionProjectRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getConstructionProjectRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "getConstructionProjectRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 791, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionSurveyDept uses Python identifier constructionSurveyDept
    __constructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        "constructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_getConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162constructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 793, 3),
    )

    constructionSurveyDept = property(
        __constructionSurveyDept.value, __constructionSurveyDept.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}realestateIdentification uses Python identifier realestateIdentification
    __realestateIdentification = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        "realestateIdentification",
        "__httpwww_ech_chxmlnseCH_02162_getConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162realestateIdentification",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 794, 3),
    )

    realestateIdentification = property(
        __realestateIdentification.value, __realestateIdentification.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectStatus uses Python identifier projectStatus
    __projectStatus = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectStatus"),
        "projectStatus",
        "__httpwww_ech_chxmlnseCH_02162_getConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162projectStatus",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 795, 3),
    )

    projectStatus = property(__projectStatus.value, __projectStatus.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}hasError uses Python identifier hasError
    __hasError = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "hasError"),
        "hasError",
        "__httpwww_ech_chxmlnseCH_02162_getConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162hasError",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 796, 3),
    )

    hasError = property(__hasError.value, __hasError.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}createDate uses Python identifier createDate
    __createDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "createDate"),
        "createDate",
        "__httpwww_ech_chxmlnseCH_02162_getConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162createDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 797, 3),
    )

    createDate = property(__createDate.value, __createDate.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}modifyDate uses Python identifier modifyDate
    __modifyDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "modifyDate"),
        "modifyDate",
        "__httpwww_ech_chxmlnseCH_02162_getConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162modifyDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 798, 3),
    )

    modifyDate = property(__modifyDate.value, __modifyDate.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}otherId uses Python identifier otherId
    __otherId = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "otherId"),
        "otherId",
        "__httpwww_ech_chxmlnseCH_02162_getConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162otherId",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 799, 3),
    )

    otherId = property(__otherId.value, __otherId.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 800, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __constructionSurveyDept.name(): __constructionSurveyDept,
            __realestateIdentification.name(): __realestateIdentification,
            __projectStatus.name(): __projectStatus,
            __hasError.name(): __hasError,
            __createDate.name(): __createDate,
            __modifyDate.name(): __modifyDate,
            __otherId.name(): __otherId,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getConstructionProjectRequestType = (
    getConstructionProjectRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "getConstructionProjectRequestType",
    getConstructionProjectRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getDeactivatedConstructionProjectRequestType with content type ELEMENT_ONLY
class getDeactivatedConstructionProjectRequestType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getDeactivatedConstructionProjectRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "getDeactivatedConstructionProjectRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 803, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionSurveyDept uses Python identifier constructionSurveyDept
    __constructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        "constructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_getDeactivatedConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162constructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 805, 3),
    )

    constructionSurveyDept = property(
        __constructionSurveyDept.value, __constructionSurveyDept.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EPROID uses Python identifier EPROID
    __EPROID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        "EPROID",
        "__httpwww_ech_chxmlnseCH_02162_getDeactivatedConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162EPROID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 806, 3),
    )

    EPROID = property(__EPROID.value, __EPROID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getDeactivatedConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 807, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __constructionSurveyDept.name(): __constructionSurveyDept,
            __EPROID.name(): __EPROID,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getDeactivatedConstructionProjectRequestType = (
    getDeactivatedConstructionProjectRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "getDeactivatedConstructionProjectRequestType",
    getDeactivatedConstructionProjectRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getConstructionSurveyDeptRequestType with content type ELEMENT_ONLY
class getConstructionSurveyDeptRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getConstructionSurveyDeptRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "getConstructionSurveyDeptRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 810, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionSurveyDept uses Python identifier constructionSurveyDept
    __constructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        "constructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_getConstructionSurveyDeptRequestType_httpwww_ech_chxmlnseCH_02162constructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 812, 3),
    )

    constructionSurveyDept = property(
        __constructionSurveyDept.value, __constructionSurveyDept.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getConstructionSurveyDeptRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 813, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __constructionSurveyDept.name(): __constructionSurveyDept,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getConstructionSurveyDeptRequestType = (
    getConstructionSurveyDeptRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "getConstructionSurveyDeptRequestType",
    getConstructionSurveyDeptRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getBuildingRequestType with content type ELEMENT_ONLY
class getBuildingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getBuildingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "getBuildingRequestType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 816, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}searchAddressType uses Python identifier searchAddressType
    __searchAddressType = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "searchAddressType"),
        "searchAddressType",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingRequestType_httpwww_ech_chxmlnseCH_02162searchAddressType",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 818, 3),
    )

    searchAddressType = property(
        __searchAddressType.value, __searchAddressType.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}realestateIdentification uses Python identifier realestateIdentification
    __realestateIdentification = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        "realestateIdentification",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingRequestType_httpwww_ech_chxmlnseCH_02162realestateIdentification",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 819, 3),
    )

    realestateIdentification = property(
        __realestateIdentification.value, __realestateIdentification.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}officialBuildingNo uses Python identifier officialBuildingNo
    __officialBuildingNo = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo"),
        "officialBuildingNo",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingRequestType_httpwww_ech_chxmlnseCH_02162officialBuildingNo",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 820, 3),
    )

    officialBuildingNo = property(
        __officialBuildingNo.value, __officialBuildingNo.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dateOfConstruction uses Python identifier dateOfConstruction
    __dateOfConstruction = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction"),
        "dateOfConstruction",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingRequestType_httpwww_ech_chxmlnseCH_02162dateOfConstruction",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 821, 3),
    )

    dateOfConstruction = property(
        __dateOfConstruction.value, __dateOfConstruction.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}hasError uses Python identifier hasError
    __hasError = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "hasError"),
        "hasError",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingRequestType_httpwww_ech_chxmlnseCH_02162hasError",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 822, 3),
    )

    hasError = property(__hasError.value, __hasError.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}createDate uses Python identifier createDate
    __createDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "createDate"),
        "createDate",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingRequestType_httpwww_ech_chxmlnseCH_02162createDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 823, 3),
    )

    createDate = property(__createDate.value, __createDate.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}modifyDate uses Python identifier modifyDate
    __modifyDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "modifyDate"),
        "modifyDate",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingRequestType_httpwww_ech_chxmlnseCH_02162modifyDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 824, 3),
    )

    modifyDate = property(__modifyDate.value, __modifyDate.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}otherId uses Python identifier otherId
    __otherId = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "otherId"),
        "otherId",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingRequestType_httpwww_ech_chxmlnseCH_02162otherId",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 825, 3),
    )

    otherId = property(__otherId.value, __otherId.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 826, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __searchAddressType.name(): __searchAddressType,
            __realestateIdentification.name(): __realestateIdentification,
            __officialBuildingNo.name(): __officialBuildingNo,
            __dateOfConstruction.name(): __dateOfConstruction,
            __hasError.name(): __hasError,
            __createDate.name(): __createDate,
            __modifyDate.name(): __modifyDate,
            __otherId.name(): __otherId,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getBuildingRequestType = getBuildingRequestType
Namespace.addCategoryObject(
    "typeBinding", "getBuildingRequestType", getBuildingRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getDeactivatedBuildingRequestType with content type ELEMENT_ONLY
class getDeactivatedBuildingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getDeactivatedBuildingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "getDeactivatedBuildingRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 829, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}municipality uses Python identifier municipality
    __municipality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        "municipality",
        "__httpwww_ech_chxmlnseCH_02162_getDeactivatedBuildingRequestType_httpwww_ech_chxmlnseCH_02162municipality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 831, 3),
    )

    municipality = property(__municipality.value, __municipality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_getDeactivatedBuildingRequestType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 832, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getDeactivatedBuildingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 833, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __municipality.name(): __municipality,
            __EGID.name(): __EGID,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getDeactivatedBuildingRequestType = (
    getDeactivatedBuildingRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "getDeactivatedBuildingRequestType",
    getDeactivatedBuildingRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getDwellingRequestType with content type ELEMENT_ONLY
class getDwellingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getDwellingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "getDwellingRequestType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 836, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_getDwellingRequestType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 838, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}searchAddressType uses Python identifier searchAddressType
    __searchAddressType = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "searchAddressType"),
        "searchAddressType",
        "__httpwww_ech_chxmlnseCH_02162_getDwellingRequestType_httpwww_ech_chxmlnseCH_02162searchAddressType",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 839, 3),
    )

    searchAddressType = property(
        __searchAddressType.value, __searchAddressType.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}hasError uses Python identifier hasError
    __hasError = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "hasError"),
        "hasError",
        "__httpwww_ech_chxmlnseCH_02162_getDwellingRequestType_httpwww_ech_chxmlnseCH_02162hasError",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 840, 3),
    )

    hasError = property(__hasError.value, __hasError.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}createDate uses Python identifier createDate
    __createDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "createDate"),
        "createDate",
        "__httpwww_ech_chxmlnseCH_02162_getDwellingRequestType_httpwww_ech_chxmlnseCH_02162createDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 841, 3),
    )

    createDate = property(__createDate.value, __createDate.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}modifyDate uses Python identifier modifyDate
    __modifyDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "modifyDate"),
        "modifyDate",
        "__httpwww_ech_chxmlnseCH_02162_getDwellingRequestType_httpwww_ech_chxmlnseCH_02162modifyDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 842, 3),
    )

    modifyDate = property(__modifyDate.value, __modifyDate.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}otherType uses Python identifier otherType
    __otherType = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "otherType"),
        "otherType",
        "__httpwww_ech_chxmlnseCH_02162_getDwellingRequestType_httpwww_ech_chxmlnseCH_02162otherType",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 843, 3),
    )

    otherType = property(__otherType.value, __otherType.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getDwellingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 844, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __searchAddressType.name(): __searchAddressType,
            __hasError.name(): __hasError,
            __createDate.name(): __createDate,
            __modifyDate.name(): __modifyDate,
            __otherType.name(): __otherType,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getDwellingRequestType = getDwellingRequestType
Namespace.addCategoryObject(
    "typeBinding", "getDwellingRequestType", getDwellingRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getDeactivatedDwellingRequestType with content type ELEMENT_ONLY
class getDeactivatedDwellingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getDeactivatedDwellingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "getDeactivatedDwellingRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 847, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}municipality uses Python identifier municipality
    __municipality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        "municipality",
        "__httpwww_ech_chxmlnseCH_02162_getDeactivatedDwellingRequestType_httpwww_ech_chxmlnseCH_02162municipality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 849, 3),
    )

    municipality = property(__municipality.value, __municipality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_getDeactivatedDwellingRequestType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 850, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getDeactivatedDwellingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 851, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __municipality.name(): __municipality,
            __EGID.name(): __EGID,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getDeactivatedDwellingRequestType = (
    getDeactivatedDwellingRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "getDeactivatedDwellingRequestType",
    getDeactivatedDwellingRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getBuildingEntranceRequestType with content type ELEMENT_ONLY
class getBuildingEntranceRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getBuildingEntranceRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "getBuildingEntranceRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 854, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 856, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGAID uses Python identifier EGAID
    __EGAID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGAID"),
        "EGAID",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162EGAID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 857, 3),
    )

    EGAID = property(__EGAID.value, __EGAID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}searchAddressType uses Python identifier searchAddressType
    __searchAddressType = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "searchAddressType"),
        "searchAddressType",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162searchAddressType",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 858, 3),
    )

    searchAddressType = property(
        __searchAddressType.value, __searchAddressType.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}createDate uses Python identifier createDate
    __createDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "createDate"),
        "createDate",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162createDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 859, 3),
    )

    createDate = property(__createDate.value, __createDate.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}modifyDate uses Python identifier modifyDate
    __modifyDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "modifyDate"),
        "modifyDate",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162modifyDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 860, 3),
    )

    modifyDate = property(__modifyDate.value, __modifyDate.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}otherId uses Python identifier otherId
    __otherId = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "otherId"),
        "otherId",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162otherId",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 861, 3),
    )

    otherId = property(__otherId.value, __otherId.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 862, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __EGAID.name(): __EGAID,
            __searchAddressType.name(): __searchAddressType,
            __createDate.name(): __createDate,
            __modifyDate.name(): __modifyDate,
            __otherId.name(): __otherId,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getBuildingEntranceRequestType = getBuildingEntranceRequestType
Namespace.addCategoryObject(
    "typeBinding", "getBuildingEntranceRequestType", getBuildingEntranceRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getMutationRequestType with content type ELEMENT_ONLY
class getMutationRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getMutationRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "getMutationRequestType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 865, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_getMutationRequestType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 867, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}createDate uses Python identifier createDate
    __createDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "createDate"),
        "createDate",
        "__httpwww_ech_chxmlnseCH_02162_getMutationRequestType_httpwww_ech_chxmlnseCH_02162createDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 868, 3),
    )

    createDate = property(__createDate.value, __createDate.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}modifyDate uses Python identifier modifyDate
    __modifyDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "modifyDate"),
        "modifyDate",
        "__httpwww_ech_chxmlnseCH_02162_getMutationRequestType_httpwww_ech_chxmlnseCH_02162modifyDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 869, 3),
    )

    modifyDate = property(__modifyDate.value, __modifyDate.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getMutationRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 870, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __mutationID.name(): __mutationID,
            __createDate.name(): __createDate,
            __modifyDate.name(): __modifyDate,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getMutationRequestType = getMutationRequestType
Namespace.addCategoryObject(
    "typeBinding", "getMutationRequestType", getMutationRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addStreetRequestType with content type ELEMENT_ONLY
class addStreetRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addStreetRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "addStreetRequestType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 873, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}street uses Python identifier street
    __street = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "street"),
        "street",
        "__httpwww_ech_chxmlnseCH_02162_addStreetRequestType_httpwww_ech_chxmlnseCH_02162street",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 875, 3),
    )

    street = property(__street.value, __street.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}municipality uses Python identifier municipality
    __municipality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        "municipality",
        "__httpwww_ech_chxmlnseCH_02162_addStreetRequestType_httpwww_ech_chxmlnseCH_02162municipality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 876, 3),
    )

    municipality = property(__municipality.value, __municipality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}locality uses Python identifier locality
    __locality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        "locality",
        "__httpwww_ech_chxmlnseCH_02162_addStreetRequestType_httpwww_ech_chxmlnseCH_02162locality",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 877, 3),
    )

    locality = property(__locality.value, __locality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_addStreetRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 878, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __street.name(): __street,
            __municipality.name(): __municipality,
            __locality.name(): __locality,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.addStreetRequestType = addStreetRequestType
Namespace.addCategoryObject("typeBinding", "addStreetRequestType", addStreetRequestType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyStreetRequestType with content type ELEMENT_ONLY
class modifyStreetRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyStreetRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "modifyStreetRequestType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 881, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}streetStatus uses Python identifier streetStatus
    __streetStatus = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "streetStatus"),
        "streetStatus",
        "__httpwww_ech_chxmlnseCH_02162_modifyStreetRequestType_httpwww_ech_chxmlnseCH_02162streetStatus",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 883, 3),
    )

    streetStatus = property(__streetStatus.value, __streetStatus.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localisationKind uses Python identifier localisationKind
    __localisationKind = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localisationKind"),
        "localisationKind",
        "__httpwww_ech_chxmlnseCH_02162_modifyStreetRequestType_httpwww_ech_chxmlnseCH_02162localisationKind",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 884, 3),
    )

    localisationKind = property(
        __localisationKind.value, __localisationKind.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}officialStreetNumber uses Python identifier officialStreetNumber
    __officialStreetNumber = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "officialStreetNumber"),
        "officialStreetNumber",
        "__httpwww_ech_chxmlnseCH_02162_modifyStreetRequestType_httpwww_ech_chxmlnseCH_02162officialStreetNumber",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 885, 3),
    )

    officialStreetNumber = property(
        __officialStreetNumber.value, __officialStreetNumber.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_modifyStreetRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 886, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __streetStatus.name(): __streetStatus,
            __localisationKind.name(): __localisationKind,
            __officialStreetNumber.name(): __officialStreetNumber,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.modifyStreetRequestType = modifyStreetRequestType
Namespace.addCategoryObject(
    "typeBinding", "modifyStreetRequestType", modifyStreetRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getStreetRequestType with content type ELEMENT_ONLY
class getStreetRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getStreetRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "getStreetRequestType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 889, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "description"),
        "description",
        "__httpwww_ech_chxmlnseCH_02162_getStreetRequestType_httpwww_ech_chxmlnseCH_02162description",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 891, 3),
    )

    description = property(__description.value, __description.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}municipality uses Python identifier municipality
    __municipality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        "municipality",
        "__httpwww_ech_chxmlnseCH_02162_getStreetRequestType_httpwww_ech_chxmlnseCH_02162municipality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 892, 3),
    )

    municipality = property(__municipality.value, __municipality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}isOfficialDescription uses Python identifier isOfficialDescription
    __isOfficialDescription = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "isOfficialDescription"),
        "isOfficialDescription",
        "__httpwww_ech_chxmlnseCH_02162_getStreetRequestType_httpwww_ech_chxmlnseCH_02162isOfficialDescription",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 893, 3),
    )

    isOfficialDescription = property(
        __isOfficialDescription.value, __isOfficialDescription.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}streetStatus uses Python identifier streetStatus
    __streetStatus = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "streetStatus"),
        "streetStatus",
        "__httpwww_ech_chxmlnseCH_02162_getStreetRequestType_httpwww_ech_chxmlnseCH_02162streetStatus",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 894, 3),
    )

    streetStatus = property(__streetStatus.value, __streetStatus.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}localisationKind uses Python identifier localisationKind
    __localisationKind = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "localisationKind"),
        "localisationKind",
        "__httpwww_ech_chxmlnseCH_02162_getStreetRequestType_httpwww_ech_chxmlnseCH_02162localisationKind",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 895, 3),
    )

    localisationKind = property(
        __localisationKind.value, __localisationKind.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}officialStreetNumber uses Python identifier officialStreetNumber
    __officialStreetNumber = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "officialStreetNumber"),
        "officialStreetNumber",
        "__httpwww_ech_chxmlnseCH_02162_getStreetRequestType_httpwww_ech_chxmlnseCH_02162officialStreetNumber",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 896, 3),
    )

    officialStreetNumber = property(
        __officialStreetNumber.value, __officialStreetNumber.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}locality uses Python identifier locality
    __locality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        "locality",
        "__httpwww_ech_chxmlnseCH_02162_getStreetRequestType_httpwww_ech_chxmlnseCH_02162locality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 897, 3),
    )

    locality = property(__locality.value, __locality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getStreetRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 898, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __description.name(): __description,
            __municipality.name(): __municipality,
            __isOfficialDescription.name(): __isOfficialDescription,
            __streetStatus.name(): __streetStatus,
            __localisationKind.name(): __localisationKind,
            __officialStreetNumber.name(): __officialStreetNumber,
            __locality.name(): __locality,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getStreetRequestType = getStreetRequestType
Namespace.addCategoryObject("typeBinding", "getStreetRequestType", getStreetRequestType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getDeactivatedStreetRequestType with content type ELEMENT_ONLY
class getDeactivatedStreetRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getDeactivatedStreetRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "getDeactivatedStreetRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 901, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}municipality uses Python identifier municipality
    __municipality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        "municipality",
        "__httpwww_ech_chxmlnseCH_02162_getDeactivatedStreetRequestType_httpwww_ech_chxmlnseCH_02162municipality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 903, 3),
    )

    municipality = property(__municipality.value, __municipality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}ESID uses Python identifier ESID
    __ESID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "ESID"),
        "ESID",
        "__httpwww_ech_chxmlnseCH_02162_getDeactivatedStreetRequestType_httpwww_ech_chxmlnseCH_02162ESID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 904, 3),
    )

    ESID = property(__ESID.value, __ESID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getDeactivatedStreetRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 905, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __municipality.name(): __municipality,
            __ESID.name(): __ESID,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getDeactivatedStreetRequestType = getDeactivatedStreetRequestType
Namespace.addCategoryObject(
    "typeBinding", "getDeactivatedStreetRequestType", getDeactivatedStreetRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyStreetNameRequestType with content type ELEMENT_ONLY
class modifyStreetNameRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyStreetNameRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "modifyStreetNameRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 908, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "description"),
        "description",
        "__httpwww_ech_chxmlnseCH_02162_modifyStreetNameRequestType_httpwww_ech_chxmlnseCH_02162description",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 910, 3),
    )

    description = property(__description.value, __description.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_modifyStreetNameRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 911, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {__description.name(): __description, __extension.name(): __extension}
    )
    _AttributeMap.update({})


_module_typeBindings.modifyStreetNameRequestType = modifyStreetNameRequestType
Namespace.addCategoryObject(
    "typeBinding", "modifyStreetNameRequestType", modifyStreetNameRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deleteStreetSectionRequestType with content type ELEMENT_ONLY
class deleteStreetSectionRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deleteStreetSectionRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "deleteStreetSectionRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 914, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}locality uses Python identifier locality
    __locality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        "locality",
        "__httpwww_ech_chxmlnseCH_02162_deleteStreetSectionRequestType_httpwww_ech_chxmlnseCH_02162locality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 916, 3),
    )

    locality = property(__locality.value, __locality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_deleteStreetSectionRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 917, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update({__locality.name(): __locality, __extension.name(): __extension})
    _AttributeMap.update({})


_module_typeBindings.deleteStreetSectionRequestType = deleteStreetSectionRequestType
Namespace.addCategoryObject(
    "typeBinding", "deleteStreetSectionRequestType", deleteStreetSectionRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addStreetNameRequestType with content type ELEMENT_ONLY
class addStreetNameRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addStreetNameRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "addStreetNameRequestType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 920, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "description"),
        "description",
        "__httpwww_ech_chxmlnseCH_02162_addStreetNameRequestType_httpwww_ech_chxmlnseCH_02162description",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 922, 3),
    )

    description = property(__description.value, __description.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_addStreetNameRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 923, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {__description.name(): __description, __extension.name(): __extension}
    )
    _AttributeMap.update({})


_module_typeBindings.addStreetNameRequestType = addStreetNameRequestType
Namespace.addCategoryObject(
    "typeBinding", "addStreetNameRequestType", addStreetNameRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deleteStreetNameRequestType with content type ELEMENT_ONLY
class deleteStreetNameRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deleteStreetNameRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "deleteStreetNameRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 926, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "description"),
        "description",
        "__httpwww_ech_chxmlnseCH_02162_deleteStreetNameRequestType_httpwww_ech_chxmlnseCH_02162description",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 928, 3),
    )

    description = property(__description.value, __description.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_deleteStreetNameRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 929, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {__description.name(): __description, __extension.name(): __extension}
    )
    _AttributeMap.update({})


_module_typeBindings.deleteStreetNameRequestType = deleteStreetNameRequestType
Namespace.addCategoryObject(
    "typeBinding", "deleteStreetNameRequestType", deleteStreetNameRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectCompleteResponseType with content type ELEMENT_ONLY
class constructionProjectCompleteResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectCompleteResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "constructionProjectCompleteResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 932, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionProject uses Python identifier constructionProject
    __constructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionProject"),
        "constructionProject",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectCompleteResponseType_httpwww_ech_chxmlnseCH_02162constructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 934, 3),
    )

    constructionProject = property(
        __constructionProject.value, __constructionProject.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectCompleteResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 935, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectCompleteResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 936, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __constructionProject.name(): __constructionProject,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.constructionProjectCompleteResponseType = (
    constructionProjectCompleteResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "constructionProjectCompleteResponseType",
    constructionProjectCompleteResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectProcessResponseType with content type ELEMENT_ONLY
class constructionProjectProcessResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectProcessResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "constructionProjectProcessResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 939, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EPROID uses Python identifier EPROID
    __EPROID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        "EPROID",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectProcessResponseType_httpwww_ech_chxmlnseCH_02162EPROID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 941, 3),
    )

    EPROID = property(__EPROID.value, __EPROID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectProcessResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 942, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectProcessResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 943, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EPROID.name(): __EPROID,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.constructionProjectProcessResponseType = (
    constructionProjectProcessResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "constructionProjectProcessResponseType",
    constructionProjectProcessResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingProcessResponseType with content type ELEMENT_ONLY
class buildingProcessResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingProcessResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "buildingProcessResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 946, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_buildingProcessResponseType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 948, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_buildingProcessResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 949, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_buildingProcessResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 950, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.buildingProcessResponseType = buildingProcessResponseType
Namespace.addCategoryObject(
    "typeBinding", "buildingProcessResponseType", buildingProcessResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingUnusableResponseType with content type ELEMENT_ONLY
class buildingUnusableResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingUnusableResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "buildingUnusableResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 953, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_buildingUnusableResponseType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 955, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_buildingUnusableResponseType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 956, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_buildingUnusableResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 957, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_buildingUnusableResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 958, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __mutationID.name(): __mutationID,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.buildingUnusableResponseType = buildingUnusableResponseType
Namespace.addCategoryObject(
    "typeBinding", "buildingUnusableResponseType", buildingUnusableResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingCompleteResponseType with content type ELEMENT_ONLY
class buildingCompleteResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingCompleteResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "buildingCompleteResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 961, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}building uses Python identifier building
    __building = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "building"),
        "building",
        "__httpwww_ech_chxmlnseCH_02162_buildingCompleteResponseType_httpwww_ech_chxmlnseCH_02162building",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 963, 3),
    )

    building = property(__building.value, __building.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_buildingCompleteResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 964, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_buildingCompleteResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 965, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __building.name(): __building,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.buildingCompleteResponseType = buildingCompleteResponseType
Namespace.addCategoryObject(
    "typeBinding", "buildingCompleteResponseType", buildingCompleteResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}dwellingProcessResponseType with content type ELEMENT_ONLY
class dwellingProcessResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}dwellingProcessResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "dwellingProcessResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 968, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_dwellingProcessResponseType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 970, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EDID uses Python identifier EDID
    __EDID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        "EDID",
        "__httpwww_ech_chxmlnseCH_02162_dwellingProcessResponseType_httpwww_ech_chxmlnseCH_02162EDID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 971, 3),
    )

    EDID = property(__EDID.value, __EDID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EWID uses Python identifier EWID
    __EWID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EWID"),
        "EWID",
        "__httpwww_ech_chxmlnseCH_02162_dwellingProcessResponseType_httpwww_ech_chxmlnseCH_02162EWID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 972, 3),
    )

    EWID = property(__EWID.value, __EWID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_dwellingProcessResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 973, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_dwellingProcessResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 974, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __EDID.name(): __EDID,
            __EWID.name(): __EWID,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.dwellingProcessResponseType = dwellingProcessResponseType
Namespace.addCategoryObject(
    "typeBinding", "dwellingProcessResponseType", dwellingProcessResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}dwellingCompleteResponseType with content type ELEMENT_ONLY
class dwellingCompleteResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}dwellingCompleteResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "dwellingCompleteResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 977, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_dwellingCompleteResponseType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 979, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EDID uses Python identifier EDID
    __EDID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        "EDID",
        "__httpwww_ech_chxmlnseCH_02162_dwellingCompleteResponseType_httpwww_ech_chxmlnseCH_02162EDID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 980, 3),
    )

    EDID = property(__EDID.value, __EDID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwelling uses Python identifier dwelling
    __dwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwelling"),
        "dwelling",
        "__httpwww_ech_chxmlnseCH_02162_dwellingCompleteResponseType_httpwww_ech_chxmlnseCH_02162dwelling",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 981, 3),
    )

    dwelling = property(__dwelling.value, __dwelling.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_dwellingCompleteResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 982, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_dwellingCompleteResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 983, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __EDID.name(): __EDID,
            __dwelling.name(): __dwelling,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.dwellingCompleteResponseType = dwellingCompleteResponseType
Namespace.addCategoryObject(
    "typeBinding", "dwellingCompleteResponseType", dwellingCompleteResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}dwellingUnusableResponseType with content type ELEMENT_ONLY
class dwellingUnusableResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}dwellingUnusableResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "dwellingUnusableResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 986, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_dwellingUnusableResponseType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 988, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EDID uses Python identifier EDID
    __EDID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        "EDID",
        "__httpwww_ech_chxmlnseCH_02162_dwellingUnusableResponseType_httpwww_ech_chxmlnseCH_02162EDID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 989, 3),
    )

    EDID = property(__EDID.value, __EDID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EWID uses Python identifier EWID
    __EWID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EWID"),
        "EWID",
        "__httpwww_ech_chxmlnseCH_02162_dwellingUnusableResponseType_httpwww_ech_chxmlnseCH_02162EWID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 990, 3),
    )

    EWID = property(__EWID.value, __EWID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_dwellingUnusableResponseType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 991, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_dwellingUnusableResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 992, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_dwellingUnusableResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 993, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __EDID.name(): __EDID,
            __EWID.name(): __EWID,
            __mutationID.name(): __mutationID,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.dwellingUnusableResponseType = dwellingUnusableResponseType
Namespace.addCategoryObject(
    "typeBinding", "dwellingUnusableResponseType", dwellingUnusableResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}quarterlySurveyResponseType with content type ELEMENT_ONLY
class quarterlySurveyResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}quarterlySurveyResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "quarterlySurveyResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 996, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionSurveyDept uses Python identifier constructionSurveyDept
    __constructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        "constructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_quarterlySurveyResponseType_httpwww_ech_chxmlnseCH_02162constructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 998, 3),
    )

    constructionSurveyDept = property(
        __constructionSurveyDept.value, __constructionSurveyDept.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}surveyStatus uses Python identifier surveyStatus
    __surveyStatus = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "surveyStatus"),
        "surveyStatus",
        "__httpwww_ech_chxmlnseCH_02162_quarterlySurveyResponseType_httpwww_ech_chxmlnseCH_02162surveyStatus",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 999, 3),
    )

    surveyStatus = property(__surveyStatus.value, __surveyStatus.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_quarterlySurveyResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1000, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_quarterlySurveyResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1001, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __constructionSurveyDept.name(): __constructionSurveyDept,
            __surveyStatus.name(): __surveyStatus,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.quarterlySurveyResponseType = quarterlySurveyResponseType
Namespace.addCategoryObject(
    "typeBinding", "quarterlySurveyResponseType", quarterlySurveyResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyConstructionProjectResponseType with content type ELEMENT_ONLY
class modifyConstructionProjectResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyConstructionProjectResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "modifyConstructionProjectResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1004, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionProject uses Python identifier constructionProject
    __constructionProject = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionProject"),
        "constructionProject",
        "__httpwww_ech_chxmlnseCH_02162_modifyConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162constructionProject",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1006, 3),
    )

    constructionProject = property(
        __constructionProject.value, __constructionProject.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_modifyConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1007, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_modifyConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1008, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_modifyConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1009, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __constructionProject.name(): __constructionProject,
            __mutationID.name(): __mutationID,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.modifyConstructionProjectResponseType = (
    modifyConstructionProjectResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "modifyConstructionProjectResponseType",
    modifyConstructionProjectResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}bindBuildingToConstructionProjectResponseType with content type ELEMENT_ONLY
class bindBuildingToConstructionProjectResponseType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}bindBuildingToConstructionProjectResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "bindBuildingToConstructionProjectResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1012, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EPROID uses Python identifier EPROID
    __EPROID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        "EPROID",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162EPROID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1014, 3),
    )

    EPROID = property(__EPROID.value, __EPROID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1015, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}ARBID uses Python identifier ARBID
    __ARBID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "ARBID"),
        "ARBID",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162ARBID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1016, 3),
    )

    ARBID = property(__ARBID.value, __ARBID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1017, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1018, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_bindBuildingToConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1019, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EPROID.name(): __EPROID,
            __EGID.name(): __EGID,
            __ARBID.name(): __ARBID,
            __mutationID.name(): __mutationID,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.bindBuildingToConstructionProjectResponseType = (
    bindBuildingToConstructionProjectResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "bindBuildingToConstructionProjectResponseType",
    bindBuildingToConstructionProjectResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deactivateConstructionProjectResponseType with content type ELEMENT_ONLY
class deactivateConstructionProjectResponseType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deactivateConstructionProjectResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "deactivateConstructionProjectResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1022, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EPROID uses Python identifier EPROID
    __EPROID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        "EPROID",
        "__httpwww_ech_chxmlnseCH_02162_deactivateConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162EPROID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1024, 3),
    )

    EPROID = property(__EPROID.value, __EPROID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_deactivateConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1025, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_deactivateConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1026, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EPROID.name(): __EPROID,
            __mutationID.name(): __mutationID,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.deactivateConstructionProjectResponseType = (
    deactivateConstructionProjectResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "deactivateConstructionProjectResponseType",
    deactivateConstructionProjectResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}reactivateConstructionProjectResponseType with content type ELEMENT_ONLY
class reactivateConstructionProjectResponseType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}reactivateConstructionProjectResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "reactivateConstructionProjectResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1029, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EPROID uses Python identifier EPROID
    __EPROID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        "EPROID",
        "__httpwww_ech_chxmlnseCH_02162_reactivateConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162EPROID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1031, 3),
    )

    EPROID = property(__EPROID.value, __EPROID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_reactivateConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1032, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_reactivateConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1033, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_reactivateConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1034, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EPROID.name(): __EPROID,
            __mutationID.name(): __mutationID,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.reactivateConstructionProjectResponseType = (
    reactivateConstructionProjectResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "reactivateConstructionProjectResponseType",
    reactivateConstructionProjectResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyConstructionSurveyDeptResponseType with content type ELEMENT_ONLY
class modifyConstructionSurveyDeptResponseType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyConstructionSurveyDeptResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "modifyConstructionSurveyDeptResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1037, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionSurveyDept uses Python identifier constructionSurveyDept
    __constructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        "constructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_modifyConstructionSurveyDeptResponseType_httpwww_ech_chxmlnseCH_02162constructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1039, 3),
    )

    constructionSurveyDept = property(
        __constructionSurveyDept.value, __constructionSurveyDept.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_modifyConstructionSurveyDeptResponseType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1040, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_modifyConstructionSurveyDeptResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1041, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_modifyConstructionSurveyDeptResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1042, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __constructionSurveyDept.name(): __constructionSurveyDept,
            __mutationID.name(): __mutationID,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.modifyConstructionSurveyDeptResponseType = (
    modifyConstructionSurveyDeptResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "modifyConstructionSurveyDeptResponseType",
    modifyConstructionSurveyDeptResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getByIdAddReactivateBuildingResponseType with content type ELEMENT_ONLY
class getByIdAddReactivateBuildingResponseType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getByIdAddReactivateBuildingResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "getByIdAddReactivateBuildingResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1045, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}building uses Python identifier building
    __building = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "building"),
        "building",
        "__httpwww_ech_chxmlnseCH_02162_getByIdAddReactivateBuildingResponseType_httpwww_ech_chxmlnseCH_02162building",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1047, 3),
    )

    building = property(__building.value, __building.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_getByIdAddReactivateBuildingResponseType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1048, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_getByIdAddReactivateBuildingResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1049, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getByIdAddReactivateBuildingResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1050, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __building.name(): __building,
            __mutationID.name(): __mutationID,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getByIdAddReactivateBuildingResponseType = (
    getByIdAddReactivateBuildingResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "getByIdAddReactivateBuildingResponseType",
    getByIdAddReactivateBuildingResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyBuildingResponseType with content type ELEMENT_ONLY
class modifyBuildingResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyBuildingResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "modifyBuildingResponseType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1053, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}building uses Python identifier building
    __building = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "building"),
        "building",
        "__httpwww_ech_chxmlnseCH_02162_modifyBuildingResponseType_httpwww_ech_chxmlnseCH_02162building",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1055, 3),
    )

    building = property(__building.value, __building.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_modifyBuildingResponseType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1056, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_modifyBuildingResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1057, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_modifyBuildingResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1058, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __building.name(): __building,
            __mutationID.name(): __mutationID,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.modifyBuildingResponseType = modifyBuildingResponseType
Namespace.addCategoryObject(
    "typeBinding", "modifyBuildingResponseType", modifyBuildingResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deactivateBuildingResponseType with content type ELEMENT_ONLY
class deactivateBuildingResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deactivateBuildingResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "deactivateBuildingResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1061, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_deactivateBuildingResponseType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1063, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_deactivateBuildingResponseType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1064, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_deactivateBuildingResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1065, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __mutationID.name(): __mutationID,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.deactivateBuildingResponseType = deactivateBuildingResponseType
Namespace.addCategoryObject(
    "typeBinding", "deactivateBuildingResponseType", deactivateBuildingResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addModifyBuildingEntranceResponseType with content type ELEMENT_ONLY
class addModifyBuildingEntranceResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addModifyBuildingEntranceResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "addModifyBuildingEntranceResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1068, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_addModifyBuildingEntranceResponseType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1070, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntrance uses Python identifier buildingEntrance
    __buildingEntrance = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrance"),
        "buildingEntrance",
        "__httpwww_ech_chxmlnseCH_02162_addModifyBuildingEntranceResponseType_httpwww_ech_chxmlnseCH_02162buildingEntrance",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1071, 3),
    )

    buildingEntrance = property(
        __buildingEntrance.value, __buildingEntrance.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_addModifyBuildingEntranceResponseType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1072, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_addModifyBuildingEntranceResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1073, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_addModifyBuildingEntranceResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1074, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __buildingEntrance.name(): __buildingEntrance,
            __mutationID.name(): __mutationID,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.addModifyBuildingEntranceResponseType = (
    addModifyBuildingEntranceResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "addModifyBuildingEntranceResponseType",
    addModifyBuildingEntranceResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deactivateBuildingEntranceResponseType with content type ELEMENT_ONLY
class deactivateBuildingEntranceResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deactivateBuildingEntranceResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "deactivateBuildingEntranceResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1077, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_deactivateBuildingEntranceResponseType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1079, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EDID uses Python identifier EDID
    __EDID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        "EDID",
        "__httpwww_ech_chxmlnseCH_02162_deactivateBuildingEntranceResponseType_httpwww_ech_chxmlnseCH_02162EDID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1080, 3),
    )

    EDID = property(__EDID.value, __EDID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_deactivateBuildingEntranceResponseType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1081, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_deactivateBuildingEntranceResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1082, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __EDID.name(): __EDID,
            __mutationID.name(): __mutationID,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.deactivateBuildingEntranceResponseType = (
    deactivateBuildingEntranceResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "deactivateBuildingEntranceResponseType",
    deactivateBuildingEntranceResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}reactivateBuildingEntranceResponseType with content type ELEMENT_ONLY
class reactivateBuildingEntranceResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}reactivateBuildingEntranceResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "reactivateBuildingEntranceResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1085, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_reactivateBuildingEntranceResponseType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1087, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntrance uses Python identifier buildingEntrance
    __buildingEntrance = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrance"),
        "buildingEntrance",
        "__httpwww_ech_chxmlnseCH_02162_reactivateBuildingEntranceResponseType_httpwww_ech_chxmlnseCH_02162buildingEntrance",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1088, 3),
    )

    buildingEntrance = property(
        __buildingEntrance.value, __buildingEntrance.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_reactivateBuildingEntranceResponseType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1089, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_reactivateBuildingEntranceResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1090, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_reactivateBuildingEntranceResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1091, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __buildingEntrance.name(): __buildingEntrance,
            __mutationID.name(): __mutationID,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.reactivateBuildingEntranceResponseType = (
    reactivateBuildingEntranceResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "reactivateBuildingEntranceResponseType",
    reactivateBuildingEntranceResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addModifyDwellingResponseType with content type ELEMENT_ONLY
class addModifyDwellingResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addModifyDwellingResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "addModifyDwellingResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1094, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_addModifyDwellingResponseType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1096, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EDID uses Python identifier EDID
    __EDID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        "EDID",
        "__httpwww_ech_chxmlnseCH_02162_addModifyDwellingResponseType_httpwww_ech_chxmlnseCH_02162EDID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1097, 3),
    )

    EDID = property(__EDID.value, __EDID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwelling uses Python identifier dwelling
    __dwelling = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwelling"),
        "dwelling",
        "__httpwww_ech_chxmlnseCH_02162_addModifyDwellingResponseType_httpwww_ech_chxmlnseCH_02162dwelling",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1098, 3),
    )

    dwelling = property(__dwelling.value, __dwelling.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_addModifyDwellingResponseType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1099, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_addModifyDwellingResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1100, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_addModifyDwellingResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1101, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __EDID.name(): __EDID,
            __dwelling.name(): __dwelling,
            __mutationID.name(): __mutationID,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.addModifyDwellingResponseType = addModifyDwellingResponseType
Namespace.addCategoryObject(
    "typeBinding", "addModifyDwellingResponseType", addModifyDwellingResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}reactivateReallocateDwellingResponseType with content type ELEMENT_ONLY
class reactivateReallocateDwellingResponseType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}reactivateReallocateDwellingResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "reactivateReallocateDwellingResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1104, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_reactivateReallocateDwellingResponseType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1106, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EDID uses Python identifier EDID
    __EDID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        "EDID",
        "__httpwww_ech_chxmlnseCH_02162_reactivateReallocateDwellingResponseType_httpwww_ech_chxmlnseCH_02162EDID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1107, 3),
    )

    EDID = property(__EDID.value, __EDID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EWID uses Python identifier EWID
    __EWID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EWID"),
        "EWID",
        "__httpwww_ech_chxmlnseCH_02162_reactivateReallocateDwellingResponseType_httpwww_ech_chxmlnseCH_02162EWID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1108, 3),
    )

    EWID = property(__EWID.value, __EWID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_reactivateReallocateDwellingResponseType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1109, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_reactivateReallocateDwellingResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1110, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __EDID.name(): __EDID,
            __EWID.name(): __EWID,
            __mutationID.name(): __mutationID,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.reactivateReallocateDwellingResponseType = (
    reactivateReallocateDwellingResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "reactivateReallocateDwellingResponseType",
    reactivateReallocateDwellingResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}checkConstructionProjectResponseType with content type ELEMENT_ONLY
class checkConstructionProjectResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}checkConstructionProjectResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "checkConstructionProjectResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1113, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EPROID uses Python identifier EPROID
    __EPROID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        "EPROID",
        "__httpwww_ech_chxmlnseCH_02162_checkConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162EPROID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1115, 3),
    )

    EPROID = property(__EPROID.value, __EPROID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_checkConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1116, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_checkConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1117, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EPROID.name(): __EPROID,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.checkConstructionProjectResponseType = (
    checkConstructionProjectResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "checkConstructionProjectResponseType",
    checkConstructionProjectResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}checkQuaterlySurveyDeptResponseType with content type ELEMENT_ONLY
class checkQuaterlySurveyDeptResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}checkQuaterlySurveyDeptResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "checkQuaterlySurveyDeptResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1120, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionSurveyDept uses Python identifier constructionSurveyDept
    __constructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        "constructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_checkQuaterlySurveyDeptResponseType_httpwww_ech_chxmlnseCH_02162constructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1122, 3),
    )

    constructionSurveyDept = property(
        __constructionSurveyDept.value, __constructionSurveyDept.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_checkQuaterlySurveyDeptResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1123, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_checkQuaterlySurveyDeptResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1124, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __constructionSurveyDept.name(): __constructionSurveyDept,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.checkQuaterlySurveyDeptResponseType = (
    checkQuaterlySurveyDeptResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "checkQuaterlySurveyDeptResponseType",
    checkQuaterlySurveyDeptResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}checkBuildingResponseType with content type ELEMENT_ONLY
class checkBuildingResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}checkBuildingResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "checkBuildingResponseType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1127, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_checkBuildingResponseType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1129, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_checkBuildingResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1130, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_checkBuildingResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1131, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.checkBuildingResponseType = checkBuildingResponseType
Namespace.addCategoryObject(
    "typeBinding", "checkBuildingResponseType", checkBuildingResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getConstructionProjectResponseType with content type ELEMENT_ONLY
class getConstructionProjectResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getConstructionProjectResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "getConstructionProjectResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1134, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectsList uses Python identifier constructionProjectsList
    __constructionProjectsList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionProjectsList"),
        "constructionProjectsList",
        "__httpwww_ech_chxmlnseCH_02162_getConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162constructionProjectsList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1136, 3),
    )

    constructionProjectsList = property(
        __constructionProjectsList.value, __constructionProjectsList.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getConstructionProjectResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1137, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __constructionProjectsList.name(): __constructionProjectsList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getConstructionProjectResponseType = (
    getConstructionProjectResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "getConstructionProjectResponseType",
    getConstructionProjectResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getConstructionSurveyDeptResponseType with content type ELEMENT_ONLY
class getConstructionSurveyDeptResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getConstructionSurveyDeptResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "getConstructionSurveyDeptResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1140, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionSurveyDept uses Python identifier constructionSurveyDept
    __constructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        "constructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_getConstructionSurveyDeptResponseType_httpwww_ech_chxmlnseCH_02162constructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1142, 3),
    )

    constructionSurveyDept = property(
        __constructionSurveyDept.value, __constructionSurveyDept.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getConstructionSurveyDeptResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1143, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __constructionSurveyDept.name(): __constructionSurveyDept,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getConstructionSurveyDeptResponseType = (
    getConstructionSurveyDeptResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "getConstructionSurveyDeptResponseType",
    getConstructionSurveyDeptResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getBuildingResponseType with content type ELEMENT_ONLY
class getBuildingResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getBuildingResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "getBuildingResponseType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1146, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingsList uses Python identifier buildingsList
    __buildingsList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingsList"),
        "buildingsList",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingResponseType_httpwww_ech_chxmlnseCH_02162buildingsList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1148, 3),
    )

    buildingsList = property(__buildingsList.value, __buildingsList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1149, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {__buildingsList.name(): __buildingsList, __extension.name(): __extension}
    )
    _AttributeMap.update({})


_module_typeBindings.getBuildingResponseType = getBuildingResponseType
Namespace.addCategoryObject(
    "typeBinding", "getBuildingResponseType", getBuildingResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getDwellingResponseType with content type ELEMENT_ONLY
class getDwellingResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getDwellingResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "getDwellingResponseType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1152, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dwellingsList uses Python identifier dwellingsList
    __dwellingsList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dwellingsList"),
        "dwellingsList",
        "__httpwww_ech_chxmlnseCH_02162_getDwellingResponseType_httpwww_ech_chxmlnseCH_02162dwellingsList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1154, 3),
    )

    dwellingsList = property(__dwellingsList.value, __dwellingsList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getDwellingResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1155, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {__dwellingsList.name(): __dwellingsList, __extension.name(): __extension}
    )
    _AttributeMap.update({})


_module_typeBindings.getDwellingResponseType = getDwellingResponseType
Namespace.addCategoryObject(
    "typeBinding", "getDwellingResponseType", getDwellingResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getBuildingEntranceByIdResponseType with content type ELEMENT_ONLY
class getBuildingEntranceByIdResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getBuildingEntranceByIdResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "getBuildingEntranceByIdResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1158, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}EGID uses Python identifier EGID
    __EGID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        "EGID",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingEntranceByIdResponseType_httpwww_ech_chxmlnseCH_02162EGID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1160, 3),
    )

    EGID = property(__EGID.value, __EGID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntrance uses Python identifier buildingEntrance
    __buildingEntrance = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrance"),
        "buildingEntrance",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingEntranceByIdResponseType_httpwww_ech_chxmlnseCH_02162buildingEntrance",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1161, 3),
    )

    buildingEntrance = property(
        __buildingEntrance.value, __buildingEntrance.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingEntranceByIdResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1162, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingEntranceByIdResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1163, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __EGID.name(): __EGID,
            __buildingEntrance.name(): __buildingEntrance,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getBuildingEntranceByIdResponseType = (
    getBuildingEntranceByIdResponseType
)
Namespace.addCategoryObject(
    "typeBinding",
    "getBuildingEntranceByIdResponseType",
    getBuildingEntranceByIdResponseType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getBuildingEntranceResponseType with content type ELEMENT_ONLY
class getBuildingEntranceResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getBuildingEntranceResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "getBuildingEntranceResponseType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1166, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}buildingEntrancesList uses Python identifier buildingEntrancesList
    __buildingEntrancesList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrancesList"),
        "buildingEntrancesList",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingEntranceResponseType_httpwww_ech_chxmlnseCH_02162buildingEntrancesList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1168, 3),
    )

    buildingEntrancesList = property(
        __buildingEntrancesList.value, __buildingEntrancesList.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getBuildingEntranceResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1169, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __buildingEntrancesList.name(): __buildingEntrancesList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getBuildingEntranceResponseType = getBuildingEntranceResponseType
Namespace.addCategoryObject(
    "typeBinding", "getBuildingEntranceResponseType", getBuildingEntranceResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getMutationResponseType with content type ELEMENT_ONLY
class getMutationResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getMutationResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "getMutationResponseType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1172, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}mutationID uses Python identifier mutationID
    __mutationID = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        "mutationID",
        "__httpwww_ech_chxmlnseCH_02162_getMutationResponseType_httpwww_ech_chxmlnseCH_02162mutationID",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1174, 3),
    )

    mutationID = property(__mutationID.value, __mutationID.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}processed uses Python identifier processed
    __processed = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "processed"),
        "processed",
        "__httpwww_ech_chxmlnseCH_02162_getMutationResponseType_httpwww_ech_chxmlnseCH_02162processed",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1175, 3),
    )

    processed = property(__processed.value, __processed.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getMutationResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1176, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __mutationID.name(): __mutationID,
            __processed.name(): __processed,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getMutationResponseType = getMutationResponseType
Namespace.addCategoryObject(
    "typeBinding", "getMutationResponseType", getMutationResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getStreetResponseType with content type ELEMENT_ONLY
class getStreetResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getStreetResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "getStreetResponseType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1179, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}streetWithoutStreetGeometryType uses Python identifier streetWithoutStreetGeometryType
    __streetWithoutStreetGeometryType = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "streetWithoutStreetGeometryType"),
        "streetWithoutStreetGeometryType",
        "__httpwww_ech_chxmlnseCH_02162_getStreetResponseType_httpwww_ech_chxmlnseCH_02162streetWithoutStreetGeometryType",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1181, 3),
    )

    streetWithoutStreetGeometryType = property(
        __streetWithoutStreetGeometryType.value,
        __streetWithoutStreetGeometryType.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getStreetResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1182, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __streetWithoutStreetGeometryType.name(): __streetWithoutStreetGeometryType,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getStreetResponseType = getStreetResponseType
Namespace.addCategoryObject(
    "typeBinding", "getStreetResponseType", getStreetResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyStreetResponseType with content type ELEMENT_ONLY
class modifyStreetResponseType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}modifyStreetResponseType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "modifyStreetResponseType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1185, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}streetWithoutStreetGeometryType uses Python identifier streetWithoutStreetGeometryType
    __streetWithoutStreetGeometryType = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "streetWithoutStreetGeometryType"),
        "streetWithoutStreetGeometryType",
        "__httpwww_ech_chxmlnseCH_02162_modifyStreetResponseType_httpwww_ech_chxmlnseCH_02162streetWithoutStreetGeometryType",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1187, 3),
    )

    streetWithoutStreetGeometryType = property(
        __streetWithoutStreetGeometryType.value,
        __streetWithoutStreetGeometryType.set,
        None,
        None,
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}errorList uses Python identifier errorList
    __errorList = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        "errorList",
        "__httpwww_ech_chxmlnseCH_02162_modifyStreetResponseType_httpwww_ech_chxmlnseCH_02162errorList",
        True,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1188, 3),
    )

    errorList = property(__errorList.value, __errorList.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_modifyStreetResponseType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1189, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __streetWithoutStreetGeometryType.name(): __streetWithoutStreetGeometryType,
            __errorList.name(): __errorList,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.modifyStreetResponseType = modifyStreetResponseType
Namespace.addCategoryObject(
    "typeBinding", "modifyStreetResponseType", modifyStreetResponseType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}coordinatesBuildingType with content type ELEMENT_ONLY
class coordinatesBuildingType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}coordinatesBuildingType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "coordinatesBuildingType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1192, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}east uses Python identifier east
    __east = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "east"),
        "east",
        "__httpwww_ech_chxmlnseCH_02162_coordinatesBuildingType_httpwww_ech_chxmlnseCH_02162east",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1194, 3),
    )

    east = property(__east.value, __east.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}north uses Python identifier north
    __north = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "north"),
        "north",
        "__httpwww_ech_chxmlnseCH_02162_coordinatesBuildingType_httpwww_ech_chxmlnseCH_02162north",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1195, 3),
    )

    north = property(__north.value, __north.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}originOfCoordinates uses Python identifier originOfCoordinates
    __originOfCoordinates = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "originOfCoordinates"),
        "originOfCoordinates",
        "__httpwww_ech_chxmlnseCH_02162_coordinatesBuildingType_httpwww_ech_chxmlnseCH_02162originOfCoordinates",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1196, 3),
    )

    originOfCoordinates = property(
        __originOfCoordinates.value, __originOfCoordinates.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_coordinatesBuildingType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1197, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __east.name(): __east,
            __north.name(): __north,
            __originOfCoordinates.name(): __originOfCoordinates,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.coordinatesBuildingType = coordinatesBuildingType
Namespace.addCategoryObject(
    "typeBinding", "coordinatesBuildingType", coordinatesBuildingType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingNamedIdType with content type ELEMENT_ONLY
class buildingNamedIdType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}buildingNamedIdType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "buildingNamedIdType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1221, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}IdCategory uses Python identifier IdCategory
    __IdCategory = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "IdCategory"),
        "IdCategory",
        "__httpwww_ech_chxmlnseCH_02162_buildingNamedIdType_httpwww_ech_chxmlnseCH_02162IdCategory",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1223, 3),
    )

    IdCategory = property(__IdCategory.value, __IdCategory.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}Id uses Python identifier Id
    __Id = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "Id"),
        "Id",
        "__httpwww_ech_chxmlnseCH_02162_buildingNamedIdType_httpwww_ech_chxmlnseCH_02162Id",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1237, 3),
    )

    Id = property(__Id.value, __Id.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_buildingNamedIdType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1245, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __IdCategory.name(): __IdCategory,
            __Id.name(): __Id,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.buildingNamedIdType = buildingNamedIdType
Namespace.addCategoryObject("typeBinding", "buildingNamedIdType", buildingNamedIdType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}dwellingNamedIdType with content type ELEMENT_ONLY
class dwellingNamedIdType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}dwellingNamedIdType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "dwellingNamedIdType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1248, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}IdCategory uses Python identifier IdCategory
    __IdCategory = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "IdCategory"),
        "IdCategory",
        "__httpwww_ech_chxmlnseCH_02162_dwellingNamedIdType_httpwww_ech_chxmlnseCH_02162IdCategory",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1250, 3),
    )

    IdCategory = property(__IdCategory.value, __IdCategory.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}Id uses Python identifier Id
    __Id = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "Id"),
        "Id",
        "__httpwww_ech_chxmlnseCH_02162_dwellingNamedIdType_httpwww_ech_chxmlnseCH_02162Id",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1259, 3),
    )

    Id = property(__Id.value, __Id.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_dwellingNamedIdType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1267, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __IdCategory.name(): __IdCategory,
            __Id.name(): __Id,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.dwellingNamedIdType = dwellingNamedIdType
Namespace.addCategoryObject("typeBinding", "dwellingNamedIdType", dwellingNamedIdType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}swissMunicipalityType with content type ELEMENT_ONLY
class swissMunicipalityType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}swissMunicipalityType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "swissMunicipalityType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1270, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}municipalityId uses Python identifier municipalityId
    __municipalityId = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "municipalityId"),
        "municipalityId",
        "__httpwww_ech_chxmlnseCH_02162_swissMunicipalityType_httpwww_ech_chxmlnseCH_02162municipalityId",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1272, 3),
    )

    municipalityId = property(__municipalityId.value, __municipalityId.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}municipalityName uses Python identifier municipalityName
    __municipalityName = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "municipalityName"),
        "municipalityName",
        "__httpwww_ech_chxmlnseCH_02162_swissMunicipalityType_httpwww_ech_chxmlnseCH_02162municipalityName",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1273, 3),
    )

    municipalityName = property(
        __municipalityName.value, __municipalityName.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}cantonAbbreviation uses Python identifier cantonAbbreviation
    __cantonAbbreviation = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "cantonAbbreviation"),
        "cantonAbbreviation",
        "__httpwww_ech_chxmlnseCH_02162_swissMunicipalityType_httpwww_ech_chxmlnseCH_02162cantonAbbreviation",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1274, 3),
    )

    cantonAbbreviation = property(
        __cantonAbbreviation.value, __cantonAbbreviation.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_swissMunicipalityType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1275, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __municipalityId.name(): __municipalityId,
            __municipalityName.name(): __municipalityName,
            __cantonAbbreviation.name(): __cantonAbbreviation,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.swissMunicipalityType = swissMunicipalityType
Namespace.addCategoryObject(
    "typeBinding", "swissMunicipalityType", swissMunicipalityType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}coordinatesEntranceType with content type ELEMENT_ONLY
class coordinatesEntranceType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}coordinatesEntranceType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "coordinatesEntranceType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1278, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}east uses Python identifier east
    __east = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "east"),
        "east",
        "__httpwww_ech_chxmlnseCH_02162_coordinatesEntranceType_httpwww_ech_chxmlnseCH_02162east",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1280, 3),
    )

    east = property(__east.value, __east.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}north uses Python identifier north
    __north = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "north"),
        "north",
        "__httpwww_ech_chxmlnseCH_02162_coordinatesEntranceType_httpwww_ech_chxmlnseCH_02162north",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1281, 3),
    )

    north = property(__north.value, __north.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_coordinatesEntranceType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1282, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __east.name(): __east,
            __north.name(): __north,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.coordinatesEntranceType = coordinatesEntranceType
Namespace.addCategoryObject(
    "typeBinding", "coordinatesEntranceType", coordinatesEntranceType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}entranceNamedIdType with content type ELEMENT_ONLY
class entranceNamedIdType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}entranceNamedIdType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "entranceNamedIdType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1285, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}IdCategory uses Python identifier IdCategory
    __IdCategory = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "IdCategory"),
        "IdCategory",
        "__httpwww_ech_chxmlnseCH_02162_entranceNamedIdType_httpwww_ech_chxmlnseCH_02162IdCategory",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1287, 3),
    )

    IdCategory = property(__IdCategory.value, __IdCategory.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}Id uses Python identifier Id
    __Id = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "Id"),
        "Id",
        "__httpwww_ech_chxmlnseCH_02162_entranceNamedIdType_httpwww_ech_chxmlnseCH_02162Id",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1295, 3),
    )

    Id = property(__Id.value, __Id.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_entranceNamedIdType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1303, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __IdCategory.name(): __IdCategory,
            __Id.name(): __Id,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.entranceNamedIdType = entranceNamedIdType
Namespace.addCategoryObject("typeBinding", "entranceNamedIdType", entranceNamedIdType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectNamedIdType with content type ELEMENT_ONLY
class constructionProjectNamedIdType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}constructionProjectNamedIdType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "constructionProjectNamedIdType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1306, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}IdCategory uses Python identifier IdCategory
    __IdCategory = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "IdCategory"),
        "IdCategory",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectNamedIdType_httpwww_ech_chxmlnseCH_02162IdCategory",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1308, 3),
    )

    IdCategory = property(__IdCategory.value, __IdCategory.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}Id uses Python identifier Id
    __Id = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "Id"),
        "Id",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectNamedIdType_httpwww_ech_chxmlnseCH_02162Id",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1315, 3),
    )

    Id = property(__Id.value, __Id.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_constructionProjectNamedIdType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1323, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __IdCategory.name(): __IdCategory,
            __Id.name(): __Id,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.constructionProjectNamedIdType = constructionProjectNamedIdType
Namespace.addCategoryObject(
    "typeBinding", "constructionProjectNamedIdType", constructionProjectNamedIdType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToRefusedConstructionProjectRequestType with content type ELEMENT_ONLY
class setToRefusedConstructionProjectRequestType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToRefusedConstructionProjectRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "setToRefusedConstructionProjectRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1332, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}authorisationDeniedDate uses Python identifier authorisationDeniedDate
    __authorisationDeniedDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "authorisationDeniedDate"),
        "authorisationDeniedDate",
        "__httpwww_ech_chxmlnseCH_02162_setToRefusedConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162authorisationDeniedDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1334, 3),
    )

    authorisationDeniedDate = property(
        __authorisationDeniedDate.value, __authorisationDeniedDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_setToRefusedConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1335, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __authorisationDeniedDate.name(): __authorisationDeniedDate,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.setToRefusedConstructionProjectRequestType = (
    setToRefusedConstructionProjectRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "setToRefusedConstructionProjectRequestType",
    setToRefusedConstructionProjectRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToCancelledConstructionProjectRequestType with content type ELEMENT_ONLY
class setToCancelledConstructionProjectRequestType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToCancelledConstructionProjectRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "setToCancelledConstructionProjectRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1338, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}cancellationDate uses Python identifier cancellationDate
    __cancellationDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "cancellationDate"),
        "cancellationDate",
        "__httpwww_ech_chxmlnseCH_02162_setToCancelledConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162cancellationDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1340, 3),
    )

    cancellationDate = property(
        __cancellationDate.value, __cancellationDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_setToCancelledConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1341, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {__cancellationDate.name(): __cancellationDate, __extension.name(): __extension}
    )
    _AttributeMap.update({})


_module_typeBindings.setToCancelledConstructionProjectRequestType = (
    setToCancelledConstructionProjectRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "setToCancelledConstructionProjectRequestType",
    setToCancelledConstructionProjectRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToWithdrawnConstructionProjectRequestType with content type ELEMENT_ONLY
class setToWithdrawnConstructionProjectRequestType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToWithdrawnConstructionProjectRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "setToWithdrawnConstructionProjectRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1344, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}withdrawalDate uses Python identifier withdrawalDate
    __withdrawalDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "withdrawalDate"),
        "withdrawalDate",
        "__httpwww_ech_chxmlnseCH_02162_setToWithdrawnConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162withdrawalDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1346, 3),
    )

    withdrawalDate = property(__withdrawalDate.value, __withdrawalDate.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_setToWithdrawnConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1347, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {__withdrawalDate.name(): __withdrawalDate, __extension.name(): __extension}
    )
    _AttributeMap.update({})


_module_typeBindings.setToWithdrawnConstructionProjectRequestType = (
    setToWithdrawnConstructionProjectRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "setToWithdrawnConstructionProjectRequestType",
    setToWithdrawnConstructionProjectRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToSuspendedConstructionProjectRequestType with content type ELEMENT_ONLY
class setToSuspendedConstructionProjectRequestType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToSuspendedConstructionProjectRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "setToSuspendedConstructionProjectRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1350, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}projectSuspensionDate uses Python identifier projectSuspensionDate
    __projectSuspensionDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "projectSuspensionDate"),
        "projectSuspensionDate",
        "__httpwww_ech_chxmlnseCH_02162_setToSuspendedConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162projectSuspensionDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1352, 3),
    )

    projectSuspensionDate = property(
        __projectSuspensionDate.value, __projectSuspensionDate.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_setToSuspendedConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1353, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __projectSuspensionDate.name(): __projectSuspensionDate,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.setToSuspendedConstructionProjectRequestType = (
    setToSuspendedConstructionProjectRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "setToSuspendedConstructionProjectRequestType",
    setToSuspendedConstructionProjectRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToDemolishedBuildingRequestType with content type ELEMENT_ONLY
class setToDemolishedBuildingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToDemolishedBuildingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "setToDemolishedBuildingRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1356, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dateOfDemolition uses Python identifier dateOfDemolition
    __dateOfDemolition = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dateOfDemolition"),
        "dateOfDemolition",
        "__httpwww_ech_chxmlnseCH_02162_setToDemolishedBuildingRequestType_httpwww_ech_chxmlnseCH_02162dateOfDemolition",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1358, 3),
    )

    dateOfDemolition = property(
        __dateOfDemolition.value, __dateOfDemolition.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_setToDemolishedBuildingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1359, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {__dateOfDemolition.name(): __dateOfDemolition, __extension.name(): __extension}
    )
    _AttributeMap.update({})


_module_typeBindings.setToDemolishedBuildingRequestType = (
    setToDemolishedBuildingRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "setToDemolishedBuildingRequestType",
    setToDemolishedBuildingRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToDemolishedDwellingRequestType with content type ELEMENT_ONLY
class setToDemolishedDwellingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}setToDemolishedDwellingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "setToDemolishedDwellingRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1362, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}dateOfDemolition uses Python identifier dateOfDemolition
    __dateOfDemolition = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "dateOfDemolition"),
        "dateOfDemolition",
        "__httpwww_ech_chxmlnseCH_02162_setToDemolishedDwellingRequestType_httpwww_ech_chxmlnseCH_02162dateOfDemolition",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1364, 3),
    )

    dateOfDemolition = property(
        __dateOfDemolition.value, __dateOfDemolition.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_setToDemolishedDwellingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1365, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {__dateOfDemolition.name(): __dateOfDemolition, __extension.name(): __extension}
    )
    _AttributeMap.update({})


_module_typeBindings.setToDemolishedDwellingRequestType = (
    setToDemolishedDwellingRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "setToDemolishedDwellingRequestType",
    setToDemolishedDwellingRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deactivateConstructionProjectRequestType with content type ELEMENT_ONLY
class deactivateConstructionProjectRequestType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deactivateConstructionProjectRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "deactivateConstructionProjectRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1368, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        "reason",
        "__httpwww_ech_chxmlnseCH_02162_deactivateConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162reason",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1370, 3),
    )

    reason = property(__reason.value, __reason.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_deactivateConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1371, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update({__reason.name(): __reason, __extension.name(): __extension})
    _AttributeMap.update({})


_module_typeBindings.deactivateConstructionProjectRequestType = (
    deactivateConstructionProjectRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "deactivateConstructionProjectRequestType",
    deactivateConstructionProjectRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}reactivateConstructionProjectRequestType with content type ELEMENT_ONLY
class reactivateConstructionProjectRequestType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}reactivateConstructionProjectRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "reactivateConstructionProjectRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1374, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        "reason",
        "__httpwww_ech_chxmlnseCH_02162_reactivateConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162reason",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1376, 3),
    )

    reason = property(__reason.value, __reason.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_reactivateConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1377, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update({__reason.name(): __reason, __extension.name(): __extension})
    _AttributeMap.update({})


_module_typeBindings.reactivateConstructionProjectRequestType = (
    reactivateConstructionProjectRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "reactivateConstructionProjectRequestType",
    reactivateConstructionProjectRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deactivateBuildingRequestType with content type ELEMENT_ONLY
class deactivateBuildingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deactivateBuildingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "deactivateBuildingRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1380, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        "reason",
        "__httpwww_ech_chxmlnseCH_02162_deactivateBuildingRequestType_httpwww_ech_chxmlnseCH_02162reason",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1382, 3),
    )

    reason = property(__reason.value, __reason.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_deactivateBuildingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1383, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update({__reason.name(): __reason, __extension.name(): __extension})
    _AttributeMap.update({})


_module_typeBindings.deactivateBuildingRequestType = deactivateBuildingRequestType
Namespace.addCategoryObject(
    "typeBinding", "deactivateBuildingRequestType", deactivateBuildingRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deactivateBuildingEntranceRequestType with content type ELEMENT_ONLY
class deactivateBuildingEntranceRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deactivateBuildingEntranceRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "deactivateBuildingEntranceRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1386, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        "reason",
        "__httpwww_ech_chxmlnseCH_02162_deactivateBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162reason",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1388, 3),
    )

    reason = property(__reason.value, __reason.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_deactivateBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1389, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update({__reason.name(): __reason, __extension.name(): __extension})
    _AttributeMap.update({})


_module_typeBindings.deactivateBuildingEntranceRequestType = (
    deactivateBuildingEntranceRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "deactivateBuildingEntranceRequestType",
    deactivateBuildingEntranceRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}reactivateBuildingRequestType with content type ELEMENT_ONLY
class reactivateBuildingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}reactivateBuildingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "reactivateBuildingRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1392, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        "reason",
        "__httpwww_ech_chxmlnseCH_02162_reactivateBuildingRequestType_httpwww_ech_chxmlnseCH_02162reason",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1394, 3),
    )

    reason = property(__reason.value, __reason.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_reactivateBuildingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1395, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update({__reason.name(): __reason, __extension.name(): __extension})
    _AttributeMap.update({})


_module_typeBindings.reactivateBuildingRequestType = reactivateBuildingRequestType
Namespace.addCategoryObject(
    "typeBinding", "reactivateBuildingRequestType", reactivateBuildingRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}reactivateBuildingEntranceRequestType with content type ELEMENT_ONLY
class reactivateBuildingEntranceRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}reactivateBuildingEntranceRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "reactivateBuildingEntranceRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1398, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        "reason",
        "__httpwww_ech_chxmlnseCH_02162_reactivateBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162reason",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1400, 3),
    )

    reason = property(__reason.value, __reason.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_reactivateBuildingEntranceRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1401, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update({__reason.name(): __reason, __extension.name(): __extension})
    _AttributeMap.update({})


_module_typeBindings.reactivateBuildingEntranceRequestType = (
    reactivateBuildingEntranceRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "reactivateBuildingEntranceRequestType",
    reactivateBuildingEntranceRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deactivateDwellingRequestType with content type ELEMENT_ONLY
class deactivateDwellingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}deactivateDwellingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "deactivateDwellingRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1404, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        "reason",
        "__httpwww_ech_chxmlnseCH_02162_deactivateDwellingRequestType_httpwww_ech_chxmlnseCH_02162reason",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1406, 3),
    )

    reason = property(__reason.value, __reason.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_deactivateDwellingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1407, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update({__reason.name(): __reason, __extension.name(): __extension})
    _AttributeMap.update({})


_module_typeBindings.deactivateDwellingRequestType = deactivateDwellingRequestType
Namespace.addCategoryObject(
    "typeBinding", "deactivateDwellingRequestType", deactivateDwellingRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}reactivateDwellingRequestType with content type ELEMENT_ONLY
class reactivateDwellingRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}reactivateDwellingRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "reactivateDwellingRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1410, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        "reason",
        "__httpwww_ech_chxmlnseCH_02162_reactivateDwellingRequestType_httpwww_ech_chxmlnseCH_02162reason",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1412, 3),
    )

    reason = property(__reason.value, __reason.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_reactivateDwellingRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1413, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update({__reason.name(): __reason, __extension.name(): __extension})
    _AttributeMap.update({})


_module_typeBindings.reactivateDwellingRequestType = reactivateDwellingRequestType
Namespace.addCategoryObject(
    "typeBinding", "reactivateDwellingRequestType", reactivateDwellingRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getArchivedConstructionProjectRequestType with content type ELEMENT_ONLY
class getArchivedConstructionProjectRequestType(
    pyxb.binding.basis.complexTypeDefinition
):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}getArchivedConstructionProjectRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "getArchivedConstructionProjectRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1416, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}constructionSurveyDept uses Python identifier constructionSurveyDept
    __constructionSurveyDept = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        "constructionSurveyDept",
        "__httpwww_ech_chxmlnseCH_02162_getArchivedConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162constructionSurveyDept",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1418, 3),
    )

    constructionSurveyDept = property(
        __constructionSurveyDept.value, __constructionSurveyDept.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}archiveDate uses Python identifier archiveDate
    __archiveDate = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "archiveDate"),
        "archiveDate",
        "__httpwww_ech_chxmlnseCH_02162_getArchivedConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162archiveDate",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1419, 3),
    )

    archiveDate = property(__archiveDate.value, __archiveDate.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_getArchivedConstructionProjectRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1420, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update(
        {
            __constructionSurveyDept.name(): __constructionSurveyDept,
            __archiveDate.name(): __archiveDate,
            __extension.name(): __extension,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.getArchivedConstructionProjectRequestType = (
    getArchivedConstructionProjectRequestType
)
Namespace.addCategoryObject(
    "typeBinding",
    "getArchivedConstructionProjectRequestType",
    getArchivedConstructionProjectRequestType,
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addStreetSectionRequestType with content type ELEMENT_ONLY
class addStreetSectionRequestType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}addStreetSectionRequestType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(
        Namespace, "addStreetSectionRequestType"
    )
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1423, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}locality uses Python identifier locality
    __locality = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        "locality",
        "__httpwww_ech_chxmlnseCH_02162_addStreetSectionRequestType_httpwww_ech_chxmlnseCH_02162locality",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1425, 3),
    )

    locality = property(__locality.value, __locality.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        "extension",
        "__httpwww_ech_chxmlnseCH_02162_addStreetSectionRequestType_httpwww_ech_chxmlnseCH_02162extension",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1426, 3),
    )

    extension = property(__extension.value, __extension.set, None, None)

    _ElementMap.update({__locality.name(): __locality, __extension.name(): __extension})
    _AttributeMap.update({})


_module_typeBindings.addStreetSectionRequestType = addStreetSectionRequestType
Namespace.addCategoryObject(
    "typeBinding", "addStreetSectionRequestType", addStreetSectionRequestType
)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}localityNameType with content type ELEMENT_ONLY
class localityNameType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}localityNameType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "localityNameType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1435, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}nameLong uses Python identifier nameLong
    __nameLong = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "nameLong"),
        "nameLong",
        "__httpwww_ech_chxmlnseCH_02162_localityNameType_httpwww_ech_chxmlnseCH_02162nameLong",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1437, 3),
    )

    nameLong = property(__nameLong.value, __nameLong.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}nameShort uses Python identifier nameShort
    __nameShort = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "nameShort"),
        "nameShort",
        "__httpwww_ech_chxmlnseCH_02162_localityNameType_httpwww_ech_chxmlnseCH_02162nameShort",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1445, 3),
    )

    nameShort = property(__nameShort.value, __nameShort.set, None, None)

    _ElementMap.update({__nameLong.name(): __nameLong, __nameShort.name(): __nameShort})
    _AttributeMap.update({})


_module_typeBindings.localityNameType = localityNameType
Namespace.addCategoryObject("typeBinding", "localityNameType", localityNameType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}localityType with content type ELEMENT_ONLY
class localityType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}localityType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "localityType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1455, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}swissZipCode uses Python identifier swissZipCode
    __swissZipCode = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "swissZipCode"),
        "swissZipCode",
        "__httpwww_ech_chxmlnseCH_02162_localityType_httpwww_ech_chxmlnseCH_02162swissZipCode",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1457, 3),
    )

    swissZipCode = property(__swissZipCode.value, __swissZipCode.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}swissZipCodeAddOn uses Python identifier swissZipCodeAddOn
    __swissZipCodeAddOn = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "swissZipCodeAddOn"),
        "swissZipCodeAddOn",
        "__httpwww_ech_chxmlnseCH_02162_localityType_httpwww_ech_chxmlnseCH_02162swissZipCodeAddOn",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1458, 3),
    )

    swissZipCodeAddOn = property(
        __swissZipCodeAddOn.value, __swissZipCodeAddOn.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "name"),
        "name",
        "__httpwww_ech_chxmlnseCH_02162_localityType_httpwww_ech_chxmlnseCH_02162name",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1459, 3),
    )

    name = property(__name.value, __name.set, None, None)

    _ElementMap.update(
        {
            __swissZipCode.name(): __swissZipCode,
            __swissZipCodeAddOn.name(): __swissZipCodeAddOn,
            __name.name(): __name,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.localityType = localityType
Namespace.addCategoryObject("typeBinding", "localityType", localityType)


# Complex type {http://www.ech.ch/xmlns/eCH-0216/2}streetDescriptionType with content type ELEMENT_ONLY
class streetDescriptionType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.ech.ch/xmlns/eCH-0216/2}streetDescriptionType with content type ELEMENT_ONLY"""

    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, "streetDescriptionType")
    _XSDLocation = pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1462, 1
    )
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}language uses Python identifier language
    __language = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "language"),
        "language",
        "__httpwww_ech_chxmlnseCH_02162_streetDescriptionType_httpwww_ech_chxmlnseCH_02162language",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1464, 3),
    )

    language = property(__language.value, __language.set, None, None)

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}descriptionLong uses Python identifier descriptionLong
    __descriptionLong = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "descriptionLong"),
        "descriptionLong",
        "__httpwww_ech_chxmlnseCH_02162_streetDescriptionType_httpwww_ech_chxmlnseCH_02162descriptionLong",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1465, 3),
    )

    descriptionLong = property(
        __descriptionLong.value, __descriptionLong.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}descriptionShort uses Python identifier descriptionShort
    __descriptionShort = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "descriptionShort"),
        "descriptionShort",
        "__httpwww_ech_chxmlnseCH_02162_streetDescriptionType_httpwww_ech_chxmlnseCH_02162descriptionShort",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1466, 3),
    )

    descriptionShort = property(
        __descriptionShort.value, __descriptionShort.set, None, None
    )

    # Element {http://www.ech.ch/xmlns/eCH-0216/2}descriptionIndex uses Python identifier descriptionIndex
    __descriptionIndex = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, "descriptionIndex"),
        "descriptionIndex",
        "__httpwww_ech_chxmlnseCH_02162_streetDescriptionType_httpwww_ech_chxmlnseCH_02162descriptionIndex",
        False,
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1467, 3),
    )

    descriptionIndex = property(
        __descriptionIndex.value, __descriptionIndex.set, None, None
    )

    _ElementMap.update(
        {
            __language.name(): __language,
            __descriptionLong.name(): __descriptionLong,
            __descriptionShort.name(): __descriptionShort,
            __descriptionIndex.name(): __descriptionIndex,
        }
    )
    _AttributeMap.update({})


_module_typeBindings.streetDescriptionType = streetDescriptionType
Namespace.addCategoryObject(
    "typeBinding", "streetDescriptionType", streetDescriptionType
)


delivery = pyxb.binding.basis.element(
    pyxb.namespace.ExpandedName(Namespace, "delivery"),
    CTD_ANON,
    location=pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 10, 1
    ),
)
Namespace.addCategoryObject("elementBinding", delivery.name().localName(), delivery)

response = pyxb.binding.basis.element(
    pyxb.namespace.ExpandedName(Namespace, "response"),
    CTD_ANON_,
    location=pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 68, 1
    ),
)
Namespace.addCategoryObject("elementBinding", response.name().localName(), response)

receipt = pyxb.binding.basis.element(
    pyxb.namespace.ExpandedName(Namespace, "receipt"),
    receiptType,
    location=pyxb.utils.utility.Location(
        "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 113, 1
    ),
)
Namespace.addCategoryObject("elementBinding", receipt.name().localName(), receipt)


CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "addConstructionProject"),
        addConstructionProjectRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 14, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "setToApprovedConstructionProject"),
        setToApprovedConstructionProjectRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 15, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "setToConstructionStarted"),
        setToConstructionStartedRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 16, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "setToCompletedConstructionProject"),
        setToCompletedConstructionProjectRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 17, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "setToCompletedBuilding"),
        setToCompletedBuildingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 18, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "setToCompletedDwelling"),
        setToCompletedDwellingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 19, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "setMaintenanceCosts"),
        setMaintenanceCostsRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 20, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "modifyConstructionProject"),
        modifyConstructionProjectRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 21, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "bindBuildingToConstructionProject"),
        bindBuildingToConstructionProjectRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 22, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "modifyConstructionSurveyDept"),
        modifyConstructionSurveyDeptRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 23, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "addBuilding"),
        addBuildingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 24, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "modifyBuilding"),
        modifyBuildingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 25, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "addBuildingEntrance"),
        addBuildingEntranceRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 26, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "modifyBuildingEntrance"),
        modifyBuildingEntranceRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 27, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "addDwelling"),
        addDwellingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 28, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "modifyDwelling"),
        modifyDwellingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 29, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reallocateDwelling"),
        reallocateDwellingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 30, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getConstructionProject"),
        getConstructionProjectRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 31, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getDeactivatedConstructionProject"),
        getDeactivatedConstructionProjectRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 32, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getConstructionSurveyDept"),
        getConstructionSurveyDeptRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 33, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getBuilding"),
        getBuildingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 34, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getDeactivatedBuilding"),
        getDeactivatedBuildingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 35, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getDwelling"),
        getDwellingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 36, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getDeactivatedDwelling"),
        getDeactivatedDwellingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 37, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getBuildingEntrance"),
        getBuildingEntranceRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 38, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getMutation"),
        getMutationRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 39, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "addStreet"),
        addStreetRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 40, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "modifyStreet"),
        modifyStreetRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 41, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getStreet"),
        getStreetRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 42, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getDeactivatedStreet"),
        getDeactivatedStreetRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 43, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "modifyStreetName"),
        modifyStreetNameRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 44, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "deleteStreetSection"),
        deleteStreetSectionRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 45, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "addStreetName"),
        addStreetNameRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 46, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "deleteStreetName"),
        deleteStreetNameRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 47, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "setToRefusedConstruction"),
        setToRefusedConstructionProjectRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 48, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "setToCancelledConstruction"),
        setToCancelledConstructionProjectRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 49, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "setToWithdrawnConstruction"),
        setToWithdrawnConstructionProjectRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 50, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "setToSuspendedConstruction"),
        setToSuspendedConstructionProjectRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 51, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "setToDemolishedBuilding"),
        setToDemolishedBuildingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 52, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "setToDemolishedDwelling"),
        setToDemolishedDwellingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 53, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "deactivateConstructionProject"),
        deactivateConstructionProjectRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 54, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reactivateConstructionProject"),
        reactivateConstructionProjectRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 55, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "deactivateBuilding"),
        deactivateBuildingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 56, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "deactivateBuildingEntrance"),
        deactivateBuildingEntranceRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 57, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reactivateBuilding"),
        reactivateBuildingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 58, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reactivateBuildingEntrance"),
        reactivateBuildingEntranceRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 59, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "deactivateDwelling"),
        deactivateDwellingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 60, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reactivateDwelling"),
        reactivateDwellingRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 61, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getArchivedConstructionProject"),
        getArchivedConstructionProjectRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 62, 5
        ),
    )
)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "addStreetSection"),
        addStreetSectionRequestType,
        scope=CTD_ANON,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 63, 5
        ),
    )
)


def _BuildAutomaton():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "addConstructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 14, 5),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "setToApprovedConstructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 15, 5),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "setToConstructionStarted")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 16, 5),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "setToCompletedConstructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 17, 5),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "setToCompletedBuilding")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 18, 5),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "setToCompletedDwelling")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 19, 5),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "setMaintenanceCosts")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 20, 5),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "modifyConstructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 21, 5),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "bindBuildingToConstructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 22, 5),
    )
    st_8 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "modifyConstructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 23, 5),
    )
    st_9 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, "addBuilding")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 24, 5),
    )
    st_10 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, "modifyBuilding")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 25, 5),
    )
    st_11 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "addBuildingEntrance")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 26, 5),
    )
    st_12 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "modifyBuildingEntrance")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 27, 5),
    )
    st_13 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, "addDwelling")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 28, 5),
    )
    st_14 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, "modifyDwelling")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 29, 5),
    )
    st_15 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reallocateDwelling")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 30, 5),
    )
    st_16 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getConstructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 31, 5),
    )
    st_17 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getDeactivatedConstructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 32, 5),
    )
    st_18 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getConstructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 33, 5),
    )
    st_19 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, "getBuilding")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 34, 5),
    )
    st_20 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_20)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getDeactivatedBuilding")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 35, 5),
    )
    st_21 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_21)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, "getDwelling")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 36, 5),
    )
    st_22 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_22)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getDeactivatedDwelling")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 37, 5),
    )
    st_23 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_23)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getBuildingEntrance")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 38, 5),
    )
    st_24 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_24)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, "getMutation")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 39, 5),
    )
    st_25 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_25)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, "addStreet")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 40, 5),
    )
    st_26 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_26)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, "modifyStreet")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 41, 5),
    )
    st_27 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_27)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, "getStreet")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 42, 5),
    )
    st_28 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_28)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getDeactivatedStreet")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 43, 5),
    )
    st_29 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_29)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, "modifyStreetName")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 44, 5),
    )
    st_30 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_30)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "deleteStreetSection")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 45, 5),
    )
    st_31 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_31)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, "addStreetName")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 46, 5),
    )
    st_32 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_32)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, "deleteStreetName")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 47, 5),
    )
    st_33 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_33)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "setToRefusedConstruction")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 48, 5),
    )
    st_34 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_34)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "setToCancelledConstruction")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 49, 5),
    )
    st_35 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_35)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "setToWithdrawnConstruction")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 50, 5),
    )
    st_36 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_36)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "setToSuspendedConstruction")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 51, 5),
    )
    st_37 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_37)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "setToDemolishedBuilding")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 52, 5),
    )
    st_38 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_38)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "setToDemolishedDwelling")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 53, 5),
    )
    st_39 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_39)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "deactivateConstructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 54, 5),
    )
    st_40 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_40)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reactivateConstructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 55, 5),
    )
    st_41 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_41)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "deactivateBuilding")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 56, 5),
    )
    st_42 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_42)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "deactivateBuildingEntrance")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 57, 5),
    )
    st_43 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_43)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reactivateBuilding")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 58, 5),
    )
    st_44 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_44)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reactivateBuildingEntrance")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 59, 5),
    )
    st_45 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_45)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "deactivateDwelling")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 60, 5),
    )
    st_46 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_46)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reactivateDwelling")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 61, 5),
    )
    st_47 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_47)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getArchivedConstructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 62, 5),
    )
    st_48 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_48)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, "addStreetSection")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 63, 5),
    )
    st_49 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_49)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    transitions = []
    st_12._set_transitionSet(transitions)
    transitions = []
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    transitions = []
    st_16._set_transitionSet(transitions)
    transitions = []
    st_17._set_transitionSet(transitions)
    transitions = []
    st_18._set_transitionSet(transitions)
    transitions = []
    st_19._set_transitionSet(transitions)
    transitions = []
    st_20._set_transitionSet(transitions)
    transitions = []
    st_21._set_transitionSet(transitions)
    transitions = []
    st_22._set_transitionSet(transitions)
    transitions = []
    st_23._set_transitionSet(transitions)
    transitions = []
    st_24._set_transitionSet(transitions)
    transitions = []
    st_25._set_transitionSet(transitions)
    transitions = []
    st_26._set_transitionSet(transitions)
    transitions = []
    st_27._set_transitionSet(transitions)
    transitions = []
    st_28._set_transitionSet(transitions)
    transitions = []
    st_29._set_transitionSet(transitions)
    transitions = []
    st_30._set_transitionSet(transitions)
    transitions = []
    st_31._set_transitionSet(transitions)
    transitions = []
    st_32._set_transitionSet(transitions)
    transitions = []
    st_33._set_transitionSet(transitions)
    transitions = []
    st_34._set_transitionSet(transitions)
    transitions = []
    st_35._set_transitionSet(transitions)
    transitions = []
    st_36._set_transitionSet(transitions)
    transitions = []
    st_37._set_transitionSet(transitions)
    transitions = []
    st_38._set_transitionSet(transitions)
    transitions = []
    st_39._set_transitionSet(transitions)
    transitions = []
    st_40._set_transitionSet(transitions)
    transitions = []
    st_41._set_transitionSet(transitions)
    transitions = []
    st_42._set_transitionSet(transitions)
    transitions = []
    st_43._set_transitionSet(transitions)
    transitions = []
    st_44._set_transitionSet(transitions)
    transitions = []
    st_45._set_transitionSet(transitions)
    transitions = []
    st_46._set_transitionSet(transitions)
    transitions = []
    st_47._set_transitionSet(transitions)
    transitions = []
    st_48._set_transitionSet(transitions)
    transitions = []
    st_49._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON._Automaton = _BuildAutomaton()


CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "deliveryHeader"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0058_5_0.headerType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 71, 4
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionProjectCompleteResponse"),
        constructionProjectCompleteResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 73, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionProjectProcessResponse"),
        constructionProjectProcessResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 74, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingProcessResponse"),
        buildingProcessResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 75, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingUnusableResponse"),
        buildingUnusableResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 76, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingCompleteResponse"),
        buildingCompleteResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 77, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwellingProcessResponse"),
        dwellingProcessResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 78, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwellingCompleteResponse"),
        dwellingCompleteResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 79, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwellingUnusableResponse"),
        dwellingUnusableResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 80, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "quarterlySurveyResponse"),
        quarterlySurveyResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 81, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "modifyConstructionProjectResponse"),
        modifyConstructionProjectResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 82, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "bindBuildingToConstructionProjectResponse"
        ),
        bindBuildingToConstructionProjectResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 83, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "deactivateConstructionProjectResponse"),
        deactivateConstructionProjectResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 84, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reactivateConstructionProjectResponse"),
        reactivateConstructionProjectResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 85, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "modifyConstructionSurveyDeptResponse"),
        modifyConstructionSurveyDeptResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 86, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "addBuildingResponse"),
        getByIdAddReactivateBuildingResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 87, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getBuildingByIdResponse"),
        getByIdAddReactivateBuildingResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 88, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reactivateBuildingResponse"),
        getByIdAddReactivateBuildingResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 89, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "modifyBuildingResponse"),
        modifyBuildingResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 90, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "deactivateBuildingResponse"),
        deactivateBuildingResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 91, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "addModifyBuildingEntranceResponse"),
        addModifyBuildingEntranceResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 92, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "deactivateBuildingEntranceResponse"),
        deactivateBuildingEntranceResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 93, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reactivateBuildingEntranceResponse"),
        reactivateBuildingEntranceResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 94, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "addModifyDwellingResponse"),
        addModifyDwellingResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 95, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reactivateReallocateDwellingResponse"),
        reactivateReallocateDwellingResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 96, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "checkConstructionProjectResponse"),
        checkConstructionProjectResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 97, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "checkQuaterlySurveyDeptResponse"),
        checkQuaterlySurveyDeptResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 98, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "checkBuildingResponse"),
        checkBuildingResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 99, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getConstructionProjectResponse"),
        getConstructionProjectResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 100, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getConstructionSurveyDeptResponse"),
        getConstructionSurveyDeptResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 101, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getBuildingResponse"),
        getBuildingResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 102, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getDwellingResponse"),
        getDwellingResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 103, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getBuildingEntranceByIdResponse"),
        getBuildingEntranceByIdResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 104, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getBuildingEntranceResponse"),
        getBuildingEntranceResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 105, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getMutationResponse"),
        getMutationResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 106, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "getStreetResponse"),
        getStreetResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 107, 5
        ),
    )
)

CTD_ANON_._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "modifyStreetResponse"),
        modifyStreetResponseType,
        scope=CTD_ANON_,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 108, 5
        ),
    )
)


def _BuildAutomaton_():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 71, 4
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, "deliveryHeader")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 71, 4),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "constructionProjectCompleteResponse"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 73, 5),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionProjectProcessResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 74, 5),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingProcessResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 75, 5),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingUnusableResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 76, 5),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingCompleteResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 77, 5),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwellingProcessResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 78, 5),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwellingCompleteResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 79, 5),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwellingUnusableResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 80, 5),
    )
    st_8 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "quarterlySurveyResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 81, 5),
    )
    st_9 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "modifyConstructionProjectResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 82, 5),
    )
    st_10 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "bindBuildingToConstructionProjectResponse"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 83, 5),
    )
    st_11 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "deactivateConstructionProjectResponse"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 84, 5),
    )
    st_12 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "reactivateConstructionProjectResponse"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 85, 5),
    )
    st_13 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "modifyConstructionSurveyDeptResponse"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 86, 5),
    )
    st_14 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "addBuildingResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 87, 5),
    )
    st_15 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getBuildingByIdResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 88, 5),
    )
    st_16 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reactivateBuildingResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 89, 5),
    )
    st_17 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "modifyBuildingResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 90, 5),
    )
    st_18 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "deactivateBuildingResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 91, 5),
    )
    st_19 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "addModifyBuildingEntranceResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 92, 5),
    )
    st_20 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_20)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "deactivateBuildingEntranceResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 93, 5),
    )
    st_21 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_21)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reactivateBuildingEntranceResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 94, 5),
    )
    st_22 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_22)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "addModifyDwellingResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 95, 5),
    )
    st_23 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_23)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "reactivateReallocateDwellingResponse"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 96, 5),
    )
    st_24 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_24)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "checkConstructionProjectResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 97, 5),
    )
    st_25 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_25)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "checkQuaterlySurveyDeptResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 98, 5),
    )
    st_26 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_26)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "checkBuildingResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 99, 5),
    )
    st_27 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_27)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getConstructionProjectResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 100, 5),
    )
    st_28 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_28)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getConstructionSurveyDeptResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 101, 5),
    )
    st_29 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_29)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getBuildingResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 102, 5),
    )
    st_30 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_30)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getDwellingResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 103, 5),
    )
    st_31 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_31)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getBuildingEntranceByIdResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 104, 5),
    )
    st_32 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_32)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getBuildingEntranceResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 105, 5),
    )
    st_33 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_33)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getMutationResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 106, 5),
    )
    st_34 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_34)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "getStreetResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 107, 5),
    )
    st_35 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_35)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON_._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "modifyStreetResponse")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 108, 5),
    )
    st_36 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_36)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_31, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_32, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_33, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_34, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_35, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_36, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    transitions = []
    st_12._set_transitionSet(transitions)
    transitions = []
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    transitions = []
    st_16._set_transitionSet(transitions)
    transitions = []
    st_17._set_transitionSet(transitions)
    transitions = []
    st_18._set_transitionSet(transitions)
    transitions = []
    st_19._set_transitionSet(transitions)
    transitions = []
    st_20._set_transitionSet(transitions)
    transitions = []
    st_21._set_transitionSet(transitions)
    transitions = []
    st_22._set_transitionSet(transitions)
    transitions = []
    st_23._set_transitionSet(transitions)
    transitions = []
    st_24._set_transitionSet(transitions)
    transitions = []
    st_25._set_transitionSet(transitions)
    transitions = []
    st_26._set_transitionSet(transitions)
    transitions = []
    st_27._set_transitionSet(transitions)
    transitions = []
    st_28._set_transitionSet(transitions)
    transitions = []
    st_29._set_transitionSet(transitions)
    transitions = []
    st_30._set_transitionSet(transitions)
    transitions = []
    st_31._set_transitionSet(transitions)
    transitions = []
    st_32._set_transitionSet(transitions)
    transitions = []
    st_33._set_transitionSet(transitions)
    transitions = []
    st_34._set_transitionSet(transitions)
    transitions = []
    st_35._set_transitionSet(transitions)
    transitions = []
    st_36._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_._Automaton = _BuildAutomaton_()


plausibilityRuleType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "ruleID"),
        ruleIDType,
        scope=plausibilityRuleType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 199, 3
        ),
    )
)

plausibilityRuleType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "ruleCategory"),
        ruleCategoryType,
        scope=plausibilityRuleType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 200, 3
        ),
    )
)

plausibilityRuleType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "action"),
        actionType,
        scope=plausibilityRuleType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 201, 3
        ),
    )
)

plausibilityRuleType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "messageOfError"),
        ruleTextType,
        scope=plausibilityRuleType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 202, 3
        ),
    )
)

plausibilityRuleType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=plausibilityRuleType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 203, 3
        ),
    )
)


def _BuildAutomaton_2():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 203, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        plausibilityRuleType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "ruleID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 199, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        plausibilityRuleType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "ruleCategory")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 200, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        plausibilityRuleType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "action")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 201, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        plausibilityRuleType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "messageOfError")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 202, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        plausibilityRuleType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 203, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, []))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, True)]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


plausibilityRuleType._Automaton = _BuildAutomaton_2()


receiptType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "code"),
        codeType,
        scope=receiptType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 208, 3
        ),
    )
)

receiptType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "text"),
        ruleTextType,
        scope=receiptType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 209, 3
        ),
    )
)

receiptType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=receiptType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 210, 3
        ),
    )
)


def _BuildAutomaton_3():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 210, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        receiptType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "code")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 208, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        receiptType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "text")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 209, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        receiptType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "extension")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 210, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


receiptType._Automaton = _BuildAutomaton_3()


dateIntervalType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dateFrom"),
        pyxb.binding.datatypes.date,
        scope=dateIntervalType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 215, 3
        ),
    )
)

dateIntervalType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dateTo"),
        pyxb.binding.datatypes.date,
        scope=dateIntervalType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 216, 3
        ),
    )
)


def _BuildAutomaton_4():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        dateIntervalType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "dateFrom")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 215, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        dateIntervalType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "dateTo")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 216, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


dateIntervalType._Automaton = _BuildAutomaton_4()


streetType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "ESID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.ESIDType,
        scope=streetType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 221, 3
        ),
    )
)

streetType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "description"),
        streetDescriptionType,
        scope=streetType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 222, 3
        ),
    )
)

streetType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "isOfficialDescription"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.isOfficialDescriptionType,
        scope=streetType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 223, 3
        ),
    )
)

streetType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "streetStatus"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.streetStatusType,
        scope=streetType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 224, 3
        ),
    )
)

streetType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localisationKind"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.streetKindType,
        scope=streetType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 225, 3
        ),
    )
)

streetType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "streetGeometry"),
        pyxb.binding.datatypes.anyType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=streetType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 226, 3
        ),
    )
)

streetType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "officialStreetNumber"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.officialStreetNumberType,
        scope=streetType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 227, 3
        ),
    )
)

streetType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=streetType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 228, 3
        ),
    )
)


def _BuildAutomaton_5():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 221, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=4,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 222, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 223, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 224, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 225, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 227, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 228, 3
        ),
    )
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        streetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "ESID")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 221, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        streetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "description")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 222, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        streetType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "isOfficialDescription")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 223, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        streetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "streetStatus")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 224, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        streetType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "localisationKind")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 225, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        streetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "streetGeometry")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 226, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        streetType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "officialStreetNumber")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 227, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        streetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "extension")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 228, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, True)]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


streetType._Automaton = _BuildAutomaton_5()


streetWithoutStreetGeometryType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "ESID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.ESIDType,
        scope=streetWithoutStreetGeometryType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 233, 3
        ),
    )
)

streetWithoutStreetGeometryType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "description"),
        streetDescriptionType,
        scope=streetWithoutStreetGeometryType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 234, 3
        ),
    )
)

streetWithoutStreetGeometryType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "isOfficialDescription"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.isOfficialDescriptionType,
        scope=streetWithoutStreetGeometryType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 235, 3
        ),
    )
)

streetWithoutStreetGeometryType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "streetStatus"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.streetStatusType,
        scope=streetWithoutStreetGeometryType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 236, 3
        ),
    )
)

streetWithoutStreetGeometryType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localisationKind"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.streetKindType,
        scope=streetWithoutStreetGeometryType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 237, 3
        ),
    )
)

streetWithoutStreetGeometryType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "officialStreetNumber"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.officialStreetNumberType,
        scope=streetWithoutStreetGeometryType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 238, 3
        ),
    )
)

streetWithoutStreetGeometryType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        localityType,
        scope=streetWithoutStreetGeometryType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 239, 3
        ),
    )
)

streetWithoutStreetGeometryType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=streetWithoutStreetGeometryType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 240, 3
        ),
    )
)


def _BuildAutomaton_6():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 233, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=4,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 234, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 235, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 236, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 237, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 238, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 239, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 240, 3
        ),
    )
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        streetWithoutStreetGeometryType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "ESID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 233, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        streetWithoutStreetGeometryType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "description")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 234, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        streetWithoutStreetGeometryType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "isOfficialDescription")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 235, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        streetWithoutStreetGeometryType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "streetStatus")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 236, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        streetWithoutStreetGeometryType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "localisationKind")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 237, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        streetWithoutStreetGeometryType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "officialStreetNumber")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 238, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        streetWithoutStreetGeometryType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "locality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 239, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(
        streetWithoutStreetGeometryType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 240, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_7, True)]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


streetWithoutStreetGeometryType._Automaton = _BuildAutomaton_6()


dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 245, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EWID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EWIDType,
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 246, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "administrativeDwellingNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.administrativeDwellingNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 247, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "physicalDwellingNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.physicalDwellingNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 248, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "yearOfConstruction"),
        pyxb.binding.datatypes.gYear,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 249, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "yearOfDemolition"),
        pyxb.binding.datatypes.gYear,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 250, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "noOfHabitableRooms"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.noOfHabitableRoomsType,
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 251, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "floor"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.floorType,
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 252, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "multipleFloor"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.multipleFloorType,
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 253, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "locationOfDwellingOnFloor"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.locationOfDwellingOnFloorType,
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 254, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "usageLimitation"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.usageLimitationType,
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 255, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "kitchen"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.kitchenType,
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 256, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfDwelling"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.surfaceAreaOfDwellingType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 257, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwellingStatus"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.dwellingStatusType,
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 258, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwellingUsage"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.dwellingUsageType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 259, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.realestateIdentificationType,
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 260, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwellingFreeText1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 261, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwellingFreeText2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 262, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        dwellingNamedIdType,
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 263, 3
        ),
    )
)

dwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=dwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 264, 3
        ),
    )
)


def _BuildAutomaton_7():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 245, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 246, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 247, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 248, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 249, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 250, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 251, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 252, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 253, 3
        ),
    )
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 254, 3
        ),
    )
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 255, 3
        ),
    )
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 256, 3
        ),
    )
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 257, 3
        ),
    )
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 258, 3
        ),
    )
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 259, 3
        ),
    )
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 260, 3
        ),
    )
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 261, 3
        ),
    )
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 262, 3
        ),
    )
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(
        min=0,
        max=3,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 263, 3
        ),
    )
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 264, 3
        ),
    )
    counters.add(cc_19)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "EGID")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 245, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "EWID")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 246, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "administrativeDwellingNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 247, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "physicalDwellingNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 248, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "yearOfConstruction")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 249, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "yearOfDemolition")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 250, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "noOfHabitableRooms")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 251, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "floor")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 252, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "multipleFloor")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 253, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "locationOfDwellingOnFloor")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 254, 3),
    )
    st_9 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "usageLimitation")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 255, 3),
    )
    st_10 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "kitchen")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 256, 3),
    )
    st_11 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfDwelling")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 257, 3),
    )
    st_12 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwellingStatus")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 258, 3),
    )
    st_13 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwellingUsage")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 259, 3),
    )
    st_14 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "realestateIdentification")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 260, 3),
    )
    st_15 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwellingFreeText1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 261, 3),
    )
    st_16 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwellingFreeText2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 262, 3),
    )
    st_17 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "otherID")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 263, 3),
    )
    st_18 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "extension")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 264, 3),
    )
    st_19 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_19, True)]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


dwellingType._Automaton = _BuildAutomaton_7()


dwellingsListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=dwellingsListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 269, 3
        ),
    )
)

dwellingsListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EDIDType,
        scope=dwellingsListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 270, 3
        ),
    )
)

dwellingsListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EWID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EWIDType,
        scope=dwellingsListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 271, 3
        ),
    )
)

dwellingsListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=dwellingsListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 272, 3
        ),
    )
)


def _BuildAutomaton_8():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 269, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 270, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 271, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 272, 3
        ),
    )
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingsListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "EGID")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 269, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingsListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "EDID")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 270, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingsListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "EWID")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 271, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingsListType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 272, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


dwellingsListType._Automaton = _BuildAutomaton_8()


setToCompletedDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "administrativeDwellingNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.administrativeDwellingNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 277, 3
        ),
    )
)

setToCompletedDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "physicalDwellingNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.physicalDwellingNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 278, 3
        ),
    )
)

setToCompletedDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "yearOfConstruction"),
        pyxb.binding.datatypes.gYear,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 279, 3
        ),
    )
)

setToCompletedDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "noOfHabitableRooms"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.noOfHabitableRoomsType,
        scope=setToCompletedDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 280, 3
        ),
    )
)

setToCompletedDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "floor"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.floorType,
        scope=setToCompletedDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 281, 3
        ),
    )
)

setToCompletedDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "multipleFloor"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.multipleFloorType,
        scope=setToCompletedDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 282, 3
        ),
    )
)

setToCompletedDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "locationOfDwellingOnFloor"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.locationOfDwellingOnFloorType,
        scope=setToCompletedDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 283, 3
        ),
    )
)

setToCompletedDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "usageLimitation"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.usageLimitationType,
        scope=setToCompletedDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 284, 3
        ),
    )
)

setToCompletedDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "kitchen"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.kitchenType,
        scope=setToCompletedDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 285, 3
        ),
    )
)

setToCompletedDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfDwelling"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.surfaceAreaOfDwellingType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 286, 3
        ),
    )
)

setToCompletedDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwellingUsage"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.dwellingUsageType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 287, 3
        ),
    )
)

setToCompletedDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.realestateIdentificationType,
        scope=setToCompletedDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 288, 3
        ),
    )
)

setToCompletedDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwellingFreeText1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 289, 3
        ),
    )
)

setToCompletedDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwellingFreeText2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 290, 3
        ),
    )
)

setToCompletedDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        dwellingNamedIdType,
        scope=setToCompletedDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 291, 3
        ),
    )
)

setToCompletedDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=setToCompletedDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 292, 3
        ),
    )
)


def _BuildAutomaton_9():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 277, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 278, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 279, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 280, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 281, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 282, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 283, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 284, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 285, 3
        ),
    )
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 286, 3
        ),
    )
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 287, 3
        ),
    )
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 288, 3
        ),
    )
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 289, 3
        ),
    )
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 290, 3
        ),
    )
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(
        min=0,
        max=3,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 291, 3
        ),
    )
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 292, 3
        ),
    )
    counters.add(cc_15)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "administrativeDwellingNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 277, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "physicalDwellingNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 278, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "yearOfConstruction")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 279, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "noOfHabitableRooms")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 280, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "floor")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 281, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "multipleFloor")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 282, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "locationOfDwellingOnFloor")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 283, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "usageLimitation")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 284, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "kitchen")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 285, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfDwelling")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 286, 3),
    )
    st_9 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwellingUsage")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 287, 3),
    )
    st_10 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "realestateIdentification")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 288, 3),
    )
    st_11 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwellingFreeText1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 289, 3),
    )
    st_12 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwellingFreeText2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 290, 3),
    )
    st_13 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "otherID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 291, 3),
    )
    st_14 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 292, 3),
    )
    st_15 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_15, True)]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


setToCompletedDwellingType._Automaton = _BuildAutomaton_9()


buildingEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=buildingEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 297, 3
        ),
    )
)

buildingEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EDIDType,
        scope=buildingEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 298, 3
        ),
    )
)

buildingEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGAID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGAIDType,
        scope=buildingEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 299, 3
        ),
    )
)

buildingEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntranceNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingEntranceNoType,
        scope=buildingEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 300, 3
        ),
    )
)

buildingEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "coordinates"),
        coordinatesEntranceType,
        scope=buildingEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 301, 3
        ),
    )
)

buildingEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "isOfficialAddress"),
        pyxb.binding.datatypes.boolean,
        scope=buildingEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 302, 3
        ),
    )
)

buildingEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "street"),
        streetType,
        scope=buildingEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 303, 3
        ),
    )
)

buildingEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        localityType,
        scope=buildingEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 304, 3
        ),
    )
)

buildingEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        entranceNamedIdType,
        scope=buildingEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 305, 3
        ),
    )
)

buildingEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=buildingEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 306, 3
        ),
    )
)

buildingEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwelling"),
        dwellingType,
        scope=buildingEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 307, 3
        ),
    )
)


def _BuildAutomaton_10():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 297, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 298, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 299, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 300, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 301, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 302, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 303, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 304, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=2,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 305, 3
        ),
    )
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 306, 3
        ),
    )
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(
        min=0,
        max=99,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 307, 3
        ),
    )
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 297, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EDID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 298, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGAID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 299, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingEntranceNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 300, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "coordinates")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 301, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "isOfficialAddress")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 302, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "street")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 303, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "locality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 304, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "otherID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 305, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 306, 3),
    )
    st_9 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwelling")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 307, 3),
    )
    st_10 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_10, True)]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


buildingEntranceWithDwellingType._Automaton = _BuildAutomaton_10()


buildingEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=buildingEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 312, 3
        ),
    )
)

buildingEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EDIDType,
        scope=buildingEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 313, 3
        ),
    )
)

buildingEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGAID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGAIDType,
        scope=buildingEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 314, 3
        ),
    )
)

buildingEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntranceNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingEntranceNoType,
        scope=buildingEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 315, 3
        ),
    )
)

buildingEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "coordinates"),
        coordinatesEntranceType,
        scope=buildingEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 316, 3
        ),
    )
)

buildingEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "isOfficialAddress"),
        pyxb.binding.datatypes.boolean,
        scope=buildingEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 317, 3
        ),
    )
)

buildingEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "street"),
        streetType,
        scope=buildingEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 318, 3
        ),
    )
)

buildingEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        localityType,
        scope=buildingEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 319, 3
        ),
    )
)

buildingEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        entranceNamedIdType,
        scope=buildingEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 320, 3
        ),
    )
)

buildingEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=buildingEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 321, 3
        ),
    )
)


def _BuildAutomaton_11():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 312, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 313, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 314, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 315, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 316, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 317, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 318, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 319, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=2,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 320, 3
        ),
    )
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 321, 3
        ),
    )
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "EGID")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 312, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "EDID")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 313, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGAID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 314, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingEntranceNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 315, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "coordinates")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 316, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "isOfficialAddress")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 317, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "street")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 318, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "locality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 319, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "otherID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 320, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 321, 3),
    )
    st_9 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_9, True)]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


buildingEntranceType._Automaton = _BuildAutomaton_11()


buildingEntrancesListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=buildingEntrancesListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 326, 3
        ),
    )
)

buildingEntrancesListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrance"),
        buildingEntranceType,
        scope=buildingEntrancesListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 327, 3
        ),
    )
)

buildingEntrancesListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=buildingEntrancesListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 328, 3
        ),
    )
)


def _BuildAutomaton_12():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=1,
        max=99,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 327, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 328, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingEntrancesListType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 326, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntrancesListType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingEntrance")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 327, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingEntrancesListType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 328, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


buildingEntrancesListType._Automaton = _BuildAutomaton_12()


buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 333, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0007_6_0.municipalityIdType,
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 334, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.officialBuildingNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 335, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "nameOfBuilding"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.nameOfBuildingType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 336, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "coordinates"),
        coordinatesBuildingType,
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 337, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.realestateIdentificationType,
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 338, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localCode1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.localCodeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 339, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localCode2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.localCodeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 340, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localCode3"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.localCodeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 341, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localCode4"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.localCodeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 342, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "neighbourhood"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.neighbourhoodType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 343, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingStatus"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingStatusType,
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 344, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingCategory"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingCategoryType,
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 345, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingClass"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingClassType,
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 346, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 347, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "yearOfDemolition"),
        pyxb.binding.datatypes.gYear,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 348, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfBuilding"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.surfaceAreaOfBuildingType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 349, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "volume"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingVolumeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 350, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "numberOfFloors"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.numberOfFloorsType,
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 351, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "numberOfSeparateHabitableRooms"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.numberOfSeparateHabitableRoomsType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 352, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "civilDefenseShelter"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 353, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "energyRelevantSurface"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.energyRelevantSurfaceType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 354, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.heatingType,
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 355, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.heatingType,
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 356, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.hotWaterType,
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 357, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.hotWaterType,
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 358, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingFreeText1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 359, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingFreeText2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 360, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        buildingNamedIdType,
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 361, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 362, 3
        ),
    )
)

buildingWithEntranceWithDwellingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrance"),
        buildingEntranceWithDwellingType,
        scope=buildingWithEntranceWithDwellingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 363, 3
        ),
    )
)


def _BuildAutomaton_13():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 333, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 334, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 335, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 336, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 337, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=5,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 338, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 339, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 340, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 341, 3
        ),
    )
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 342, 3
        ),
    )
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 343, 3
        ),
    )
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 344, 3
        ),
    )
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 345, 3
        ),
    )
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 346, 3
        ),
    )
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 347, 3
        ),
    )
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 348, 3
        ),
    )
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 349, 3
        ),
    )
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 350, 3
        ),
    )
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 351, 3
        ),
    )
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 352, 3
        ),
    )
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 353, 3
        ),
    )
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 354, 3
        ),
    )
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 355, 3
        ),
    )
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 356, 3
        ),
    )
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 357, 3
        ),
    )
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 358, 3
        ),
    )
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 359, 3
        ),
    )
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 360, 3
        ),
    )
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(
        min=0,
        max=8,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 361, 3
        ),
    )
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 362, 3
        ),
    )
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(
        min=1,
        max=99,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 363, 3
        ),
    )
    counters.add(cc_30)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 333, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "municipality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 334, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 335, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "nameOfBuilding")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 336, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "coordinates")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 337, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "realestateIdentification")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 338, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "localCode1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 339, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "localCode2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 340, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "localCode3")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 341, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "localCode4")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 342, 3),
    )
    st_9 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "neighbourhood")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 343, 3),
    )
    st_10 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingStatus")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 344, 3),
    )
    st_11 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingCategory")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 345, 3),
    )
    st_12 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingClass")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 346, 3),
    )
    st_13 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 347, 3),
    )
    st_14 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "yearOfDemolition")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 348, 3),
    )
    st_15 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfBuilding")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 349, 3),
    )
    st_16 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "volume")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 350, 3),
    )
    st_17 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "numberOfFloors")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 351, 3),
    )
    st_18 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "numberOfSeparateHabitableRooms")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 352, 3),
    )
    st_19 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "civilDefenseShelter")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 353, 3),
    )
    st_20 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "energyRelevantSurface")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 354, 3),
    )
    st_21 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 355, 3),
    )
    st_22 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 356, 3),
    )
    st_23 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_23)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 357, 3),
    )
    st_24 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_24)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 358, 3),
    )
    st_25 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_25)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingFreeText1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 359, 3),
    )
    st_26 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_26)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingFreeText2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 360, 3),
    )
    st_27 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_27)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "otherID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 361, 3),
    )
    st_28 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_28)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 362, 3),
    )
    st_29 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceWithDwellingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingEntrance")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 363, 3),
    )
    st_30 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_30)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_19, True)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_19, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_20, True)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_20, False)]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_21, True)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_21, False)]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_22, True)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_22, False)]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_23, True)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_23, False)]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_24, True)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_24, False)]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_25, True)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_25, False)]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_26, True)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_26, False)]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_27, True)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_27, False)]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_28, True)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_28, False)]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_29, True)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_29, False)]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_30, True)]))
    st_30._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


buildingWithEntranceWithDwellingType._Automaton = _BuildAutomaton_13()


buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 368, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0007_6_0.municipalityIdType,
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 369, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.officialBuildingNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 370, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "nameOfBuilding"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.nameOfBuildingType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 371, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "coordinates"),
        coordinatesBuildingType,
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 372, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.realestateIdentificationType,
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 373, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localCode1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.localCodeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 374, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localCode2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.localCodeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 375, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localCode3"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.localCodeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 376, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localCode4"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.localCodeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 377, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "neighbourhood"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.neighbourhoodType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 378, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingStatus"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingStatusType,
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 379, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingCategory"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingCategoryType,
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 380, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingClass"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingClassType,
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 381, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 382, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "yearOfDemolition"),
        pyxb.binding.datatypes.gYear,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 383, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfBuilding"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.surfaceAreaOfBuildingType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 384, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "volume"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingVolumeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 385, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "numberOfFloors"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.numberOfFloorsType,
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 386, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "numberOfSeparateHabitableRooms"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.numberOfSeparateHabitableRoomsType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 387, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "civilDefenseShelter"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 388, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "energyRelevantSurface"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.energyRelevantSurfaceType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 389, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.heatingType,
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 390, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.heatingType,
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 391, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.hotWaterType,
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 392, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.hotWaterType,
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 393, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingFreeText1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 394, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingFreeText2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 395, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        buildingNamedIdType,
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 396, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 397, 3
        ),
    )
)

buildingWithEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrance"),
        buildingEntranceType,
        scope=buildingWithEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 398, 3
        ),
    )
)


def _BuildAutomaton_14():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 368, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 369, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 370, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 371, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 372, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=5,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 373, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 374, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 375, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 376, 3
        ),
    )
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 377, 3
        ),
    )
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 378, 3
        ),
    )
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 379, 3
        ),
    )
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 380, 3
        ),
    )
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 381, 3
        ),
    )
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 382, 3
        ),
    )
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 383, 3
        ),
    )
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 384, 3
        ),
    )
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 385, 3
        ),
    )
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 386, 3
        ),
    )
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 387, 3
        ),
    )
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 388, 3
        ),
    )
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 389, 3
        ),
    )
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 390, 3
        ),
    )
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 391, 3
        ),
    )
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 392, 3
        ),
    )
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 393, 3
        ),
    )
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 394, 3
        ),
    )
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 395, 3
        ),
    )
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(
        min=0,
        max=8,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 396, 3
        ),
    )
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 397, 3
        ),
    )
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(
        min=1,
        max=99,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 398, 3
        ),
    )
    counters.add(cc_30)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 368, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "municipality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 369, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 370, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "nameOfBuilding")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 371, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "coordinates")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 372, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "realestateIdentification")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 373, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "localCode1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 374, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "localCode2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 375, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "localCode3")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 376, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "localCode4")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 377, 3),
    )
    st_9 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "neighbourhood")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 378, 3),
    )
    st_10 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingStatus")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 379, 3),
    )
    st_11 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingCategory")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 380, 3),
    )
    st_12 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingClass")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 381, 3),
    )
    st_13 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 382, 3),
    )
    st_14 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "yearOfDemolition")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 383, 3),
    )
    st_15 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfBuilding")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 384, 3),
    )
    st_16 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "volume")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 385, 3),
    )
    st_17 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "numberOfFloors")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 386, 3),
    )
    st_18 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "numberOfSeparateHabitableRooms")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 387, 3),
    )
    st_19 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "civilDefenseShelter")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 388, 3),
    )
    st_20 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "energyRelevantSurface")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 389, 3),
    )
    st_21 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 390, 3),
    )
    st_22 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 391, 3),
    )
    st_23 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_23)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 392, 3),
    )
    st_24 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_24)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 393, 3),
    )
    st_25 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_25)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingFreeText1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 394, 3),
    )
    st_26 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_26)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingFreeText2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 395, 3),
    )
    st_27 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_27)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "otherID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 396, 3),
    )
    st_28 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_28)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 397, 3),
    )
    st_29 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingWithEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingEntrance")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 398, 3),
    )
    st_30 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_30)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_19, True)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_19, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_20, True)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_20, False)]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_21, True)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_21, False)]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_22, True)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_22, False)]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_23, True)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_23, False)]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_24, True)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_24, False)]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_25, True)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_25, False)]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_26, True)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_26, False)]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_27, True)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_27, False)]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_28, True)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_28, False)]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_29, True)]))
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_29, False)]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [fac.UpdateInstruction(cc_30, True)]))
    st_30._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


buildingWithEntranceType._Automaton = _BuildAutomaton_14()


buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 403, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0007_6_0.municipalityIdType,
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 404, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.officialBuildingNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 405, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "nameOfBuilding"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.nameOfBuildingType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 406, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "coordinates"),
        coordinatesBuildingType,
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 407, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.realestateIdentificationType,
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 408, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localCode1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.localCodeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 409, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localCode2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.localCodeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 410, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localCode3"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.localCodeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 411, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localCode4"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.localCodeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 412, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "neighbourhood"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.neighbourhoodType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 413, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingStatus"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingStatusType,
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 414, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingCategory"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingCategoryType,
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 415, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingClass"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingClassType,
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 416, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 417, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "yearOfDemolition"),
        pyxb.binding.datatypes.gYear,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 418, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfBuilding"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.surfaceAreaOfBuildingType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 419, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "volume"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingVolumeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 420, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "numberOfFloors"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.numberOfFloorsType,
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 421, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "numberOfSeparateHabitableRooms"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.numberOfSeparateHabitableRoomsType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 422, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "civilDefenseShelter"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 423, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "energyRelevantSurface"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.energyRelevantSurfaceType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 424, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.heatingType,
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 425, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.heatingType,
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 426, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.hotWaterType,
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 427, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.hotWaterType,
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 428, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingFreeText1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 429, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingFreeText2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 430, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        buildingNamedIdType,
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 431, 3
        ),
    )
)

buildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=buildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 432, 3
        ),
    )
)


def _BuildAutomaton_15():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 403, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 404, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 405, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 406, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 407, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=5,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 408, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 409, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 410, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 411, 3
        ),
    )
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 412, 3
        ),
    )
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 413, 3
        ),
    )
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 414, 3
        ),
    )
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 415, 3
        ),
    )
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 416, 3
        ),
    )
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 417, 3
        ),
    )
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 418, 3
        ),
    )
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 419, 3
        ),
    )
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 420, 3
        ),
    )
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 421, 3
        ),
    )
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 422, 3
        ),
    )
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 423, 3
        ),
    )
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 424, 3
        ),
    )
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 425, 3
        ),
    )
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 426, 3
        ),
    )
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 427, 3
        ),
    )
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 428, 3
        ),
    )
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 429, 3
        ),
    )
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 430, 3
        ),
    )
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(
        min=0,
        max=8,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 431, 3
        ),
    )
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 432, 3
        ),
    )
    counters.add(cc_29)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "EGID")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 403, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "municipality")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 404, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 405, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "nameOfBuilding")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 406, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "coordinates")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 407, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "realestateIdentification")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 408, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "localCode1")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 409, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "localCode2")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 410, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "localCode3")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 411, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "localCode4")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 412, 3),
    )
    st_9 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "neighbourhood")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 413, 3),
    )
    st_10 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingStatus")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 414, 3),
    )
    st_11 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingCategory")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 415, 3),
    )
    st_12 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingClass")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 416, 3),
    )
    st_13 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 417, 3),
    )
    st_14 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "yearOfDemolition")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 418, 3),
    )
    st_15 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfBuilding")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 419, 3),
    )
    st_16 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "volume")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 420, 3),
    )
    st_17 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "numberOfFloors")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 421, 3),
    )
    st_18 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "numberOfSeparateHabitableRooms")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 422, 3),
    )
    st_19 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "civilDefenseShelter")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 423, 3),
    )
    st_20 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "energyRelevantSurface")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 424, 3),
    )
    st_21 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 425, 3),
    )
    st_22 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 426, 3),
    )
    st_23 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 427, 3),
    )
    st_24 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 428, 3),
    )
    st_25 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingFreeText1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 429, 3),
    )
    st_26 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingFreeText2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 430, 3),
    )
    st_27 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "otherID")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 431, 3),
    )
    st_28 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "extension")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 432, 3),
    )
    st_29 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_29)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_19, True)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_19, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_20, True)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_20, False)]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_21, True)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_21, False)]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_22, True)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_22, False)]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_23, True)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_23, False)]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_24, True)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_24, False)]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_25, True)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_25, False)]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_26, True)]))
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_26, False)]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [fac.UpdateInstruction(cc_27, True)]))
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_27, False)]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [fac.UpdateInstruction(cc_28, True)]))
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_28, False)]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [fac.UpdateInstruction(cc_29, True)]))
    st_29._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


buildingType._Automaton = _BuildAutomaton_15()


buildingsListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=buildingsListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 437, 3
        ),
    )
)

buildingsListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.realestateIdentificationType,
        scope=buildingsListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 438, 3
        ),
    )
)

buildingsListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.officialBuildingNoType,
        scope=buildingsListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 439, 3
        ),
    )
)

buildingsListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingDateType,
        scope=buildingsListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 440, 3
        ),
    )
)

buildingsListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrance"),
        buildingEntranceType,
        scope=buildingsListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 441, 3
        ),
    )
)

buildingsListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=buildingsListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 442, 3
        ),
    )
)


def _BuildAutomaton_16():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=5,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 438, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 439, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 440, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=99,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 441, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 442, 3
        ),
    )
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        buildingsListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "EGID")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 437, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingsListType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "realestateIdentification")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 438, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingsListType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 439, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingsListType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 440, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingsListType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingEntrance")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 441, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingsListType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 442, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, True)]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


buildingsListType._Automaton = _BuildAutomaton_16()


setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0007_6_0.municipalityIdType,
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 447, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.officialBuildingNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 448, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "nameOfBuilding"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.nameOfBuildingType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 449, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "coordinates"),
        coordinatesBuildingType,
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 450, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.realestateIdentificationType,
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 451, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localCode1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.localCodeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 452, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localCode2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.localCodeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 453, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localCode3"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.localCodeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 454, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localCode4"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.localCodeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 455, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "neighbourhood"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.neighbourhoodType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 456, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingCategory"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingCategoryType,
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 457, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingClass"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingClassType,
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 458, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 459, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfBuilding"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.surfaceAreaOfBuildingType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 460, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "volume"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingVolumeType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 461, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "numberOfFloors"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.numberOfFloorsType,
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 462, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "numberOfSeparateHabitableRooms"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.numberOfSeparateHabitableRoomsType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 463, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "civilDefenseShelter"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 464, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "energyRelevantSurface"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.energyRelevantSurfaceType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 465, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.heatingType,
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 466, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.heatingType,
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 467, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.hotWaterType,
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 468, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.hotWaterType,
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 469, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingFreeText1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 470, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingFreeText2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 471, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        buildingNamedIdType,
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 472, 3
        ),
    )
)

setToCompletedBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=setToCompletedBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 473, 3
        ),
    )
)


def _BuildAutomaton_17():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 447, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 448, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 449, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 450, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=5,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 451, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 452, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 453, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 454, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 455, 3
        ),
    )
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 456, 3
        ),
    )
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 457, 3
        ),
    )
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 458, 3
        ),
    )
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 459, 3
        ),
    )
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 460, 3
        ),
    )
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 461, 3
        ),
    )
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 462, 3
        ),
    )
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 463, 3
        ),
    )
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 464, 3
        ),
    )
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 465, 3
        ),
    )
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 466, 3
        ),
    )
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 467, 3
        ),
    )
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 468, 3
        ),
    )
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 469, 3
        ),
    )
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 470, 3
        ),
    )
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 471, 3
        ),
    )
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(
        min=0,
        max=8,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 472, 3
        ),
    )
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 473, 3
        ),
    )
    counters.add(cc_26)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "municipality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 447, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 448, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "nameOfBuilding")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 449, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "coordinates")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 450, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "realestateIdentification")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 451, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "localCode1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 452, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "localCode2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 453, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "localCode3")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 454, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "localCode4")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 455, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "neighbourhood")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 456, 3),
    )
    st_9 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingCategory")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 457, 3),
    )
    st_10 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingClass")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 458, 3),
    )
    st_11 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 459, 3),
    )
    st_12 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "surfaceAreaOfBuilding")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 460, 3),
    )
    st_13 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "volume")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 461, 3),
    )
    st_14 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "numberOfFloors")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 462, 3),
    )
    st_15 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "numberOfSeparateHabitableRooms")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 463, 3),
    )
    st_16 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "civilDefenseShelter")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 464, 3),
    )
    st_17 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "energyRelevantSurface")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 465, 3),
    )
    st_18 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 466, 3),
    )
    st_19 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForHeating2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 467, 3),
    )
    st_20 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 468, 3),
    )
    st_21 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermotechnicalDeviceForWarmWater2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 469, 3),
    )
    st_22 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingFreeText1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 470, 3),
    )
    st_23 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingFreeText2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 471, 3),
    )
    st_24 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "otherID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 472, 3),
    )
    st_25 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 473, 3),
    )
    st_26 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_26)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_19, True)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_19, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_20, True)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_20, False)]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_21, True)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_21, False)]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_22, True)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_22, False)]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_23, True)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_23, False)]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_24, True)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_24, False)]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_25, True)]))
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_25, False)]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [fac.UpdateInstruction(cc_26, True)]))
    st_26._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


setToCompletedBuildingType._Automaton = _BuildAutomaton_17()


kindOfConstructionWorkWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "kindOfWork"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.kindOfWorkType,
        scope=kindOfConstructionWorkWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 478, 3
        ),
    )
)

kindOfConstructionWorkWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "ARBID"),
        ARBIDType,
        scope=kindOfConstructionWorkWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 479, 3
        ),
    )
)

kindOfConstructionWorkWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "energeticRestauration"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 480, 3
        ),
    )
)

kindOfConstructionWorkWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "renovationHeatingsystem"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 481, 3
        ),
    )
)

kindOfConstructionWorkWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "innerConversionRenovation"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 482, 3
        ),
    )
)

kindOfConstructionWorkWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "conversion"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 483, 3
        ),
    )
)

kindOfConstructionWorkWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningHeated"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 484, 3
        ),
    )
)

kindOfConstructionWorkWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningNotHeated"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 485, 3
        ),
    )
)

kindOfConstructionWorkWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermicSolarFacility"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 486, 3
        ),
    )
)

kindOfConstructionWorkWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "photovoltaicSolarFacility"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 487, 3
        ),
    )
)

kindOfConstructionWorkWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "otherWorks"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 488, 3
        ),
    )
)

kindOfConstructionWorkWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=kindOfConstructionWorkWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 489, 3
        ),
    )
)

kindOfConstructionWorkWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "building"),
        buildingWithEntranceWithDwellingType,
        scope=kindOfConstructionWorkWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 490, 3
        ),
    )
)


def _BuildAutomaton_18():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 478, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 479, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 480, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 481, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 482, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 483, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 484, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 485, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 486, 3
        ),
    )
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 487, 3
        ),
    )
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 488, 3
        ),
    )
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 489, 3
        ),
    )
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 490, 3
        ),
    )
    counters.add(cc_12)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "kindOfWork")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 478, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "ARBID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 479, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "energeticRestauration")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 480, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "renovationHeatingsystem")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 481, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "innerConversionRenovation")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 482, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "conversion")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 483, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningHeated")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 484, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningNotHeated")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 485, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermicSolarFacility")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 486, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "photovoltaicSolarFacility")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 487, 3),
    )
    st_9 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "otherWorks")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 488, 3),
    )
    st_10 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 489, 3),
    )
    st_11 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "building")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 490, 3),
    )
    st_12 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_12, True)]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


kindOfConstructionWorkWithBuildingType._Automaton = _BuildAutomaton_18()


kindOfConstructionWorkType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "kindOfWork"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.kindOfWorkType,
        scope=kindOfConstructionWorkType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 495, 3
        ),
    )
)

kindOfConstructionWorkType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "ARBID"),
        ARBIDType,
        scope=kindOfConstructionWorkType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 496, 3
        ),
    )
)

kindOfConstructionWorkType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "energeticRestauration"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 497, 3
        ),
    )
)

kindOfConstructionWorkType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "renovationHeatingsystem"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 498, 3
        ),
    )
)

kindOfConstructionWorkType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "innerConversionRenovation"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 499, 3
        ),
    )
)

kindOfConstructionWorkType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "conversion"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 500, 3
        ),
    )
)

kindOfConstructionWorkType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningHeated"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 501, 3
        ),
    )
)

kindOfConstructionWorkType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningNotHeated"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 502, 3
        ),
    )
)

kindOfConstructionWorkType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermicSolarFacility"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 503, 3
        ),
    )
)

kindOfConstructionWorkType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "photovoltaicSolarFacility"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 504, 3
        ),
    )
)

kindOfConstructionWorkType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "otherWorks"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=kindOfConstructionWorkType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 505, 3
        ),
    )
)

kindOfConstructionWorkType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=kindOfConstructionWorkType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 506, 3
        ),
    )
)


def _BuildAutomaton_19():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 495, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 496, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 497, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 498, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 499, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 500, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 501, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 502, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 503, 3
        ),
    )
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 504, 3
        ),
    )
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 505, 3
        ),
    )
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 506, 3
        ),
    )
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "kindOfWork")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 495, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "ARBID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 496, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "energeticRestauration")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 497, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "renovationHeatingsystem")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 498, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "innerConversionRenovation")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 499, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "conversion")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 500, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningHeated")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 501, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningNotHeated")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 502, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermicSolarFacility")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 503, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "photovoltaicSolarFacility")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 504, 3),
    )
    st_9 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "otherWorks")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 505, 3),
    )
    st_10 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(
        kindOfConstructionWorkType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 506, 3),
    )
    st_11 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_11, True)]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


kindOfConstructionWorkType._Automaton = _BuildAutomaton_19()


constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EPROIDType,
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 511, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "officialConstructionProjectFileNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.officialConstructionProjectFileNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 512, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "extensionOfOfficialConstructionProjectFileNo"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.extensionOfOfficialConstructionProjectFileNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 513, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        constructionSurveyDeptType,
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 514, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionProjectDescription"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.constructionProjectDescriptionType,
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 515, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionLocalisation"),
        swissMunicipalityType,
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 516, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.realestateIdentificationType,
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 517, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "typeOfPermit"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.typeOfPermitType,
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 518, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "typeOfClient"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.typeOfClientType,
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 519, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "client"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.personType,
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 520, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "typeOfConstructionProject"),
        typeOfConstructionProjectType,
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 521, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "typeOfConstruction"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.typeOfConstructionType,
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 522, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "totalCostsOfProject"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.totalCostsOfProjectType,
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 523, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectAnnouncementDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.projectAnnouncementDateType,
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 524, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingPermitIssueDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingPermitIssueDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 525, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectStartDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.projectStartDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 526, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectCompletionDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.projectCompletionDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 527, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectSuspensionDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.projectSuspensionDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 528, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionAuthorisationDeniedDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.constructionAuthorisationDeniedDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 529, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "withdrawalDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.withdrawalDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 530, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "cancellationDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.nonRealisationDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 531, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "durationOfConstructionPhase"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.durationOfConstructionPhaseType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 532, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectFreeText1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 533, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectFreeText2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 534, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 535, 3
        ),
    )
)

constructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingProjectLink"),
        kindOfConstructionWorkWithBuildingType,
        scope=constructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 536, 3
        ),
    )
)


def _BuildAutomaton_20():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 511, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 512, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 513, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 514, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 515, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 516, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 517, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 518, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 519, 3
        ),
    )
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 520, 3
        ),
    )
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 521, 3
        ),
    )
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 522, 3
        ),
    )
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 523, 3
        ),
    )
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 524, 3
        ),
    )
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 525, 3
        ),
    )
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 526, 3
        ),
    )
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 527, 3
        ),
    )
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 528, 3
        ),
    )
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 529, 3
        ),
    )
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 530, 3
        ),
    )
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 531, 3
        ),
    )
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 532, 3
        ),
    )
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 533, 3
        ),
    )
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 534, 3
        ),
    )
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 535, 3
        ),
    )
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 536, 3
        ),
    )
    counters.add(cc_25)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EPROID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 511, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "officialConstructionProjectFileNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 512, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "extensionOfOfficialConstructionProjectFileNo"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 513, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 514, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionProjectDescription")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 515, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionLocalisation")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 516, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "realestateIdentification")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 517, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "typeOfPermit")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 518, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "typeOfClient")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 519, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "client")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 520, 3),
    )
    st_9 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "typeOfConstructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 521, 3),
    )
    st_10 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "typeOfConstruction")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 522, 3),
    )
    st_11 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "totalCostsOfProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 523, 3),
    )
    st_12 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectAnnouncementDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 524, 3),
    )
    st_13 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingPermitIssueDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 525, 3),
    )
    st_14 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectStartDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 526, 3),
    )
    st_15 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectCompletionDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 527, 3),
    )
    st_16 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectSuspensionDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 528, 3),
    )
    st_17 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "constructionAuthorisationDeniedDate"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 529, 3),
    )
    st_18 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "withdrawalDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 530, 3),
    )
    st_19 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "cancellationDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 531, 3),
    )
    st_20 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "durationOfConstructionPhase")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 532, 3),
    )
    st_21 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectFreeText1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 533, 3),
    )
    st_22 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectFreeText2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 534, 3),
    )
    st_23 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 535, 3),
    )
    st_24 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingProjectLink")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 536, 3),
    )
    st_25 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_19, True)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_19, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_20, True)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_20, False)]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_21, True)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_21, False)]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_22, True)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_22, False)]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_23, True)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_23, False)]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_24, True)]))
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_24, False)]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [fac.UpdateInstruction(cc_25, True)]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


constructionProjectWithBuildingType._Automaton = _BuildAutomaton_20()


addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EPROIDType,
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 541, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "officialConstructionProjectFileNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.officialConstructionProjectFileNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 542, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "extensionOfOfficialConstructionProjectFileNo"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.extensionOfOfficialConstructionProjectFileNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 543, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        constructionSurveyDeptType,
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 544, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionProjectDescription"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.constructionProjectDescriptionType,
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 545, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionLocalisation"),
        swissMunicipalityType,
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 546, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.realestateIdentificationType,
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 547, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "typeOfPermit"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.typeOfPermitType,
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 548, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "typeOfClient"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.typeOfClientType,
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 549, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "client"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.personType,
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 550, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "typeOfConstructionProject"),
        typeOfConstructionProjectType,
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 551, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "typeOfConstruction"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.typeOfConstructionType,
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 552, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "totalCostsOfProject"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.totalCostsOfProjectType,
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 553, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectAnnouncementDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.projectAnnouncementDateType,
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 554, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingPermitIssueDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingPermitIssueDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 555, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectFreeText1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 556, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectFreeText2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 557, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 558, 3
        ),
    )
)

addConstructionProjectWithBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingProjectLink"),
        kindOfConstructionWorkWithBuildingType,
        scope=addConstructionProjectWithBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 559, 3
        ),
    )
)


def _BuildAutomaton_21():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 541, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 542, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 543, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 545, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 546, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 547, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 548, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 549, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 550, 3
        ),
    )
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 551, 3
        ),
    )
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 552, 3
        ),
    )
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 553, 3
        ),
    )
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 554, 3
        ),
    )
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 555, 3
        ),
    )
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 556, 3
        ),
    )
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 557, 3
        ),
    )
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 558, 3
        ),
    )
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EPROID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 541, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "officialConstructionProjectFileNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 542, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "extensionOfOfficialConstructionProjectFileNo"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 543, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 544, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionProjectDescription")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 545, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionLocalisation")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 546, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "realestateIdentification")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 547, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "typeOfPermit")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 548, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "typeOfClient")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 549, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "client")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 550, 3),
    )
    st_9 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "typeOfConstructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 551, 3),
    )
    st_10 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "typeOfConstruction")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 552, 3),
    )
    st_11 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "totalCostsOfProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 553, 3),
    )
    st_12 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectAnnouncementDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 554, 3),
    )
    st_13 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingPermitIssueDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 555, 3),
    )
    st_14 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectFreeText1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 556, 3),
    )
    st_15 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectFreeText2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 557, 3),
    )
    st_16 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 558, 3),
    )
    st_17 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectWithBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingProjectLink")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 559, 3),
    )
    st_18 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    transitions.append(fac.Transition(st_12, []))
    transitions.append(fac.Transition(st_13, []))
    transitions.append(fac.Transition(st_14, []))
    transitions.append(fac.Transition(st_15, []))
    transitions.append(fac.Transition(st_16, []))
    transitions.append(fac.Transition(st_17, []))
    transitions.append(fac.Transition(st_18, []))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_6, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_7, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_8, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_9, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_10, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_11, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_12, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_13, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_14, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_15, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_16, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, []))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


addConstructionProjectWithBuildingType._Automaton = _BuildAutomaton_21()


setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        constructionSurveyDeptType,
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 564, 3
        ),
    )
)

setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "officialConstructionProjectFileNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.officialConstructionProjectFileNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 565, 3
        ),
    )
)

setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "extensionOfOfficialConstructionProjectFileNo"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.extensionOfOfficialConstructionProjectFileNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 566, 3
        ),
    )
)

setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionProjectDescription"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.constructionProjectDescriptionType,
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 567, 3
        ),
    )
)

setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionLocalisation"),
        swissMunicipalityType,
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 568, 3
        ),
    )
)

setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.realestateIdentificationType,
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 569, 3
        ),
    )
)

setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "typeOfPermit"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.typeOfPermitType,
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 570, 3
        ),
    )
)

setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "typeOfClient"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.typeOfClientType,
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 571, 3
        ),
    )
)

setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "client"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.personType,
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 572, 3
        ),
    )
)

setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "typeOfConstructionProject"),
        typeOfConstructionProjectType,
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 573, 3
        ),
    )
)

setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "typeOfConstruction"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.typeOfConstructionType,
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 574, 3
        ),
    )
)

setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "totalCostsOfProject"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.totalCostsOfProjectType,
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 575, 3
        ),
    )
)

setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectCompletionDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.projectCompletionDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 576, 3
        ),
    )
)

setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectFreeText1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 577, 3
        ),
    )
)

setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectFreeText2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 578, 3
        ),
    )
)

setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 579, 3
        ),
    )
)

setToCompletedConstructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingProjectLink"),
        kindOfConstructionWorkWithBuildingType,
        scope=setToCompletedConstructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 580, 3
        ),
    )
)


def _BuildAutomaton_22():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 564, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 565, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 566, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 567, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 568, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 570, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 571, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 572, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 573, 3
        ),
    )
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 574, 3
        ),
    )
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 575, 3
        ),
    )
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 576, 3
        ),
    )
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 577, 3
        ),
    )
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 578, 3
        ),
    )
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 579, 3
        ),
    )
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 580, 3
        ),
    )
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 564, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "officialConstructionProjectFileNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 565, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "extensionOfOfficialConstructionProjectFileNo"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 566, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionProjectDescription")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 567, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionLocalisation")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 568, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "realestateIdentification")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 569, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "typeOfPermit")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 570, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "typeOfClient")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 571, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "client")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 572, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "typeOfConstructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 573, 3),
    )
    st_9 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "typeOfConstruction")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 574, 3),
    )
    st_10 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "totalCostsOfProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 575, 3),
    )
    st_11 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectCompletionDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 576, 3),
    )
    st_12 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectFreeText1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 577, 3),
    )
    st_13 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectFreeText2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 578, 3),
    )
    st_14 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 579, 3),
    )
    st_15 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingProjectLink")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 580, 3),
    )
    st_16 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    transitions.append(fac.Transition(st_12, []))
    transitions.append(fac.Transition(st_13, []))
    transitions.append(fac.Transition(st_14, []))
    transitions.append(fac.Transition(st_15, []))
    transitions.append(fac.Transition(st_16, []))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_6, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_7, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_8, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_9, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_10, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_11, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_12, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_13, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_14, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_15, True)]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


setToCompletedConstructionProjectType._Automaton = _BuildAutomaton_22()


constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EPROIDType,
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 585, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "officialConstructionProjectFileNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.officialConstructionProjectFileNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 586, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "extensionOfOfficialConstructionProjectFileNo"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.extensionOfOfficialConstructionProjectFileNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 587, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        constructionSurveyDeptType,
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 588, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionProjectDescription"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.constructionProjectDescriptionType,
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 589, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionLocalisation"),
        swissMunicipalityType,
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 590, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.realestateIdentificationType,
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 591, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "typeOfPermit"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.typeOfPermitType,
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 592, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "typeOfClient"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.typeOfClientType,
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 593, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "client"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.personType,
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 594, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "typeOfConstructionProject"),
        typeOfConstructionProjectType,
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 595, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "typeOfConstruction"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.typeOfConstructionType,
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 596, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "totalCostsOfProject"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.totalCostsOfProjectType,
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 597, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectAnnouncementDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.projectAnnouncementDateType,
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 598, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingPermitIssueDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingPermitIssueDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 599, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectStartDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.projectStartDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 600, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectCompletionDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.projectCompletionDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 601, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectSuspensionDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.projectSuspensionDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 602, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionAuthorisationDeniedDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.constructionAuthorisationDeniedDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 603, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "withdrawalDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.withdrawalDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 604, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "cancellationDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.nonRealisationDateType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 605, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "durationOfConstructionPhase"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.durationOfConstructionPhaseType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 606, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectFreeText1"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 607, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectFreeText2"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.freeTextType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 608, 3
        ),
    )
)

constructionProjectType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=constructionProjectType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 609, 3
        ),
    )
)


def _BuildAutomaton_23():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 585, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 586, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 587, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 588, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 589, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 590, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 591, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 592, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 593, 3
        ),
    )
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 594, 3
        ),
    )
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 595, 3
        ),
    )
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 596, 3
        ),
    )
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 597, 3
        ),
    )
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 598, 3
        ),
    )
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 599, 3
        ),
    )
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 600, 3
        ),
    )
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 601, 3
        ),
    )
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 602, 3
        ),
    )
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 603, 3
        ),
    )
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 604, 3
        ),
    )
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 605, 3
        ),
    )
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 606, 3
        ),
    )
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 607, 3
        ),
    )
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 608, 3
        ),
    )
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 609, 3
        ),
    )
    counters.add(cc_24)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EPROID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 585, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "officialConstructionProjectFileNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 586, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "extensionOfOfficialConstructionProjectFileNo"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 587, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 588, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionProjectDescription")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 589, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionLocalisation")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 590, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "realestateIdentification")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 591, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "typeOfPermit")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 592, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "typeOfClient")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 593, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "client")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 594, 3),
    )
    st_9 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "typeOfConstructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 595, 3),
    )
    st_10 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "typeOfConstruction")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 596, 3),
    )
    st_11 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "totalCostsOfProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 597, 3),
    )
    st_12 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectAnnouncementDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 598, 3),
    )
    st_13 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingPermitIssueDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 599, 3),
    )
    st_14 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectStartDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 600, 3),
    )
    st_15 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectCompletionDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 601, 3),
    )
    st_16 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectSuspensionDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 602, 3),
    )
    st_17 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "constructionAuthorisationDeniedDate"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 603, 3),
    )
    st_18 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "withdrawalDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 604, 3),
    )
    st_19 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "cancellationDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 605, 3),
    )
    st_20 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "durationOfConstructionPhase")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 606, 3),
    )
    st_21 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectFreeText1")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 607, 3),
    )
    st_22 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectFreeText2")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 608, 3),
    )
    st_23 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 609, 3),
    )
    st_24 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [fac.UpdateInstruction(cc_19, True)]))
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_19, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [fac.UpdateInstruction(cc_20, True)]))
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_20, False)]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [fac.UpdateInstruction(cc_21, True)]))
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_21, False)]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [fac.UpdateInstruction(cc_22, True)]))
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_22, False)]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [fac.UpdateInstruction(cc_23, True)]))
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_23, False)]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [fac.UpdateInstruction(cc_24, True)]))
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


constructionProjectType._Automaton = _BuildAutomaton_23()


constructionProjectListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EPROIDType,
        scope=constructionProjectListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 614, 3
        ),
    )
)

constructionProjectListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "officialConstructionProjectFileNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.officialConstructionProjectFileNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 615, 3
        ),
    )
)

constructionProjectListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "extensionOfOfficialConstructionProjectFileNo"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.extensionOfOfficialConstructionProjectFileNoType,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=constructionProjectListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 616, 3
        ),
    )
)

constructionProjectListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        constructionSurveyDeptType,
        scope=constructionProjectListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 617, 3
        ),
    )
)

constructionProjectListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionProjectDescription"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.constructionProjectDescriptionType,
        scope=constructionProjectListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 618, 3
        ),
    )
)

constructionProjectListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.realestateIdentificationType,
        scope=constructionProjectListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 619, 3
        ),
    )
)

constructionProjectListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectStatus"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.projectStatusType,
        scope=constructionProjectListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 620, 3
        ),
    )
)

constructionProjectListType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=constructionProjectListType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 621, 3
        ),
    )
)


def _BuildAutomaton_24():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 614, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 615, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 616, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 617, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 618, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 619, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 621, 3
        ),
    )
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectListType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EPROID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 614, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectListType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "officialConstructionProjectFileNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 615, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectListType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "extensionOfOfficialConstructionProjectFileNo"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 616, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectListType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 617, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectListType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionProjectDescription")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 618, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectListType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "realestateIdentification")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 619, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectListType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectStatus")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 620, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectListType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 621, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, []))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, True)]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


constructionProjectListType._Automaton = _BuildAutomaton_24()


costsPreviousYearType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "previousYear"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.datePartiallyKnownType,
        scope=costsPreviousYearType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 626, 3
        ),
    )
)

costsPreviousYearType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "costsStreetsPreviousYearPublicAdministration"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.totalCostsOfProjectType,
        scope=costsPreviousYearType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 627, 3
        ),
    )
)

costsPreviousYearType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "costsCivilEngineeringPreviousYearPublicAdministration"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.totalCostsOfProjectType,
        scope=costsPreviousYearType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 628, 3
        ),
    )
)

costsPreviousYearType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "costsBuildingPreviousYearPublicAdministration"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.totalCostsOfProjectType,
        scope=costsPreviousYearType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 629, 3
        ),
    )
)

costsPreviousYearType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "costsStreetsPreviousYearPublicCorporation"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.totalCostsOfProjectType,
        scope=costsPreviousYearType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 630, 3
        ),
    )
)

costsPreviousYearType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "costsCivilEngineeringPreviousYearPublicCorporation"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.totalCostsOfProjectType,
        scope=costsPreviousYearType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 631, 3
        ),
    )
)

costsPreviousYearType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "costsBuildingPreviousYearPublicCorporation"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.totalCostsOfProjectType,
        scope=costsPreviousYearType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 632, 3
        ),
    )
)

costsPreviousYearType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=costsPreviousYearType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 633, 3
        ),
    )
)


def _BuildAutomaton_25():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 627, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 628, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 629, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 630, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 631, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 632, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 633, 3
        ),
    )
    counters.add(cc_6)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        costsPreviousYearType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "previousYear")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 626, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        costsPreviousYearType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "costsStreetsPreviousYearPublicAdministration"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 627, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        costsPreviousYearType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "costsCivilEngineeringPreviousYearPublicAdministration"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 628, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        costsPreviousYearType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "costsBuildingPreviousYearPublicAdministration"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 629, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        costsPreviousYearType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "costsStreetsPreviousYearPublicCorporation"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 630, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        costsPreviousYearType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "costsCivilEngineeringPreviousYearPublicCorporation"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 631, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        costsPreviousYearType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "costsBuildingPreviousYearPublicCorporation"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 632, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        costsPreviousYearType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 633, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, True)]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


costsPreviousYearType._Automaton = _BuildAutomaton_25()


costsCurrentYearType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "currentYear"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.datePartiallyKnownType,
        scope=costsCurrentYearType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 638, 3
        ),
    )
)

costsCurrentYearType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "costsStreetsCurrentYearPublicAdministration"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.totalCostsOfProjectType,
        scope=costsCurrentYearType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 639, 3
        ),
    )
)

costsCurrentYearType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "costsCivilEngineeringCurrentYearPublicAdministration"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.totalCostsOfProjectType,
        scope=costsCurrentYearType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 640, 3
        ),
    )
)

costsCurrentYearType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "costsBuildingCurrentYearPublicAdministration"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.totalCostsOfProjectType,
        scope=costsCurrentYearType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 641, 3
        ),
    )
)

costsCurrentYearType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "costsStreetsCurrentYearPublicCorporation"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.totalCostsOfProjectType,
        scope=costsCurrentYearType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 642, 3
        ),
    )
)

costsCurrentYearType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "costsCivilEngineeringCurrentYearPublicCorporation"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.totalCostsOfProjectType,
        scope=costsCurrentYearType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 643, 3
        ),
    )
)

costsCurrentYearType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(
            Namespace, "costsBuildingCurrentYearPublicCorporation"
        ),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.totalCostsOfProjectType,
        scope=costsCurrentYearType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 644, 3
        ),
    )
)

costsCurrentYearType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=costsCurrentYearType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 645, 3
        ),
    )
)


def _BuildAutomaton_26():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 639, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 640, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 641, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 642, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 643, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 644, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 645, 3
        ),
    )
    counters.add(cc_6)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        costsCurrentYearType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "currentYear")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 638, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        costsCurrentYearType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "costsStreetsCurrentYearPublicAdministration"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 639, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        costsCurrentYearType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "costsCivilEngineeringCurrentYearPublicAdministration"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 640, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        costsCurrentYearType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "costsBuildingCurrentYearPublicAdministration"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 641, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        costsCurrentYearType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "costsStreetsCurrentYearPublicCorporation"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 642, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        costsCurrentYearType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "costsCivilEngineeringCurrentYearPublicCorporation"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 643, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        costsCurrentYearType._UseForTag(
            pyxb.namespace.ExpandedName(
                Namespace, "costsBuildingCurrentYearPublicCorporation"
            )
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 644, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        costsCurrentYearType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 645, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, True)]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


costsCurrentYearType._Automaton = _BuildAutomaton_26()


searchAddressType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0007_6_0.municipalityIdType,
        scope=searchAddressType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 650, 3
        ),
    )
)

searchAddressType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "cantonAbbreviation"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0007_6_0.cantonAbbreviationType,
        scope=searchAddressType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 651, 3
        ),
    )
)

searchAddressType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "street"),
        streetType,
        scope=searchAddressType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 652, 3
        ),
    )
)

searchAddressType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntranceNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingEntranceNoType,
        scope=searchAddressType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 653, 3
        ),
    )
)

searchAddressType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        localityType,
        scope=searchAddressType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 654, 3
        ),
    )
)

searchAddressType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=searchAddressType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 655, 3
        ),
    )
)


def _BuildAutomaton_27():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 651, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 652, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 653, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 654, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 655, 3
        ),
    )
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        searchAddressType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "municipality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 650, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        searchAddressType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "cantonAbbreviation")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 651, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        searchAddressType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "street")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 652, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        searchAddressType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingEntranceNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 653, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        searchAddressType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "locality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 654, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        searchAddressType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 655, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, True)]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


searchAddressType._Automaton = _BuildAutomaton_27()


addConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionProject"),
        addConstructionProjectWithBuildingType,
        scope=addConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 660, 3
        ),
    )
)

addConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=addConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 661, 3
        ),
    )
)


def _BuildAutomaton_28():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 661, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 660, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        addConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 661, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


addConstructionProjectRequestType._Automaton = _BuildAutomaton_28()


setToApprovedConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingPermitIssueDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingPermitIssueDateType,
        scope=setToApprovedConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 666, 3
        ),
    )
)

setToApprovedConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=setToApprovedConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 667, 3
        ),
    )
)


def _BuildAutomaton_29():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 667, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        setToApprovedConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingPermitIssueDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 666, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        setToApprovedConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 667, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


setToApprovedConstructionProjectRequestType._Automaton = _BuildAutomaton_29()


setToConstructionStartedRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectStartDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.projectStartDateType,
        scope=setToConstructionStartedRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 672, 3
        ),
    )
)

setToConstructionStartedRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "durationOfConstructionPhase"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.durationOfConstructionPhaseType,
        scope=setToConstructionStartedRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 673, 3
        ),
    )
)

setToConstructionStartedRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=setToConstructionStartedRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 674, 3
        ),
    )
)


def _BuildAutomaton_30():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 674, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        setToConstructionStartedRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectStartDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 672, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        setToConstructionStartedRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "durationOfConstructionPhase")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 673, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        setToConstructionStartedRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 674, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


setToConstructionStartedRequestType._Automaton = _BuildAutomaton_30()


setToCompletedConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionProject"),
        setToCompletedConstructionProjectType,
        scope=setToCompletedConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 679, 3
        ),
    )
)

setToCompletedConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=setToCompletedConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 680, 3
        ),
    )
)


def _BuildAutomaton_31():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 680, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 679, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 680, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


setToCompletedConstructionProjectRequestType._Automaton = _BuildAutomaton_31()


setToCompletedBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "building"),
        setToCompletedBuildingType,
        scope=setToCompletedBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 685, 3
        ),
    )
)

setToCompletedBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=setToCompletedBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 686, 3
        ),
    )
)


def _BuildAutomaton_32():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 686, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "building")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 685, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 686, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


setToCompletedBuildingRequestType._Automaton = _BuildAutomaton_32()


setToCompletedDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwelling"),
        setToCompletedDwellingType,
        scope=setToCompletedDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 691, 3
        ),
    )
)

setToCompletedDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=setToCompletedDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 692, 3
        ),
    )
)


def _BuildAutomaton_33():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 692, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwelling")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 691, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCompletedDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 692, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


setToCompletedDwellingRequestType._Automaton = _BuildAutomaton_33()


setMaintenanceCostsRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        constructionSurveyDeptType,
        scope=setMaintenanceCostsRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 697, 3
        ),
    )
)

setMaintenanceCostsRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "costsPreviousYear"),
        costsPreviousYearType,
        scope=setMaintenanceCostsRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 698, 3
        ),
    )
)

setMaintenanceCostsRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "costsCurrentYear"),
        costsCurrentYearType,
        scope=setMaintenanceCostsRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 699, 3
        ),
    )
)

setMaintenanceCostsRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=setMaintenanceCostsRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 700, 3
        ),
    )
)


def _BuildAutomaton_34():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 700, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        setMaintenanceCostsRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 697, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        setMaintenanceCostsRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "costsPreviousYear")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 698, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        setMaintenanceCostsRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "costsCurrentYear")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 699, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        setMaintenanceCostsRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 700, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


setMaintenanceCostsRequestType._Automaton = _BuildAutomaton_34()


modifyConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionProject"),
        constructionProjectWithBuildingType,
        scope=modifyConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 705, 3
        ),
    )
)

modifyConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        reasonType,
        scope=modifyConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 706, 3
        ),
    )
)

modifyConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=modifyConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 707, 3
        ),
    )
)


def _BuildAutomaton_35():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 707, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        modifyConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 705, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        modifyConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reason")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 706, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 707, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


modifyConstructionProjectRequestType._Automaton = _BuildAutomaton_35()


bindBuildingToConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EPROIDType,
        scope=bindBuildingToConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 712, 3
        ),
    )
)

bindBuildingToConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "ARBID"),
        ARBIDType,
        scope=bindBuildingToConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 713, 3
        ),
    )
)

bindBuildingToConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionWorkDone"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.kindOfWorkType,
        scope=bindBuildingToConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 714, 3
        ),
    )
)

bindBuildingToConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "energeticRestauration"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=bindBuildingToConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 715, 3
        ),
    )
)

bindBuildingToConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "renovationHeatingsystem"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=bindBuildingToConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 716, 3
        ),
    )
)

bindBuildingToConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "innerConversionRenovation"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=bindBuildingToConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 717, 3
        ),
    )
)

bindBuildingToConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "conversion"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=bindBuildingToConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 718, 3
        ),
    )
)

bindBuildingToConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningHeated"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=bindBuildingToConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 719, 3
        ),
    )
)

bindBuildingToConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningNotHeated"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=bindBuildingToConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 720, 3
        ),
    )
)

bindBuildingToConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "thermicSolarFacility"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=bindBuildingToConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 721, 3
        ),
    )
)

bindBuildingToConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "photovoltaicSolarFacility"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=bindBuildingToConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 722, 3
        ),
    )
)

bindBuildingToConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "otherWorks"),
        pyxb.binding.datatypes.boolean,
        nillable=pyxb.binding.datatypes.boolean(1),
        scope=bindBuildingToConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 723, 3
        ),
    )
)

bindBuildingToConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=bindBuildingToConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 724, 3
        ),
    )
)


def _BuildAutomaton_36():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 713, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 714, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 715, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 716, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 717, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 718, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 719, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 720, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 721, 3
        ),
    )
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 722, 3
        ),
    )
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 723, 3
        ),
    )
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 724, 3
        ),
    )
    counters.add(cc_11)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EPROID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 712, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "ARBID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 713, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionWorkDone")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 714, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "energeticRestauration")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 715, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "renovationHeatingsystem")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 716, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "innerConversionRenovation")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 717, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "conversion")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 718, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningHeated")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 719, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extensionHeighteningNotHeated")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 720, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "thermicSolarFacility")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 721, 3),
    )
    st_9 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "photovoltaicSolarFacility")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 722, 3),
    )
    st_10 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "otherWorks")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 723, 3),
    )
    st_11 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 724, 3),
    )
    st_12 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    transitions.append(fac.Transition(st_12, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_6, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_7, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_8, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_9, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_10, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [fac.UpdateInstruction(cc_11, True)]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


bindBuildingToConstructionProjectRequestType._Automaton = _BuildAutomaton_36()


modifyConstructionSurveyDeptRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingAuthorityType,
        scope=modifyConstructionSurveyDeptRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 729, 3
        ),
    )
)

modifyConstructionSurveyDeptRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=modifyConstructionSurveyDeptRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 730, 3
        ),
    )
)


def _BuildAutomaton_37():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 730, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        modifyConstructionSurveyDeptRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 729, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyConstructionSurveyDeptRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 730, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


modifyConstructionSurveyDeptRequestType._Automaton = _BuildAutomaton_37()


addBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "building"),
        buildingWithEntranceType,
        scope=addBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 735, 3
        ),
    )
)

addBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        reasonType,
        scope=addBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 736, 3
        ),
    )
)

addBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=addBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 737, 3
        ),
    )
)


def _BuildAutomaton_38():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 737, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "building")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 735, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        addBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reason")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 736, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        addBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 737, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


addBuildingRequestType._Automaton = _BuildAutomaton_38()


modifyBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "building"),
        buildingType,
        scope=modifyBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 742, 3
        ),
    )
)

modifyBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        reasonType,
        scope=modifyBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 743, 3
        ),
    )
)

modifyBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=modifyBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 744, 3
        ),
    )
)


def _BuildAutomaton_39():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 744, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        modifyBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "building")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 742, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        modifyBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reason")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 743, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 744, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


modifyBuildingRequestType._Automaton = _BuildAutomaton_39()


addBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EDIDType,
        scope=addBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 749, 3
        ),
    )
)

addBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGAID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGAIDType,
        scope=addBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 750, 3
        ),
    )
)

addBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntranceNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingEntranceNoType,
        scope=addBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 751, 3
        ),
    )
)

addBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "coordinates"),
        coordinatesEntranceType,
        scope=addBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 752, 3
        ),
    )
)

addBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "isOfficialAddress"),
        pyxb.binding.datatypes.boolean,
        scope=addBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 753, 3
        ),
    )
)

addBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "street"),
        streetType,
        scope=addBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 754, 3
        ),
    )
)

addBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        localityType,
        scope=addBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 755, 3
        ),
    )
)

addBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "otherID"),
        entranceNamedIdType,
        scope=addBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 756, 3
        ),
    )
)

addBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=addBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 757, 3
        ),
    )
)

addBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        reasonType,
        scope=addBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 758, 3
        ),
    )
)


def _BuildAutomaton_40():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 749, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 750, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 751, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 752, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 753, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 754, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 755, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=2,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 756, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 757, 3
        ),
    )
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EDID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 749, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGAID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 750, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingEntranceNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 751, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "coordinates")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 752, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "isOfficialAddress")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 753, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "street")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 754, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "locality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 755, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "otherID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 756, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 757, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        addBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reason")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 758, 3),
    )
    st_9 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


addBuildingEntranceRequestType._Automaton = _BuildAutomaton_40()


modifyBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrance"),
        buildingEntranceType,
        scope=modifyBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 763, 3
        ),
    )
)

modifyBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        reasonType,
        scope=modifyBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 764, 3
        ),
    )
)

modifyBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=modifyBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 765, 3
        ),
    )
)


def _BuildAutomaton_41():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 765, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        modifyBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingEntrance")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 763, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        modifyBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reason")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 764, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 765, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


modifyBuildingEntranceRequestType._Automaton = _BuildAutomaton_41()


addDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EWID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EWIDType,
        scope=addDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 770, 3
        ),
    )
)

addDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwelling"),
        dwellingType,
        scope=addDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 771, 3
        ),
    )
)

addDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        reasonType,
        scope=addDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 772, 3
        ),
    )
)

addDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=addDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 773, 3
        ),
    )
)


def _BuildAutomaton_42():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 770, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 773, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EWID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 770, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwelling")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 771, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        addDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reason")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 772, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        addDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 773, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


addDwellingRequestType._Automaton = _BuildAutomaton_42()


modifyDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwelling"),
        dwellingType,
        scope=modifyDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 778, 3
        ),
    )
)

modifyDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        reasonType,
        scope=modifyDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 779, 3
        ),
    )
)

modifyDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=modifyDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 780, 3
        ),
    )
)


def _BuildAutomaton_43():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 780, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        modifyDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwelling")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 778, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        modifyDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reason")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 779, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 780, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


modifyDwellingRequestType._Automaton = _BuildAutomaton_43()


reallocateDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "oldEDID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EDIDType,
        scope=reallocateDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 785, 3
        ),
    )
)

reallocateDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "newEDID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EDIDType,
        scope=reallocateDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 786, 3
        ),
    )
)

reallocateDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        reasonType,
        scope=reallocateDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 787, 3
        ),
    )
)

reallocateDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=reallocateDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 788, 3
        ),
    )
)


def _BuildAutomaton_44():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 788, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        reallocateDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "oldEDID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 785, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        reallocateDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "newEDID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 786, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        reallocateDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reason")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 787, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        reallocateDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 788, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


reallocateDwellingRequestType._Automaton = _BuildAutomaton_44()


getConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        constructionSurveyDeptType,
        scope=getConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 793, 3
        ),
    )
)

getConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.realestateIdentificationType,
        scope=getConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 794, 3
        ),
    )
)

getConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectStatus"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.projectStatusType,
        scope=getConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 795, 3
        ),
    )
)

getConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "hasError"),
        pyxb.binding.datatypes.boolean,
        scope=getConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 796, 3
        ),
    )
)

getConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "createDate"),
        dateIntervalType,
        scope=getConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 797, 3
        ),
    )
)

getConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "modifyDate"),
        dateIntervalType,
        scope=getConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 798, 3
        ),
    )
)

getConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "otherId"),
        constructionProjectNamedIdType,
        scope=getConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 799, 3
        ),
    )
)

getConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 800, 3
        ),
    )
)


def _BuildAutomaton_45():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 794, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 795, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 796, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 797, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 798, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 799, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 800, 3
        ),
    )
    counters.add(cc_6)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        getConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 793, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "realestateIdentification")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 794, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectStatus")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 795, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        getConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "hasError")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 796, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        getConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "createDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 797, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        getConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "modifyDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 798, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        getConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "otherId")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 799, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        getConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 800, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, True)]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


getConstructionProjectRequestType._Automaton = _BuildAutomaton_45()


getDeactivatedConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        constructionSurveyDeptType,
        scope=getDeactivatedConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 805, 3
        ),
    )
)

getDeactivatedConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EPROIDType,
        scope=getDeactivatedConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 806, 3
        ),
    )
)

getDeactivatedConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getDeactivatedConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 807, 3
        ),
    )
)


def _BuildAutomaton_46():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 806, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 807, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        getDeactivatedConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 805, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getDeactivatedConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EPROID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 806, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getDeactivatedConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 807, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


getDeactivatedConstructionProjectRequestType._Automaton = _BuildAutomaton_46()


getConstructionSurveyDeptRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        constructionSurveyDeptType,
        scope=getConstructionSurveyDeptRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 812, 3
        ),
    )
)

getConstructionSurveyDeptRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getConstructionSurveyDeptRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 813, 3
        ),
    )
)


def _BuildAutomaton_47():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 813, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        getConstructionSurveyDeptRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 812, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getConstructionSurveyDeptRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 813, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


getConstructionSurveyDeptRequestType._Automaton = _BuildAutomaton_47()


getBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "searchAddressType"),
        searchAddressType,
        scope=getBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 818, 3
        ),
    )
)

getBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "realestateIdentification"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.realestateIdentificationType,
        scope=getBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 819, 3
        ),
    )
)

getBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.officialBuildingNoType,
        scope=getBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 820, 3
        ),
    )
)

getBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingDateType,
        scope=getBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 821, 3
        ),
    )
)

getBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "hasError"),
        pyxb.binding.datatypes.boolean,
        scope=getBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 822, 3
        ),
    )
)

getBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "createDate"),
        dateIntervalType,
        scope=getBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 823, 3
        ),
    )
)

getBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "modifyDate"),
        dateIntervalType,
        scope=getBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 824, 3
        ),
    )
)

getBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "otherId"),
        buildingNamedIdType,
        scope=getBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 825, 3
        ),
    )
)

getBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 826, 3
        ),
    )
)


def _BuildAutomaton_48():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 818, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 819, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 820, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 821, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 822, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 823, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 824, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=8,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 825, 3
        ),
    )
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 826, 3
        ),
    )
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "searchAddressType")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 818, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "realestateIdentification")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 819, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "officialBuildingNo")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 820, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dateOfConstruction")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 821, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "hasError")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 822, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "createDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 823, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "modifyDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 824, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "otherId")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 825, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 826, 3),
    )
    st_8 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [fac.UpdateInstruction(cc_8, True)]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


getBuildingRequestType._Automaton = _BuildAutomaton_48()


getDeactivatedBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0007_6_0.municipalityIdType,
        scope=getDeactivatedBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 831, 3
        ),
    )
)

getDeactivatedBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=getDeactivatedBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 832, 3
        ),
    )
)

getDeactivatedBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getDeactivatedBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 833, 3
        ),
    )
)


def _BuildAutomaton_49():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 832, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 833, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        getDeactivatedBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "municipality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 831, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getDeactivatedBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 832, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getDeactivatedBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 833, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


getDeactivatedBuildingRequestType._Automaton = _BuildAutomaton_49()


getDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=getDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 838, 3
        ),
    )
)

getDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "searchAddressType"),
        searchAddressType,
        scope=getDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 839, 3
        ),
    )
)

getDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "hasError"),
        pyxb.binding.datatypes.boolean,
        scope=getDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 840, 3
        ),
    )
)

getDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "createDate"),
        dateIntervalType,
        scope=getDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 841, 3
        ),
    )
)

getDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "modifyDate"),
        dateIntervalType,
        scope=getDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 842, 3
        ),
    )
)

getDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "otherType"),
        dwellingNamedIdType,
        scope=getDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 843, 3
        ),
    )
)

getDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 844, 3
        ),
    )
)


def _BuildAutomaton_50():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 838, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 839, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 840, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 841, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 842, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=3,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 843, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 844, 3
        ),
    )
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 838, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "searchAddressType")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 839, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        getDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "hasError")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 840, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        getDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "createDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 841, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        getDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "modifyDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 842, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        getDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "otherType")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 843, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        getDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 844, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


getDwellingRequestType._Automaton = _BuildAutomaton_50()


getDeactivatedDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0007_6_0.municipalityIdType,
        scope=getDeactivatedDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 849, 3
        ),
    )
)

getDeactivatedDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=getDeactivatedDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 850, 3
        ),
    )
)

getDeactivatedDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getDeactivatedDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 851, 3
        ),
    )
)


def _BuildAutomaton_51():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 850, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 851, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        getDeactivatedDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "municipality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 849, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getDeactivatedDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 850, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getDeactivatedDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 851, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


getDeactivatedDwellingRequestType._Automaton = _BuildAutomaton_51()


getBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=getBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 856, 3
        ),
    )
)

getBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGAID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGAIDType,
        scope=getBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 857, 3
        ),
    )
)

getBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "searchAddressType"),
        searchAddressType,
        scope=getBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 858, 3
        ),
    )
)

getBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "createDate"),
        dateIntervalType,
        scope=getBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 859, 3
        ),
    )
)

getBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "modifyDate"),
        dateIntervalType,
        scope=getBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 860, 3
        ),
    )
)

getBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "otherId"),
        entranceNamedIdType,
        scope=getBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 861, 3
        ),
    )
)

getBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 862, 3
        ),
    )
)


def _BuildAutomaton_52():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 856, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 857, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 859, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 860, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=2,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 861, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 862, 3
        ),
    )
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        getBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 856, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        getBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGAID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 857, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        getBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "searchAddressType")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 858, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "createDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 859, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "modifyDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 860, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "otherId")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 861, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 862, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_5, True)]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


getBuildingEntranceRequestType._Automaton = _BuildAutomaton_52()


getMutationRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=getMutationRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 867, 3
        ),
    )
)

getMutationRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "createDate"),
        dateIntervalType,
        scope=getMutationRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 868, 3
        ),
    )
)

getMutationRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "modifyDate"),
        dateIntervalType,
        scope=getMutationRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 869, 3
        ),
    )
)

getMutationRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getMutationRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 870, 3
        ),
    )
)


def _BuildAutomaton_53():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 867, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 868, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 869, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 870, 3
        ),
    )
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getMutationRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 867, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getMutationRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "createDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 868, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        getMutationRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "modifyDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 869, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        getMutationRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 870, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


getMutationRequestType._Automaton = _BuildAutomaton_53()


addStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "street"),
        streetType,
        scope=addStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 875, 3
        ),
    )
)

addStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        swissMunicipalityType,
        scope=addStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 876, 3
        ),
    )
)

addStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        localityType,
        scope=addStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 877, 3
        ),
    )
)

addStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=addStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 878, 3
        ),
    )
)


def _BuildAutomaton_54():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 878, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "street")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 875, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "municipality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 876, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        addStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "locality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 877, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        addStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 878, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


addStreetRequestType._Automaton = _BuildAutomaton_54()


modifyStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "streetStatus"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.streetStatusType,
        scope=modifyStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 883, 3
        ),
    )
)

modifyStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localisationKind"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.streetKindType,
        scope=modifyStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 884, 3
        ),
    )
)

modifyStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "officialStreetNumber"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.officialStreetNumberType,
        scope=modifyStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 885, 3
        ),
    )
)

modifyStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=modifyStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 886, 3
        ),
    )
)


def _BuildAutomaton_55():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 883, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 884, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 885, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 886, 3
        ),
    )
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "streetStatus")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 883, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "localisationKind")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 884, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "officialStreetNumber")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 885, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 886, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


modifyStreetRequestType._Automaton = _BuildAutomaton_55()


getStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "description"),
        streetDescriptionType,
        scope=getStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 891, 3
        ),
    )
)

getStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0007_6_0.municipalityIdType,
        scope=getStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 892, 3
        ),
    )
)

getStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "isOfficialDescription"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.isOfficialDescriptionType,
        scope=getStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 893, 3
        ),
    )
)

getStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "streetStatus"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.streetStatusType,
        scope=getStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 894, 3
        ),
    )
)

getStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "localisationKind"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.streetKindType,
        scope=getStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 895, 3
        ),
    )
)

getStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "officialStreetNumber"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.officialStreetNumberType,
        scope=getStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 896, 3
        ),
    )
)

getStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        localityType,
        scope=getStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 897, 3
        ),
    )
)

getStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 898, 3
        ),
    )
)


def _BuildAutomaton_56():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 891, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 892, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 893, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 894, 3
        ),
    )
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 895, 3
        ),
    )
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 896, 3
        ),
    )
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 897, 3
        ),
    )
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 898, 3
        ),
    )
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "description")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 891, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "municipality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 892, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        getStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "isOfficialDescription")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 893, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        getStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "streetStatus")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 894, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        getStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "localisationKind")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 895, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(
        getStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "officialStreetNumber")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 896, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(
        getStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "locality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 897, 3),
    )
    st_6 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(
        getStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 898, 3),
    )
    st_7 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_3, True)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_4, True)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_5, True)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [fac.UpdateInstruction(cc_6, True)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [fac.UpdateInstruction(cc_7, True)]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


getStreetRequestType._Automaton = _BuildAutomaton_56()


getDeactivatedStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "municipality"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0007_6_0.municipalityIdType,
        scope=getDeactivatedStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 903, 3
        ),
    )
)

getDeactivatedStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "ESID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.ESIDType,
        scope=getDeactivatedStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 904, 3
        ),
    )
)

getDeactivatedStreetRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getDeactivatedStreetRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 905, 3
        ),
    )
)


def _BuildAutomaton_57():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 904, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 905, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        getDeactivatedStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "municipality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 903, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getDeactivatedStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "ESID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 904, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getDeactivatedStreetRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 905, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


getDeactivatedStreetRequestType._Automaton = _BuildAutomaton_57()


modifyStreetNameRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "description"),
        streetDescriptionType,
        scope=modifyStreetNameRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 910, 3
        ),
    )
)

modifyStreetNameRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=modifyStreetNameRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 911, 3
        ),
    )
)


def _BuildAutomaton_58():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 911, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        modifyStreetNameRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "description")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 910, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyStreetNameRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 911, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


modifyStreetNameRequestType._Automaton = _BuildAutomaton_58()


deleteStreetSectionRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        localityType,
        scope=deleteStreetSectionRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 916, 3
        ),
    )
)

deleteStreetSectionRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=deleteStreetSectionRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 917, 3
        ),
    )
)


def _BuildAutomaton_59():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 917, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        deleteStreetSectionRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "locality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 916, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        deleteStreetSectionRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 917, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


deleteStreetSectionRequestType._Automaton = _BuildAutomaton_59()


addStreetNameRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "description"),
        streetDescriptionType,
        scope=addStreetNameRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 922, 3
        ),
    )
)

addStreetNameRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=addStreetNameRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 923, 3
        ),
    )
)


def _BuildAutomaton_60():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 923, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        addStreetNameRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "description")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 922, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        addStreetNameRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 923, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


addStreetNameRequestType._Automaton = _BuildAutomaton_60()


deleteStreetNameRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "description"),
        streetDescriptionType,
        scope=deleteStreetNameRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 928, 3
        ),
    )
)

deleteStreetNameRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=deleteStreetNameRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 929, 3
        ),
    )
)


def _BuildAutomaton_61():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 929, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        deleteStreetNameRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "description")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 928, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        deleteStreetNameRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 929, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


deleteStreetNameRequestType._Automaton = _BuildAutomaton_61()


constructionProjectCompleteResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionProject"),
        constructionProjectWithBuildingType,
        scope=constructionProjectCompleteResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 934, 3
        ),
    )
)

constructionProjectCompleteResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=constructionProjectCompleteResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 935, 3
        ),
    )
)

constructionProjectCompleteResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=constructionProjectCompleteResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 936, 3
        ),
    )
)


def _BuildAutomaton_62():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 935, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 936, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectCompleteResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 934, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectCompleteResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 935, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectCompleteResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 936, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


constructionProjectCompleteResponseType._Automaton = _BuildAutomaton_62()


constructionProjectProcessResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EPROIDType,
        scope=constructionProjectProcessResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 941, 3
        ),
    )
)

constructionProjectProcessResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=constructionProjectProcessResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 942, 3
        ),
    )
)

constructionProjectProcessResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=constructionProjectProcessResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 943, 3
        ),
    )
)


def _BuildAutomaton_63():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 942, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 943, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectProcessResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EPROID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 941, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectProcessResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 942, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectProcessResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 943, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


constructionProjectProcessResponseType._Automaton = _BuildAutomaton_63()


buildingProcessResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=buildingProcessResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 948, 3
        ),
    )
)

buildingProcessResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=buildingProcessResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 949, 3
        ),
    )
)

buildingProcessResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=buildingProcessResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 950, 3
        ),
    )
)


def _BuildAutomaton_64():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 949, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 950, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        buildingProcessResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 948, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingProcessResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 949, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingProcessResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 950, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


buildingProcessResponseType._Automaton = _BuildAutomaton_64()


buildingUnusableResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=buildingUnusableResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 955, 3
        ),
    )
)

buildingUnusableResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=buildingUnusableResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 956, 3
        ),
    )
)

buildingUnusableResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=buildingUnusableResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 957, 3
        ),
    )
)

buildingUnusableResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=buildingUnusableResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 958, 3
        ),
    )
)


def _BuildAutomaton_65():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 956, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 957, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 958, 3
        ),
    )
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        buildingUnusableResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 955, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingUnusableResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 956, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingUnusableResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 957, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingUnusableResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 958, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


buildingUnusableResponseType._Automaton = _BuildAutomaton_65()


buildingCompleteResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "building"),
        buildingWithEntranceWithDwellingType,
        scope=buildingCompleteResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 963, 3
        ),
    )
)

buildingCompleteResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=buildingCompleteResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 964, 3
        ),
    )
)

buildingCompleteResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=buildingCompleteResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 965, 3
        ),
    )
)


def _BuildAutomaton_66():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 964, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 965, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        buildingCompleteResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "building")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 963, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingCompleteResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 964, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingCompleteResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 965, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


buildingCompleteResponseType._Automaton = _BuildAutomaton_66()


dwellingProcessResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=dwellingProcessResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 970, 3
        ),
    )
)

dwellingProcessResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EDIDType,
        scope=dwellingProcessResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 971, 3
        ),
    )
)

dwellingProcessResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EWID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EWIDType,
        scope=dwellingProcessResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 972, 3
        ),
    )
)

dwellingProcessResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=dwellingProcessResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 973, 3
        ),
    )
)

dwellingProcessResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=dwellingProcessResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 974, 3
        ),
    )
)


def _BuildAutomaton_67():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 973, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 974, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        dwellingProcessResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 970, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        dwellingProcessResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EDID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 971, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        dwellingProcessResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EWID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 972, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingProcessResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 973, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingProcessResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 974, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, True)]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


dwellingProcessResponseType._Automaton = _BuildAutomaton_67()


dwellingCompleteResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=dwellingCompleteResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 979, 3
        ),
    )
)

dwellingCompleteResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EDIDType,
        scope=dwellingCompleteResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 980, 3
        ),
    )
)

dwellingCompleteResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwelling"),
        dwellingType,
        scope=dwellingCompleteResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 981, 3
        ),
    )
)

dwellingCompleteResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=dwellingCompleteResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 982, 3
        ),
    )
)

dwellingCompleteResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=dwellingCompleteResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 983, 3
        ),
    )
)


def _BuildAutomaton_68():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 982, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 983, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        dwellingCompleteResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 979, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        dwellingCompleteResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EDID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 980, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        dwellingCompleteResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwelling")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 981, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingCompleteResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 982, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingCompleteResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 983, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, True)]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


dwellingCompleteResponseType._Automaton = _BuildAutomaton_68()


dwellingUnusableResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=dwellingUnusableResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 988, 3
        ),
    )
)

dwellingUnusableResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EDIDType,
        scope=dwellingUnusableResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 989, 3
        ),
    )
)

dwellingUnusableResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EWID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EWIDType,
        scope=dwellingUnusableResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 990, 3
        ),
    )
)

dwellingUnusableResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=dwellingUnusableResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 991, 3
        ),
    )
)

dwellingUnusableResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=dwellingUnusableResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 992, 3
        ),
    )
)

dwellingUnusableResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=dwellingUnusableResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 993, 3
        ),
    )
)


def _BuildAutomaton_69():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 991, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 992, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 993, 3
        ),
    )
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        dwellingUnusableResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 988, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        dwellingUnusableResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EDID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 989, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        dwellingUnusableResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EWID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 990, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingUnusableResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 991, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingUnusableResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 992, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingUnusableResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 993, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, True)]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


dwellingUnusableResponseType._Automaton = _BuildAutomaton_69()


quarterlySurveyResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        constructionSurveyDeptType,
        scope=quarterlySurveyResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 998, 3
        ),
    )
)

quarterlySurveyResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "surveyStatus"),
        surveyStatusType,
        scope=quarterlySurveyResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 999, 3
        ),
    )
)

quarterlySurveyResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=quarterlySurveyResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1000, 3
        ),
    )
)

quarterlySurveyResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=quarterlySurveyResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1001, 3
        ),
    )
)


def _BuildAutomaton_70():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1000, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1001, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        quarterlySurveyResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 998, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        quarterlySurveyResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "surveyStatus")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 999, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        quarterlySurveyResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1000, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        quarterlySurveyResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1001, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


quarterlySurveyResponseType._Automaton = _BuildAutomaton_70()


modifyConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionProject"),
        constructionProjectType,
        scope=modifyConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1006, 3
        ),
    )
)

modifyConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=modifyConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1007, 3
        ),
    )
)

modifyConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=modifyConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1008, 3
        ),
    )
)

modifyConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=modifyConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1009, 3
        ),
    )
)


def _BuildAutomaton_71():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1007, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1008, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1009, 3
        ),
    )
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        modifyConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionProject")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1006, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1007, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1008, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1009, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


modifyConstructionProjectResponseType._Automaton = _BuildAutomaton_71()


bindBuildingToConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EPROIDType,
        scope=bindBuildingToConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1014, 3
        ),
    )
)

bindBuildingToConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=bindBuildingToConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1015, 3
        ),
    )
)

bindBuildingToConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "ARBID"),
        ARBIDType,
        scope=bindBuildingToConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1016, 3
        ),
    )
)

bindBuildingToConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=bindBuildingToConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1017, 3
        ),
    )
)

bindBuildingToConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=bindBuildingToConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1018, 3
        ),
    )
)

bindBuildingToConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=bindBuildingToConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1019, 3
        ),
    )
)


def _BuildAutomaton_72():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1016, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1017, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1018, 3
        ),
    )
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1019, 3
        ),
    )
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EPROID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1014, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1015, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "ARBID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1016, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1017, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1018, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(
        bindBuildingToConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1019, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_3, True)]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


bindBuildingToConstructionProjectResponseType._Automaton = _BuildAutomaton_72()


deactivateConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EPROIDType,
        scope=deactivateConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1024, 3
        ),
    )
)

deactivateConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=deactivateConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1025, 3
        ),
    )
)

deactivateConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=deactivateConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1026, 3
        ),
    )
)


def _BuildAutomaton_73():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1025, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1026, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        deactivateConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EPROID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1024, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        deactivateConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1025, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        deactivateConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1026, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


deactivateConstructionProjectResponseType._Automaton = _BuildAutomaton_73()


reactivateConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EPROIDType,
        scope=reactivateConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1031, 3
        ),
    )
)

reactivateConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=reactivateConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1032, 3
        ),
    )
)

reactivateConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=reactivateConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1033, 3
        ),
    )
)

reactivateConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=reactivateConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1034, 3
        ),
    )
)


def _BuildAutomaton_74():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1032, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1033, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1034, 3
        ),
    )
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        reactivateConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EPROID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1031, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        reactivateConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1032, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        reactivateConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1033, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        reactivateConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1034, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


reactivateConstructionProjectResponseType._Automaton = _BuildAutomaton_74()


modifyConstructionSurveyDeptResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingAuthorityType,
        scope=modifyConstructionSurveyDeptResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1039, 3
        ),
    )
)

modifyConstructionSurveyDeptResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=modifyConstructionSurveyDeptResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1040, 3
        ),
    )
)

modifyConstructionSurveyDeptResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=modifyConstructionSurveyDeptResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1041, 3
        ),
    )
)

modifyConstructionSurveyDeptResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=modifyConstructionSurveyDeptResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1042, 3
        ),
    )
)


def _BuildAutomaton_75():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1040, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1041, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1042, 3
        ),
    )
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        modifyConstructionSurveyDeptResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1039, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyConstructionSurveyDeptResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1040, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyConstructionSurveyDeptResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1041, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyConstructionSurveyDeptResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1042, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


modifyConstructionSurveyDeptResponseType._Automaton = _BuildAutomaton_75()


getByIdAddReactivateBuildingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "building"),
        buildingWithEntranceWithDwellingType,
        scope=getByIdAddReactivateBuildingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1047, 3
        ),
    )
)

getByIdAddReactivateBuildingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=getByIdAddReactivateBuildingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1048, 3
        ),
    )
)

getByIdAddReactivateBuildingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=getByIdAddReactivateBuildingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1049, 3
        ),
    )
)

getByIdAddReactivateBuildingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getByIdAddReactivateBuildingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1050, 3
        ),
    )
)


def _BuildAutomaton_76():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1048, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1049, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1050, 3
        ),
    )
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        getByIdAddReactivateBuildingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "building")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1047, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getByIdAddReactivateBuildingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1048, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getByIdAddReactivateBuildingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1049, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        getByIdAddReactivateBuildingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1050, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


getByIdAddReactivateBuildingResponseType._Automaton = _BuildAutomaton_76()


modifyBuildingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "building"),
        buildingType,
        scope=modifyBuildingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1055, 3
        ),
    )
)

modifyBuildingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=modifyBuildingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1056, 3
        ),
    )
)

modifyBuildingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=modifyBuildingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1057, 3
        ),
    )
)

modifyBuildingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=modifyBuildingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1058, 3
        ),
    )
)


def _BuildAutomaton_77():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1056, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1057, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1058, 3
        ),
    )
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        modifyBuildingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "building")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1055, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyBuildingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1056, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyBuildingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1057, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyBuildingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1058, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_2, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


modifyBuildingResponseType._Automaton = _BuildAutomaton_77()


deactivateBuildingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=deactivateBuildingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1063, 3
        ),
    )
)

deactivateBuildingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=deactivateBuildingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1064, 3
        ),
    )
)

deactivateBuildingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=deactivateBuildingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1065, 3
        ),
    )
)


def _BuildAutomaton_78():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1064, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1065, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        deactivateBuildingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1063, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        deactivateBuildingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1064, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        deactivateBuildingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1065, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


deactivateBuildingResponseType._Automaton = _BuildAutomaton_78()


addModifyBuildingEntranceResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=addModifyBuildingEntranceResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1070, 3
        ),
    )
)

addModifyBuildingEntranceResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrance"),
        buildingEntranceType,
        scope=addModifyBuildingEntranceResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1071, 3
        ),
    )
)

addModifyBuildingEntranceResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=addModifyBuildingEntranceResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1072, 3
        ),
    )
)

addModifyBuildingEntranceResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=addModifyBuildingEntranceResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1073, 3
        ),
    )
)

addModifyBuildingEntranceResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=addModifyBuildingEntranceResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1074, 3
        ),
    )
)


def _BuildAutomaton_79():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1072, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1073, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1074, 3
        ),
    )
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addModifyBuildingEntranceResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1070, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        addModifyBuildingEntranceResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingEntrance")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1071, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        addModifyBuildingEntranceResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1072, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        addModifyBuildingEntranceResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1073, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        addModifyBuildingEntranceResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1074, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, True)]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


addModifyBuildingEntranceResponseType._Automaton = _BuildAutomaton_79()


deactivateBuildingEntranceResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=deactivateBuildingEntranceResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1079, 3
        ),
    )
)

deactivateBuildingEntranceResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EDIDType,
        scope=deactivateBuildingEntranceResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1080, 3
        ),
    )
)

deactivateBuildingEntranceResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=deactivateBuildingEntranceResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1081, 3
        ),
    )
)

deactivateBuildingEntranceResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=deactivateBuildingEntranceResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1082, 3
        ),
    )
)


def _BuildAutomaton_80():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1081, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1082, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        deactivateBuildingEntranceResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1079, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        deactivateBuildingEntranceResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EDID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1080, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        deactivateBuildingEntranceResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1081, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        deactivateBuildingEntranceResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1082, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


deactivateBuildingEntranceResponseType._Automaton = _BuildAutomaton_80()


reactivateBuildingEntranceResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=reactivateBuildingEntranceResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1087, 3
        ),
    )
)

reactivateBuildingEntranceResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrance"),
        buildingEntranceType,
        scope=reactivateBuildingEntranceResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1088, 3
        ),
    )
)

reactivateBuildingEntranceResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=reactivateBuildingEntranceResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1089, 3
        ),
    )
)

reactivateBuildingEntranceResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=reactivateBuildingEntranceResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1090, 3
        ),
    )
)

reactivateBuildingEntranceResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=reactivateBuildingEntranceResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1091, 3
        ),
    )
)


def _BuildAutomaton_81():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1089, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1090, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1091, 3
        ),
    )
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        reactivateBuildingEntranceResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1087, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        reactivateBuildingEntranceResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingEntrance")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1088, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        reactivateBuildingEntranceResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1089, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        reactivateBuildingEntranceResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1090, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        reactivateBuildingEntranceResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1091, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_2, True)]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


reactivateBuildingEntranceResponseType._Automaton = _BuildAutomaton_81()


addModifyDwellingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=addModifyDwellingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1096, 3
        ),
    )
)

addModifyDwellingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EDIDType,
        scope=addModifyDwellingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1097, 3
        ),
    )
)

addModifyDwellingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwelling"),
        dwellingType,
        scope=addModifyDwellingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1098, 3
        ),
    )
)

addModifyDwellingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=addModifyDwellingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1099, 3
        ),
    )
)

addModifyDwellingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=addModifyDwellingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1100, 3
        ),
    )
)

addModifyDwellingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=addModifyDwellingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1101, 3
        ),
    )
)


def _BuildAutomaton_82():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1099, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1100, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1101, 3
        ),
    )
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addModifyDwellingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1096, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        addModifyDwellingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EDID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1097, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        addModifyDwellingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwelling")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1098, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        addModifyDwellingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1099, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        addModifyDwellingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1100, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        addModifyDwellingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1101, 3),
    )
    st_5 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_0, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_1, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [fac.UpdateInstruction(cc_2, True)]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


addModifyDwellingResponseType._Automaton = _BuildAutomaton_82()


reactivateReallocateDwellingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=reactivateReallocateDwellingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1106, 3
        ),
    )
)

reactivateReallocateDwellingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EDID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EDIDType,
        scope=reactivateReallocateDwellingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1107, 3
        ),
    )
)

reactivateReallocateDwellingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EWID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EWIDType,
        scope=reactivateReallocateDwellingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1108, 3
        ),
    )
)

reactivateReallocateDwellingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=reactivateReallocateDwellingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1109, 3
        ),
    )
)

reactivateReallocateDwellingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=reactivateReallocateDwellingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1110, 3
        ),
    )
)


def _BuildAutomaton_83():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1109, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1110, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        reactivateReallocateDwellingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1106, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        reactivateReallocateDwellingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EDID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1107, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        reactivateReallocateDwellingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EWID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1108, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        reactivateReallocateDwellingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1109, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        reactivateReallocateDwellingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1110, 3),
    )
    st_4 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_0, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [fac.UpdateInstruction(cc_1, True)]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


reactivateReallocateDwellingResponseType._Automaton = _BuildAutomaton_83()


checkConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EPROID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EPROIDType,
        scope=checkConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1115, 3
        ),
    )
)

checkConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=checkConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1116, 3
        ),
    )
)

checkConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=checkConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1117, 3
        ),
    )
)


def _BuildAutomaton_84():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1116, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1117, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        checkConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EPROID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1115, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        checkConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1116, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        checkConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1117, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


checkConstructionProjectResponseType._Automaton = _BuildAutomaton_84()


checkQuaterlySurveyDeptResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        constructionSurveyDeptType,
        scope=checkQuaterlySurveyDeptResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1122, 3
        ),
    )
)

checkQuaterlySurveyDeptResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=checkQuaterlySurveyDeptResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1123, 3
        ),
    )
)

checkQuaterlySurveyDeptResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=checkQuaterlySurveyDeptResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1124, 3
        ),
    )
)


def _BuildAutomaton_85():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1123, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1124, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        checkQuaterlySurveyDeptResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1122, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        checkQuaterlySurveyDeptResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1123, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        checkQuaterlySurveyDeptResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1124, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


checkQuaterlySurveyDeptResponseType._Automaton = _BuildAutomaton_85()


checkBuildingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=checkBuildingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1129, 3
        ),
    )
)

checkBuildingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=checkBuildingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1130, 3
        ),
    )
)

checkBuildingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=checkBuildingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1131, 3
        ),
    )
)


def _BuildAutomaton_86():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1130, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1131, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        checkBuildingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1129, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        checkBuildingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1130, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        checkBuildingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1131, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


checkBuildingResponseType._Automaton = _BuildAutomaton_86()


getConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionProjectsList"),
        constructionProjectListType,
        scope=getConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1136, 3
        ),
    )
)

getConstructionProjectResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getConstructionProjectResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1137, 3
        ),
    )
)


def _BuildAutomaton_87():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1136, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1137, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionProjectsList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1136, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getConstructionProjectResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1137, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


getConstructionProjectResponseType._Automaton = _BuildAutomaton_87()


getConstructionSurveyDeptResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.buildingAuthorityType,
        scope=getConstructionSurveyDeptResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1142, 3
        ),
    )
)

getConstructionSurveyDeptResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getConstructionSurveyDeptResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1143, 3
        ),
    )
)


def _BuildAutomaton_88():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1142, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1143, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getConstructionSurveyDeptResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1142, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getConstructionSurveyDeptResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1143, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


getConstructionSurveyDeptResponseType._Automaton = _BuildAutomaton_88()


getBuildingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingsList"),
        buildingsListType,
        scope=getBuildingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1148, 3
        ),
    )
)

getBuildingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getBuildingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1149, 3
        ),
    )
)


def _BuildAutomaton_89():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1148, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1149, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingsList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1148, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1149, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


getBuildingResponseType._Automaton = _BuildAutomaton_89()


getDwellingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dwellingsList"),
        dwellingsListType,
        scope=getDwellingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1154, 3
        ),
    )
)

getDwellingResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getDwellingResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1155, 3
        ),
    )
)


def _BuildAutomaton_90():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1154, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1155, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getDwellingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dwellingsList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1154, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getDwellingResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1155, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


getDwellingResponseType._Automaton = _BuildAutomaton_90()


getBuildingEntranceByIdResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "EGID"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.EGIDType,
        scope=getBuildingEntranceByIdResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1160, 3
        ),
    )
)

getBuildingEntranceByIdResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrance"),
        buildingEntranceType,
        scope=getBuildingEntranceByIdResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1161, 3
        ),
    )
)

getBuildingEntranceByIdResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=getBuildingEntranceByIdResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1162, 3
        ),
    )
)

getBuildingEntranceByIdResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getBuildingEntranceByIdResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1163, 3
        ),
    )
)


def _BuildAutomaton_91():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1162, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1163, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        getBuildingEntranceByIdResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "EGID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1160, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        getBuildingEntranceByIdResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingEntrance")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1161, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingEntranceByIdResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1162, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingEntranceByIdResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1163, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


getBuildingEntranceByIdResponseType._Automaton = _BuildAutomaton_91()


getBuildingEntranceResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "buildingEntrancesList"),
        buildingEntrancesListType,
        scope=getBuildingEntranceResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1168, 3
        ),
    )
)

getBuildingEntranceResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getBuildingEntranceResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1169, 3
        ),
    )
)


def _BuildAutomaton_92():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1169, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        getBuildingEntranceResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "buildingEntrancesList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1168, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getBuildingEntranceResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1169, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, []))
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


getBuildingEntranceResponseType._Automaton = _BuildAutomaton_92()


getMutationResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "mutationID"),
        mutationIdType,
        scope=getMutationResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1174, 3
        ),
    )
)

getMutationResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "processed"),
        pyxb.binding.datatypes.boolean,
        scope=getMutationResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1175, 3
        ),
    )
)

getMutationResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getMutationResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1176, 3
        ),
    )
)


def _BuildAutomaton_93():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1174, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1175, 3
        ),
    )
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1176, 3
        ),
    )
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getMutationResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "mutationID")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1174, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getMutationResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "processed")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1175, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(
        getMutationResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1176, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_2, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


getMutationResponseType._Automaton = _BuildAutomaton_93()


getStreetResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "streetWithoutStreetGeometryType"),
        streetWithoutStreetGeometryType,
        scope=getStreetResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1181, 3
        ),
    )
)

getStreetResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getStreetResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1182, 3
        ),
    )
)


def _BuildAutomaton_94():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1182, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        getStreetResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "streetWithoutStreetGeometryType")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1181, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getStreetResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1182, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, []))
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


getStreetResponseType._Automaton = _BuildAutomaton_94()


modifyStreetResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "streetWithoutStreetGeometryType"),
        streetWithoutStreetGeometryType,
        scope=modifyStreetResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1187, 3
        ),
    )
)

modifyStreetResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "errorList"),
        plausibilityRuleType,
        scope=modifyStreetResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1188, 3
        ),
    )
)

modifyStreetResponseType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=modifyStreetResponseType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1189, 3
        ),
    )
)


def _BuildAutomaton_95():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=None,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1188, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1189, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        modifyStreetResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "streetWithoutStreetGeometryType")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1187, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyStreetResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "errorList")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1188, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        modifyStreetResponseType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1189, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


modifyStreetResponseType._Automaton = _BuildAutomaton_95()


coordinatesBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "east"),
        coordinatesEastType,
        scope=coordinatesBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1194, 3
        ),
    )
)

coordinatesBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "north"),
        coordinatesNorthType,
        scope=coordinatesBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1195, 3
        ),
    )
)

coordinatesBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "originOfCoordinates"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.originOfCoordinatesType,
        scope=coordinatesBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1196, 3
        ),
    )
)

coordinatesBuildingType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=coordinatesBuildingType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1197, 3
        ),
    )
)


def _BuildAutomaton_96():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1197, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        coordinatesBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "east")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1194, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        coordinatesBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "north")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1195, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        coordinatesBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "originOfCoordinates")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1196, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        coordinatesBuildingType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1197, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


coordinatesBuildingType._Automaton = _BuildAutomaton_96()


buildingNamedIdType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "IdCategory"),
        STD_ANON_6,
        scope=buildingNamedIdType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1223, 3
        ),
    )
)

buildingNamedIdType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "Id"),
        STD_ANON,
        scope=buildingNamedIdType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1237, 3
        ),
    )
)

buildingNamedIdType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=buildingNamedIdType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1245, 3
        ),
    )
)


def _BuildAutomaton_97():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1245, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        buildingNamedIdType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "IdCategory")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1223, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        buildingNamedIdType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "Id")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1237, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        buildingNamedIdType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1245, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


buildingNamedIdType._Automaton = _BuildAutomaton_97()


dwellingNamedIdType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "IdCategory"),
        STD_ANON_7,
        scope=dwellingNamedIdType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1250, 3
        ),
    )
)

dwellingNamedIdType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "Id"),
        STD_ANON_,
        scope=dwellingNamedIdType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1259, 3
        ),
    )
)

dwellingNamedIdType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=dwellingNamedIdType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1267, 3
        ),
    )
)


def _BuildAutomaton_98():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1267, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        dwellingNamedIdType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "IdCategory")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1250, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        dwellingNamedIdType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "Id")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1259, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        dwellingNamedIdType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1267, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


dwellingNamedIdType._Automaton = _BuildAutomaton_98()


swissMunicipalityType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "municipalityId"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0007_6_0.municipalityIdType,
        scope=swissMunicipalityType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1272, 3
        ),
    )
)

swissMunicipalityType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "municipalityName"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0007_6_0.municipalityNameType,
        scope=swissMunicipalityType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1273, 3
        ),
    )
)

swissMunicipalityType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "cantonAbbreviation"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0007_6_0.cantonAbbreviationType,
        scope=swissMunicipalityType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1274, 3
        ),
    )
)

swissMunicipalityType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=swissMunicipalityType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1275, 3
        ),
    )
)


def _BuildAutomaton_99():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1275, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        swissMunicipalityType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "municipalityId")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1272, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        swissMunicipalityType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "municipalityName")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1273, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        swissMunicipalityType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "cantonAbbreviation")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1274, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        swissMunicipalityType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1275, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


swissMunicipalityType._Automaton = _BuildAutomaton_99()


coordinatesEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "east"),
        coordinatesEastType,
        scope=coordinatesEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1280, 3
        ),
    )
)

coordinatesEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "north"),
        coordinatesNorthType,
        scope=coordinatesEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1281, 3
        ),
    )
)

coordinatesEntranceType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=coordinatesEntranceType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1282, 3
        ),
    )
)


def _BuildAutomaton_100():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1282, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        coordinatesEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "east")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1280, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        coordinatesEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "north")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1281, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        coordinatesEntranceType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1282, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


coordinatesEntranceType._Automaton = _BuildAutomaton_100()


entranceNamedIdType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "IdCategory"),
        STD_ANON_8,
        scope=entranceNamedIdType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1287, 3
        ),
    )
)

entranceNamedIdType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "Id"),
        STD_ANON_2,
        scope=entranceNamedIdType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1295, 3
        ),
    )
)

entranceNamedIdType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=entranceNamedIdType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1303, 3
        ),
    )
)


def _BuildAutomaton_101():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1303, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        entranceNamedIdType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "IdCategory")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1287, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        entranceNamedIdType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "Id")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1295, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        entranceNamedIdType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1303, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


entranceNamedIdType._Automaton = _BuildAutomaton_101()


constructionProjectNamedIdType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "IdCategory"),
        STD_ANON_9,
        scope=constructionProjectNamedIdType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1308, 3
        ),
    )
)

constructionProjectNamedIdType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "Id"),
        STD_ANON_3,
        scope=constructionProjectNamedIdType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1315, 3
        ),
    )
)

constructionProjectNamedIdType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=constructionProjectNamedIdType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1323, 3
        ),
    )
)


def _BuildAutomaton_102():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1323, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectNamedIdType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "IdCategory")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1308, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectNamedIdType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "Id")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1315, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        constructionProjectNamedIdType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1323, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


constructionProjectNamedIdType._Automaton = _BuildAutomaton_102()


setToRefusedConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "authorisationDeniedDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.constructionAuthorisationDeniedDateType,
        scope=setToRefusedConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1334, 3
        ),
    )
)

setToRefusedConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=setToRefusedConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1335, 3
        ),
    )
)


def _BuildAutomaton_103():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1335, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        setToRefusedConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "authorisationDeniedDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1334, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        setToRefusedConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1335, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


setToRefusedConstructionProjectRequestType._Automaton = _BuildAutomaton_103()


setToCancelledConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "cancellationDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.nonRealisationDateType,
        scope=setToCancelledConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1340, 3
        ),
    )
)

setToCancelledConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=setToCancelledConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1341, 3
        ),
    )
)


def _BuildAutomaton_104():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1341, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        setToCancelledConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "cancellationDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1340, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        setToCancelledConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1341, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


setToCancelledConstructionProjectRequestType._Automaton = _BuildAutomaton_104()


setToWithdrawnConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "withdrawalDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.withdrawalDateType,
        scope=setToWithdrawnConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1346, 3
        ),
    )
)

setToWithdrawnConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=setToWithdrawnConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1347, 3
        ),
    )
)


def _BuildAutomaton_105():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1347, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        setToWithdrawnConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "withdrawalDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1346, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        setToWithdrawnConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1347, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


setToWithdrawnConstructionProjectRequestType._Automaton = _BuildAutomaton_105()


setToSuspendedConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "projectSuspensionDate"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.projectSuspensionDateType,
        scope=setToSuspendedConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1352, 3
        ),
    )
)

setToSuspendedConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=setToSuspendedConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1353, 3
        ),
    )
)


def _BuildAutomaton_106():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1353, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        setToSuspendedConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "projectSuspensionDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1352, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        setToSuspendedConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1353, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


setToSuspendedConstructionProjectRequestType._Automaton = _BuildAutomaton_106()


setToDemolishedBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dateOfDemolition"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.datePartiallyKnownType,
        scope=setToDemolishedBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1358, 3
        ),
    )
)

setToDemolishedBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=setToDemolishedBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1359, 3
        ),
    )
)


def _BuildAutomaton_107():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1359, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        setToDemolishedBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dateOfDemolition")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1358, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        setToDemolishedBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1359, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


setToDemolishedBuildingRequestType._Automaton = _BuildAutomaton_107()


setToDemolishedDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "dateOfDemolition"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.datePartiallyKnownType,
        scope=setToDemolishedDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1364, 3
        ),
    )
)

setToDemolishedDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=setToDemolishedDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1365, 3
        ),
    )
)


def _BuildAutomaton_108():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1365, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        setToDemolishedDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "dateOfDemolition")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1364, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        setToDemolishedDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1365, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


setToDemolishedDwellingRequestType._Automaton = _BuildAutomaton_108()


deactivateConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        reasonType,
        scope=deactivateConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1370, 3
        ),
    )
)

deactivateConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=deactivateConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1371, 3
        ),
    )
)


def _BuildAutomaton_109():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1371, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        deactivateConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reason")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1370, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        deactivateConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1371, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


deactivateConstructionProjectRequestType._Automaton = _BuildAutomaton_109()


reactivateConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        reasonType,
        scope=reactivateConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1376, 3
        ),
    )
)

reactivateConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=reactivateConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1377, 3
        ),
    )
)


def _BuildAutomaton_110():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1377, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        reactivateConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reason")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1376, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        reactivateConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1377, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


reactivateConstructionProjectRequestType._Automaton = _BuildAutomaton_110()


deactivateBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        reasonType,
        scope=deactivateBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1382, 3
        ),
    )
)

deactivateBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=deactivateBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1383, 3
        ),
    )
)


def _BuildAutomaton_111():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1383, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        deactivateBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reason")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1382, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        deactivateBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1383, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


deactivateBuildingRequestType._Automaton = _BuildAutomaton_111()


deactivateBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        reasonType,
        scope=deactivateBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1388, 3
        ),
    )
)

deactivateBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=deactivateBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1389, 3
        ),
    )
)


def _BuildAutomaton_112():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1389, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        deactivateBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reason")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1388, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        deactivateBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1389, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


deactivateBuildingEntranceRequestType._Automaton = _BuildAutomaton_112()


reactivateBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        reasonType,
        scope=reactivateBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1394, 3
        ),
    )
)

reactivateBuildingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=reactivateBuildingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1395, 3
        ),
    )
)


def _BuildAutomaton_113():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1395, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        reactivateBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reason")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1394, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        reactivateBuildingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1395, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


reactivateBuildingRequestType._Automaton = _BuildAutomaton_113()


reactivateBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        reasonType,
        scope=reactivateBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1400, 3
        ),
    )
)

reactivateBuildingEntranceRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=reactivateBuildingEntranceRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1401, 3
        ),
    )
)


def _BuildAutomaton_114():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1401, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        reactivateBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reason")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1400, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        reactivateBuildingEntranceRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1401, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


reactivateBuildingEntranceRequestType._Automaton = _BuildAutomaton_114()


deactivateDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        reasonType,
        scope=deactivateDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1406, 3
        ),
    )
)

deactivateDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=deactivateDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1407, 3
        ),
    )
)


def _BuildAutomaton_115():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1407, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        deactivateDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reason")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1406, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        deactivateDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1407, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


deactivateDwellingRequestType._Automaton = _BuildAutomaton_115()


reactivateDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "reason"),
        reasonType,
        scope=reactivateDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1412, 3
        ),
    )
)

reactivateDwellingRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=reactivateDwellingRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1413, 3
        ),
    )
)


def _BuildAutomaton_116():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1413, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        reactivateDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "reason")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1412, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        reactivateDwellingRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1413, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


reactivateDwellingRequestType._Automaton = _BuildAutomaton_116()


getArchivedConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept"),
        constructionSurveyDeptType,
        scope=getArchivedConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1418, 3
        ),
    )
)

getArchivedConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "archiveDate"),
        dateIntervalType,
        scope=getArchivedConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1419, 3
        ),
    )
)

getArchivedConstructionProjectRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=getArchivedConstructionProjectRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1420, 3
        ),
    )
)


def _BuildAutomaton_117():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1419, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1420, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        getArchivedConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "constructionSurveyDept")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1418, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        getArchivedConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "archiveDate")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1419, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        getArchivedConstructionProjectRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1420, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


getArchivedConstructionProjectRequestType._Automaton = _BuildAutomaton_117()


addStreetSectionRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "locality"),
        localityType,
        scope=addStreetSectionRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1425, 3
        ),
    )
)

addStreetSectionRequestType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "extension"),
        pyxb.binding.datatypes.anyType,
        scope=addStreetSectionRequestType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1426, 3
        ),
    )
)


def _BuildAutomaton_118():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1426, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        addStreetSectionRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "locality")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1425, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        addStreetSectionRequestType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "extension")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1426, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


addStreetSectionRequestType._Automaton = _BuildAutomaton_118()


localityNameType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "nameLong"),
        STD_ANON_4,
        scope=localityNameType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1437, 3
        ),
    )
)

localityNameType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "nameShort"),
        STD_ANON_5,
        scope=localityNameType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1445, 3
        ),
    )
)


def _BuildAutomaton_119():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1445, 3
        ),
    )
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        localityNameType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "nameLong")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1437, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        localityNameType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "nameShort")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1445, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


localityNameType._Automaton = _BuildAutomaton_119()


localityType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "swissZipCode"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0010_6_0.swissZipCodeType,
        scope=localityType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1457, 3
        ),
    )
)

localityType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "swissZipCodeAddOn"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0010_6_0.swissZipCodeAddOnType,
        scope=localityType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1458, 3
        ),
    )
)

localityType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "name"),
        localityNameType,
        scope=localityType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1459, 3
        ),
    )
)


def _BuildAutomaton_120():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1457, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1458, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        localityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "swissZipCode")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1457, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        localityType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "swissZipCodeAddOn")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1458, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        localityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, "name")),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1459, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


localityType._Automaton = _BuildAutomaton_120()


streetDescriptionType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "language"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.streetLanguageType,
        scope=streetDescriptionType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1464, 3
        ),
    )
)

streetDescriptionType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "descriptionLong"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.streetDescriptionLongType,
        scope=streetDescriptionType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1465, 3
        ),
    )
)

streetDescriptionType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "descriptionShort"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.streetDescriptionShortType,
        scope=streetDescriptionType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1466, 3
        ),
    )
)

streetDescriptionType._AddElement(
    pyxb.binding.basis.element(
        pyxb.namespace.ExpandedName(Namespace, "descriptionIndex"),
        _ImportedBinding_ebau_gwr_core_schema_ech_0129_5_0.streetIndexNameType,
        scope=streetDescriptionType,
        location=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1467, 3
        ),
    )
)


def _BuildAutomaton_121():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1466, 3
        ),
    )
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(
        min=0,
        max=1,
        metadata=pyxb.utils.utility.Location(
            "/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1467, 3
        ),
    )
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        streetDescriptionType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "language")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1464, 3),
    )
    st_0 = fac.State(
        symbol,
        is_initial=True,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        streetDescriptionType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "descriptionLong")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1465, 3),
    )
    st_1 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(
        streetDescriptionType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "descriptionShort")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1466, 3),
    )
    st_2 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(
        streetDescriptionType._UseForTag(
            pyxb.namespace.ExpandedName(Namespace, "descriptionIndex")
        ),
        pyxb.utils.utility.Location("/app/ebau_gwr/core/xsd/ech_0216_2_0.xsd", 1467, 3),
    )
    st_3 = fac.State(
        symbol,
        is_initial=False,
        final_update=final_update,
        is_unordered_catenation=False,
    )
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_0, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [fac.UpdateInstruction(cc_1, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


streetDescriptionType._Automaton = _BuildAutomaton_121()
